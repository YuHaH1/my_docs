// docs/.vuepress/config.ts
import { defineUserConfig } from "vuepress";
import { searchPlugin } from "@vuepress/plugin-search";

// docs/.vuepress/theme.config.ts
import { defaultTheme } from "vuepress";

// docs/.vuepress/sidebar.ts
var sidebar_default = {
  "/Notes/React/": [
    {
      text: "React",
      collapsible: true,
      children: [
        "/Notes/React/fiber.md",
        "/Notes/React/diff.md"
      ]
    }
  ],
  "/Notes/Vue/": [
    {
      text: "Vue",
      collapsible: true,
      children: [
        "/Notes/React/fiber.md",
        "/Notes/React/diff.md"
      ]
    }
  ],
  "/Notes/Sass/": [
    {
      text: "Sass",
      collapsible: true,
      children: [
        "/Notes/Sass/grammar.md"
      ]
    }
  ],
  "/Notes/TypeScript": [
    {
      text: "TypeScript",
      collapsible: true,
      children: [
        "/Notes/TypeScript/grammar.md"
      ]
    }
  ],
  "/Notes/Interview": [
    {
      text: "TypeScript",
      collapsible: true,
      children: [
        "/Notes/Interview/"
      ]
    }
  ]
};

// docs/.vuepress/utils/index.ts
import fs from "fs";
import path from "path";
var __vite_injected_original_dirname = "E:/360MoveData/Users/YR/Desktop/\u524D\u7AEF\u5FC5\u4F1A\u624B\u5199\u9898/Blog/docs/.vuepress/utils";
var common_libraries_file = ["webpack.md", "browser.md", "vue.md", "react.md", "typeScript.md", "node.md", "nginx.md", "packageManager.md"];
var create_md = (v, text) => {
  const children = common_libraries_file.map((lib) => {
    return {
      text: lib.split(".")[0],
      link: `/${v}/${lib}`
    };
  });
  common_libraries_file.forEach((lib) => {
    const file = path.resolve(__vite_injected_original_dirname, `../${v}`, lib);
    const is_exist = fs.existsSync(file);
    if (!is_exist) {
      const framatterString = `---
lang: zh-CN
title: ${lib.split(".")[0]}
description: \u5173\u952E\u529F\u80FD
collapsible: true
---
`;
      fs.appendFile(file, framatterString, (err) => {
        if (err)
          throw err;
        console.log('The "data to append" was appended to file!');
      });
    }
  });
  return {
    text,
    children
  };
};

// docs/.vuepress/navbar.ts
var navbar_default = [
  {
    text: "\u7B14\u8BB0\u67E5\u9605",
    children: [
      {
        text: "React",
        link: "/Notes/React/"
      },
      {
        text: "Vue",
        link: "/Notes/Vue/"
      },
      {
        text: "Sass",
        link: "/Notes/Sass/"
      },
      {
        text: "TypeScript",
        link: "/Notes/TypeScript/"
      }
    ]
  },
  create_md("Problems", "\u95EE\u9898\u8BB0\u5F55"),
  create_md("Problems", "\u9762\u7ECF")
];

// docs/.vuepress/theme.config.ts
var theme_config_default = defaultTheme({
  lastUpdated: true,
  lastUpdatedText: "\u6700\u8FD1\u66F4\u65B0\u65F6\u95F4",
  sidebar: sidebar_default,
  logo: "/logo.png",
  navbar: navbar_default
});

// docs/.vuepress/config.ts
var config_default = defineUserConfig({
  lang: "zh-CN",
  title: "fancy\u2014\u2014Blog",
  theme: theme_config_default,
  plugins: [
    searchPlugin({
      locales: {
        "/": {
          placeholder: "\u641C\u7D22\u5173\u952E\u8BCD"
        },
        "/zh/": {
          placeholder: "\u641C\u7D22"
        }
      }
    })
  ]
});
export {
  config_default as default
};
//# sourceMappingURL=data:application/json;base64,
