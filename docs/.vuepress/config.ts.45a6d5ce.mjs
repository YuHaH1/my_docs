// docs/.vuepress/config.ts
import { defineUserConfig } from "vuepress";
import { searchPlugin } from "@vuepress/plugin-search";

// docs/.vuepress/theme.config.ts
import { defaultTheme } from "vuepress";

// docs/.vuepress/utils/index.ts
import fs from "fs";
import path from "path";
import { exec } from "child_process";

// docs/.vuepress/utils/constant.ts
var SUBJECTS = {
  react: "react",
  vue: "vue",
  sass: "sass",
  ts: "typeScript",
  node: "node",
  js: "javaScript",
  docker: "docker",
  npm: "\u5305\u7BA1\u7406\u5DE5\u5177",
  vite: "vite",
  webpack: "webpack",
  ["\u8BA1\u7B97\u673A\u7F51\u7EDC"]: "ComputerNetwork",
  ["\u670D\u52A1\u5668"]: "Server",
  linux: "linux",
  css: "css",
  canvas: "canvas",
  utils: {
    vuepress: "vuepress"
  },
  optimize: "optimize",
  English: "English",
  git: "Git"
};
var Notes_Sidebar_Setting = [
  [SUBJECTS.react, "fiber.md", "diff.md"],
  [SUBJECTS.vue, "diff.md", "vueRouter.md"],
  [SUBJECTS.sass, "grammar.md"],
  [SUBJECTS.ts, "grammar.md"],
  [SUBJECTS.node, "node\u57FA\u7840\u77E5\u8BC6.md", "common_apis.md", "pm2.md"],
  [SUBJECTS.js, "\u5FC5\u4F1AAPIs.md"],
  [SUBJECTS.docker, "docker\u57FA\u7840\u77E5\u8BC6.md"],
  [SUBJECTS.linux, "linux\u5E38\u7528\u6307\u4EE4.md"],
  [SUBJECTS.css, "\u4F60\u4E0D\u77E5\u9053\u7684css.md"],
  [SUBJECTS.canvas, "canvas\u57FA\u7840.md"],
  [SUBJECTS.webpack, "\u642D\u5EFAVue3ts.md"],
  [SUBJECTS.optimize, "\u6027\u80FD\u4F18\u5316.md"],
  [SUBJECTS.git, "Git\u57FA\u7840.md"],
  [SUBJECTS.English, "\u82F1\u8BED\u5355\u8BCD.md"]
];
var Interview_Sidebar_Setting = [
  [SUBJECTS.node, "node\u9762\u7ECF.md"],
  [SUBJECTS["\u8BA1\u7B97\u673A\u7F51\u7EDC"], "\u8BA1\u7B97\u673A\u7F51\u7EDC.md"],
  [SUBJECTS.js, "js\u9762\u7ECF.md"],
  [SUBJECTS.css, "css\u9762\u7ECF.md"]
];
var Problems_Sidebar_Setting = [
  [SUBJECTS.node, "pm2.md"],
  [SUBJECTS["\u670D\u52A1\u5668"], "\u670D\u52A1\u5668.md"],
  [SUBJECTS.js, "\u57CB\u70B9.md"]
];
var Utils_Sidebar_Setting = [
  [SUBJECTS.utils.vuepress, "Vuepress\u63D2\u4EF6.md"]
];
var my_typora_path = "D:\\typora\u5B89\u88C5\\Typora\\Typora.exe";
var Problems_navbar_Setting = [
  SUBJECTS["\u670D\u52A1\u5668"],
  SUBJECTS.basePoint
];
var Interview_navbar_Setting = [
  SUBJECTS.node,
  SUBJECTS["\u8BA1\u7B97\u673A\u7F51\u7EDC"],
  SUBJECTS.js,
  SUBJECTS.css
];
var Utils_navbar_Setting = [
  SUBJECTS.utils.vuepress
];
var Notes_navbar_Setting = [
  SUBJECTS.react,
  SUBJECTS.vue,
  SUBJECTS.sass,
  SUBJECTS.ts,
  SUBJECTS.node,
  SUBJECTS.js,
  SUBJECTS.docker,
  SUBJECTS.linux,
  SUBJECTS.css,
  SUBJECTS.canvas,
  SUBJECTS.webpack,
  SUBJECTS.optimize,
  SUBJECTS.English,
  SUBJECTS.git
];

// docs/.vuepress/utils/index.ts
var __vite_injected_original_dirname = "E:/360MoveData/Users/YR/Desktop/\u524D\u7AEF\u5FC5\u4F1A\u624B\u5199\u9898/my_docs/docs/.vuepress/utils";
var create_navbar_md = (lib_array, dir_name, text) => {
  lib_array.forEach((lib) => {
    const file_name = lib.split(".")[0];
    const upStringFileName = file_name[0].toUpperCase() + file_name.substring(1);
    const dir = path.resolve(__vite_injected_original_dirname, `../../${dir_name}`, upStringFileName);
    const dir_exist = fs.existsSync(dir);
    if (!dir_exist) {
      fs.mkdir(dir, (err) => {
        if (err) {
          console.log("\u521B\u5EFA\u6587\u4EF6\u5931\u8D25", dir);
        }
      });
    }
  });
  const children = lib_array.map((lib) => {
    const file_name = lib.split(".")[0];
    const upStringFileName = file_name[0].toUpperCase() + file_name.substring(1);
    const dirs = fs.readdirSync(path.resolve(__vite_injected_original_dirname, `../../${dir_name}/${upStringFileName}`));
    let md_file = dirs.filter((v) => v !== lib);
    md_file = md_file.length > 0 ? md_file[md_file.length - 1] : [];
    return {
      text: upStringFileName,
      link: `/${dir_name}/${upStringFileName}/${md_file}`
    };
  });
  const nav_bar = {
    text,
    children
  };
  return nav_bar;
};
var create_sidebar_md = (lib_array, dir_name) => {
  const sidebar2 = lib_array.map((lib) => {
    const file_name = lib.shift();
    const upStringFileName = file_name[0].toUpperCase() + file_name.substring(1);
    const intergrate_dir_name = dir_name + upStringFileName + "/";
    const sidebar_obj = {};
    lib.forEach((v) => {
      const file = path.resolve(__vite_injected_original_dirname, `../../${intergrate_dir_name + v}`);
      const is_exist = fs.existsSync(file);
      const framatterString = "---\nlang: zh-CN\ntitle: " + v.split(".")[0] + "\ndescription: \u5173\u952E\u529F\u80FD\ncollapsible: true\n---\n# " + v.split(".")[0] + "\n<CommentService/>";
      if (!is_exist) {
        try {
          fs.appendFile(file, framatterString, (err) => {
            if (err)
              throw err;
            console.log('The "data to append" was appended to file!');
          });
          exec_typora(file);
        } catch (error) {
          console.log(error);
        }
      }
    });
    sidebar_obj[intergrate_dir_name] = [
      {
        text: upStringFileName,
        collapsible: true,
        children: lib.map((v) => intergrate_dir_name + v)
      }
    ];
    return sidebar_obj;
  });
  return sidebar2;
};
var exec_typora = (md_file) => {
  if (process.env.NODE_ENV === "production" || !my_typora_path) {
    return;
  }
  const typora_path = path.normalize(my_typora_path);
  if (!fs.existsSync(typora_path)) {
    return;
  }
  md_file = path.normalize(md_file);
  exec(`${typora_path} ${md_file} `, (err, stdout, stderr) => {
    if (err) {
      console.error(err);
      return;
    }
    console.log(stdout);
  });
};

// docs/.vuepress/sidebar.ts
var Notes_sidebar = create_sidebar_md(Notes_Sidebar_Setting, "/Notes/");
var Interview_sidebar = create_sidebar_md(Interview_Sidebar_Setting, "/Interview/");
var Problems_sidebar = create_sidebar_md(Problems_Sidebar_Setting, "/Problems/");
var Utils_sidebar = create_sidebar_md(Utils_Sidebar_Setting, "/Utils/");
var sidebar_all = [...Notes_sidebar, ...Interview_sidebar, ...Problems_sidebar, ...Utils_sidebar];
var sidebar = {};
for (let value of sidebar_all) {
  const keys = Object.keys(value);
  sidebar[keys[0]] = value[keys[0]];
}
var sidebar_default = {
  ...sidebar
};

// docs/.vuepress/navbar.ts
var navbar_default = [
  create_navbar_md(Notes_navbar_Setting, "Notes", "\u7B14\u8BB0\u67E5\u8BE2"),
  create_navbar_md(Problems_navbar_Setting, "Problems", "\u95EE\u9898\u8BB0\u5F55"),
  create_navbar_md(Interview_navbar_Setting, "Interview", "\u9762\u7ECF"),
  create_navbar_md(Utils_navbar_Setting, "Utils", "\u4E0D\u9519\u7684\u5DE5\u5177")
];

// docs/.vuepress/theme.config.ts
var theme_config_default = defaultTheme({
  lastUpdated: true,
  lastUpdatedText: "\u6700\u8FD1\u66F4\u65B0\u65F6\u95F4",
  sidebar: sidebar_default,
  logo: "/logo.png",
  navbar: navbar_default
});

// docs/.vuepress/config.ts
import path2 from "path";
import { commentPlugin } from "vuepress-plugin-comment2";
var __vite_injected_original_dirname2 = "E:/360MoveData/Users/YR/Desktop/\u524D\u7AEF\u5FC5\u4F1A\u624B\u5199\u9898/my_docs/docs/.vuepress";
var config_default = defineUserConfig({
  lang: "zh-CN",
  title: "fancy\u2014\u2014Blog",
  theme: theme_config_default,
  head: [
    // 设置 favor.ico，.vuepress/public 下
    [
      "link",
      { rel: "icon", href: "/hero.jpg" }
    ]
  ],
  public: `${path2.resolve(__vite_injected_original_dirname2, "./public")}`,
  plugins: [
    commentPlugin({
      // your options
      provider: "Giscus",
      comment: true,
      //启用评论功能
      repo: "YuHaH1/my_docs",
      repoId: "R_kgDOJhp_Ig",
      category: "Announcements",
      categoryId: "DIC_kwDOJhp_Is4CWaUE",
      mapping: "title"
    }),
    searchPlugin({
      locales: {
        "/": {
          placeholder: "\u641C\u7D22\u5173\u952E\u8BCD"
        },
        "/zh/": {
          placeholder: "\u641C\u7D22"
        }
      }
    })
  ]
});
export {
  config_default as default
};
//# sourceMappingURL=data:application/json;base64,
