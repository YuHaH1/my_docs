// docs/.vuepress/config.ts
import { defineUserConfig } from "vuepress";
import { searchPlugin } from "@vuepress/plugin-search";

// docs/.vuepress/theme.config.ts
import { defaultTheme } from "vuepress";

// docs/.vuepress/utils/index.ts
import fs from "fs";
import path from "path";
var __vite_injected_original_dirname = "E:/360MoveData/Users/YR/Desktop/\u524D\u7AEF\u5FC5\u4F1A\u624B\u5199\u9898/Blog/docs/.vuepress/utils";
var create_navbar_md = (lib_array, dir_name, text) => {
  const children = lib_array.map((lib) => {
    const file_name = lib.split(".")[0];
    const upStringFileName = file_name[0].toUpperCase() + file_name.substring(1);
    return {
      text: upStringFileName,
      link: `/${dir_name}/${upStringFileName}/${lib}`
    };
  });
  lib_array.forEach((lib) => {
    const file_name = lib.split(".")[0];
    const upStringFileName = file_name[0].toUpperCase() + file_name.substring(1);
    const dir = path.resolve(__vite_injected_original_dirname, `../../${dir_name}`, upStringFileName);
    const file = path.resolve(dir, lib);
    const is_exist = fs.existsSync(file);
    const dir_exist = fs.existsSync(dir);
    if (!is_exist && !dir_exist) {
      const framatterString = "---\nlang: zh-CN\ntitle: " + file_name + "\ndescription: \u5173\u952E\u529F\u80FD\ncollapsible: true\n---";
      fs.mkdirSync(dir);
      fs.appendFile(file, framatterString, (err) => {
        if (err)
          throw err;
        console.log('The "data to append" was appended to file!');
      });
    }
  });
  const nav_bar = {
    text,
    children
  };
  return nav_bar;
};
var create_sidebar_md = (lib_array, dir_name) => {
  const sidebar2 = lib_array.map((lib) => {
    const file_name = lib.shift();
    const upStringFileName = file_name[0].toUpperCase() + file_name.substring(1);
    const intergrate_dir_name = dir_name + upStringFileName + "/";
    const sidebar_obj = {};
    lib.forEach((v) => {
      const file = path.resolve(__vite_injected_original_dirname, `../${intergrate_dir_name + v}`);
      const is_exist = fs.existsSync(file);
      const framatterString = "---\nlang: zh-CN\ntitle: " + file_name + "\ndescription: \u5173\u952E\u529F\u80FD\ncollapsible: true\n---\n# " + intergrate_dir_name;
      if (!is_exist) {
        fs.appendFile(file, framatterString, (err) => {
          if (err)
            throw err;
          console.log('The "data to append" was appended to file!');
        });
      }
    });
    sidebar_obj[intergrate_dir_name] = [
      {
        text: upStringFileName,
        collapsible: true,
        children: lib.map((v) => intergrate_dir_name + v)
      }
    ];
    return sidebar_obj;
  });
  return sidebar2;
};

// docs/.vuepress/utils/constant.ts
var Sidebar_Setting = [
  ["react", "fiber.md", "diff.md"],
  ["vue", "fiber.md", "diff.md"],
  ["sass", "grammar.md"],
  ["TypeScript", "grammar.md"],
  ["node", "node.md"]
];
var Problems_Setting = ["webpack.md", "browser.md", "vue.md", "react.md", "typeScript.md", "node.md", "nginx.md", "packageManager.md"];
var Interview_Setting = ["webpack.md", "browser.md", "vue.md", "react.md", "typeScript.md", "node.md", "nginx.md", "packageManager.md"];
var Notes_Setting = ["react.md", "vue.md", "sass.md", "typeScript.md", "node.md"];

// docs/.vuepress/sidebar.ts
var Notes_side_bar = create_sidebar_md(Sidebar_Setting, "/Notes/");
var sidebar = {};
for (let value of Notes_side_bar) {
  const keys = Object.keys(value);
  sidebar[keys[0]] = value[keys[0]];
}
var sidebar_default = {
  ...sidebar
};

// docs/.vuepress/navbar.ts
var navbar_default = [
  create_navbar_md(Notes_Setting, "Notes", "\u7B14\u8BB0\u67E5\u8BE2"),
  create_navbar_md(Problems_Setting, "Problems", "\u95EE\u9898\u8BB0\u5F55"),
  create_navbar_md(Interview_Setting, "Interview", "\u9762\u7ECF")
];

// docs/.vuepress/theme.config.ts
var theme_config_default = defaultTheme({
  lastUpdated: true,
  lastUpdatedText: "\u6700\u8FD1\u66F4\u65B0\u65F6\u95F4",
  sidebar: sidebar_default,
  logo: "/logo.png",
  navbar: navbar_default
});

// docs/.vuepress/config.ts
var config_default = defineUserConfig({
  lang: "zh-CN",
  title: "fancy\u2014\u2014Blog",
  theme: theme_config_default,
  plugins: [
    searchPlugin({
      locales: {
        "/": {
          placeholder: "\u641C\u7D22\u5173\u952E\u8BCD"
        },
        "/zh/": {
          placeholder: "\u641C\u7D22"
        }
      }
    })
  ]
});
export {
  config_default as default
};
//# sourceMappingURL=data:application/json;base64,
