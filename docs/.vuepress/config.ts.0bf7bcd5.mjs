// docs/.vuepress/config.ts
import { defineUserConfig } from "vuepress";
import { searchPlugin } from "@vuepress/plugin-search";

// docs/.vuepress/theme.config.ts
import { defaultTheme } from "vuepress";

// docs/.vuepress/utils/index.ts
import fs from "fs";
import path from "path";
import { exec } from "child_process";

// docs/.vuepress/utils/constant.ts
var SUBJECTS = {
  react: "react",
  vue: "vue",
  sass: "sass",
  ts: "typeScript",
  node: "node",
  js: "javaScript",
  docker: "docker",
  go: "golang",
  npm: "packageManager",
  vite: "vite",
  engineering: "FrontEndEngineering",
  ["\u8BA1\u7B97\u673A\u7F51\u7EDC"]: "ComputerNetwork",
  ["\u670D\u52A1\u5668"]: "Server",
  linux: "linux",
  css: "css",
  canvas: "canvas",
  utils: {
    node: "nodeDependency",
    vuepress: "vuepress"
  },
  optimize: "optimize",
  English: "English",
  git: "Git",
  browser: "Browser",
  project: "Project",
  algorithms: "Algorithms",
  os: "OS",
  specialEffects: "specialEffects"
};
var Notes_Sidebar_Setting = [
  [SUBJECTS.go, "golang.md"],
  [SUBJECTS.react, "fiber.md", "diff.md", "\u57FA\u7840.md", "React\u72B6\u6001\u7BA1\u7406.md"],
  [SUBJECTS.vue, "diff.md", "vueRouter.md", "vue3.3\u7248\u672C.md", "pinia.md", "\u54CD\u5E94\u5F0F\u539F\u7406.md", "\u7F16\u8BD1\u539F\u7406.md", "vue-loader\u521D\u63A2.md", "Vue3\u5F02\u6B65\u66F4\u65B0.md", "Vue\u5185\u7F6E\u7EC4\u4EF6.md", "Vue\u751F\u547D\u5468\u671F.md"],
  [SUBJECTS.sass, "grammar.md"],
  [SUBJECTS.ts, "grammar.md", "\u7C7B\u578B\u4F53\u64CD.md"],
  [SUBJECTS.node, "node\u57FA\u7840\u77E5\u8BC6.md", "common_apis.md", "pm2.md"],
  [SUBJECTS.js, "\u5FC5\u4F1AAPIs.md", "js\u8FDB\u9636.md", "\u8BBE\u8BA1\u6A21\u5F0F.md"],
  [SUBJECTS.docker, "docker\u57FA\u7840\u77E5\u8BC6.md"],
  [SUBJECTS.linux, "linux\u5E38\u7528\u6307\u4EE4.md"],
  [SUBJECTS.css, "\u4F60\u4E0D\u77E5\u9053\u7684css.md"],
  [SUBJECTS.canvas, "canvas\u57FA\u7840.md"],
  [
    SUBJECTS.engineering,
    "webpack\u642D\u5EFAVue3ts.md",
    "vite\u5FC5\u61C2\u77E5\u8BC6.md",
    "webpack\u5FC5\u61C2\u77E5\u8BC6.md",
    "Vite\u63D2\u4EF6\u5F00\u53D1.md",
    "packageJson\u6587\u4EF6.md",
    "\u5305\u7BA1\u7406\u5668\u7684\u76F8\u5173\u77E5\u8BC6.md",
    "\u5FAE\u524D\u7AEF.md",
    "\u9879\u76EE\u521D\u59CB\u5316.md",
    "rollup.md",
    "\u5355\u5143\u6D4B\u8BD5.md",
    "\u8DE8\u7AEF\u5F00\u53D1.md"
  ],
  [SUBJECTS.optimize, "\u6027\u80FD\u4F18\u5316.md"],
  [SUBJECTS.git, "Git\u57FA\u7840.md"],
  [SUBJECTS.English, "\u82F1\u8BED\u5355\u8BCD.md"],
  [SUBJECTS.browser, "\u6D4F\u89C8\u5668\u5FC5\u5907\u77E5\u8BC6.md"],
  [SUBJECTS.algorithms, "\u7B97\u6CD5.md"],
  [SUBJECTS["\u670D\u52A1\u5668"], "Nginx.md"]
];
var Interview_Sidebar_Setting = [
  [SUBJECTS.node, "node\u9762\u7ECF.md"],
  [SUBJECTS["\u8BA1\u7B97\u673A\u7F51\u7EDC"], "\u8BA1\u7B97\u673A\u7F51\u7EDC.md"],
  [SUBJECTS.js, "js\u9762\u7ECF.md"],
  [SUBJECTS.css, "css\u9762\u7ECF.md"],
  [SUBJECTS.vue, "Vue\u9762\u7ECF.md"],
  [SUBJECTS.browser, "\u6D4F\u89C8\u5668\u76F8\u5173\u9762\u7ECF.md"],
  [SUBJECTS.os, "\u64CD\u4F5C\u7CFB\u7EDF.md"]
];
var Problems_Sidebar_Setting = [
  [SUBJECTS.node, "pm2.md"],
  [SUBJECTS["\u670D\u52A1\u5668"], "\u670D\u52A1\u5668.md"],
  [SUBJECTS.js, "\u57CB\u70B9.md", "js\u4E2D\u9047\u5230\u7684\u95EE\u9898.md"],
  [SUBJECTS.project, "\u9879\u76EE\u4E2D\u5F97\u5230\u7684\u95EE\u9898.md"],
  [SUBJECTS.css, "CSS\u76F8\u5173\u95EE\u9898.md"]
];
var Utils_Sidebar_Setting = [
  [SUBJECTS.utils.vuepress, "Vuepress\u63D2\u4EF6.md"],
  [SUBJECTS.utils.node, "\u597D\u7528\u7684\u4F9D\u8D56\u5DE5\u5177\u5305.md"],
  [SUBJECTS.specialEffects, "js\u5B9E\u73B0\u6548\u679C.md"]
];
var my_typora_path = "D:\\typora\u5B89\u88C5\\Typora\\Typora.exe";
var Problems_navbar_Setting = [
  SUBJECTS["\u670D\u52A1\u5668"],
  SUBJECTS.js,
  SUBJECTS.project,
  SUBJECTS.node,
  SUBJECTS.css
];
var Interview_navbar_Setting = [
  SUBJECTS.node,
  SUBJECTS["\u8BA1\u7B97\u673A\u7F51\u7EDC"],
  SUBJECTS.js,
  SUBJECTS.css,
  SUBJECTS.vue,
  SUBJECTS.browser,
  SUBJECTS.os
];
var Utils_navbar_Setting = [
  SUBJECTS.utils.vuepress,
  SUBJECTS.utils.node,
  SUBJECTS.specialEffects
];
var Notes_navbar_Setting = [
  SUBJECTS.react,
  SUBJECTS.vue,
  SUBJECTS.sass,
  SUBJECTS.ts,
  SUBJECTS.node,
  SUBJECTS.js,
  SUBJECTS.docker,
  SUBJECTS.linux,
  SUBJECTS.css,
  SUBJECTS.canvas,
  SUBJECTS.engineering,
  SUBJECTS.optimize,
  SUBJECTS.English,
  SUBJECTS.git,
  SUBJECTS.browser,
  SUBJECTS.algorithms,
  SUBJECTS["\u670D\u52A1\u5668"]
];

// docs/.vuepress/utils/index.ts
var __vite_injected_original_dirname = "E:/360MoveData/Users/YR/Desktop/\u524D\u7AEF\u5FC5\u4F1A\u624B\u5199\u9898/my_docs/docs/.vuepress/utils";
var create_navbar_md = (lib_array, dir_name, text) => {
  lib_array.forEach((lib) => {
    const file_name = lib.split(".")[0];
    const upStringFileName = file_name[0].toUpperCase() + file_name.substring(1);
    const dir = path.resolve(__vite_injected_original_dirname, `../../${dir_name}`, upStringFileName);
    const dir_exist = fs.existsSync(dir);
    if (!dir_exist) {
      fs.mkdir(dir, (err) => {
        if (err) {
          console.log("\u521B\u5EFA\u6587\u4EF6\u5931\u8D25", dir);
        }
      });
    }
  });
  const children = lib_array.map((lib) => {
    const file_name = lib.split(".")[0];
    const upStringFileName = file_name[0].toUpperCase() + file_name.substring(1);
    const dirs = fs.readdirSync(path.resolve(__vite_injected_original_dirname, `../../${dir_name}/${upStringFileName}`));
    let md_file = dirs.filter((v) => v !== lib);
    md_file = md_file.length > 0 ? md_file[md_file.length - 1] : [];
    return {
      text: upStringFileName,
      link: `/${dir_name}/${upStringFileName}/${md_file}`
    };
  });
  const nav_bar = {
    text,
    children
  };
  return nav_bar;
};
var create_sidebar_md = (lib_array, dir_name) => {
  const sidebar2 = lib_array.map((lib) => {
    const file_name = lib.shift();
    const upStringFileName = file_name[0].toUpperCase() + file_name.substring(1);
    const intergrate_dir_name = dir_name + upStringFileName + "/";
    const sidebar_obj = {};
    lib.forEach((v) => {
      const file = path.resolve(__vite_injected_original_dirname, `../../${intergrate_dir_name + v}`);
      const is_exist = fs.existsSync(file);
      const framatterString = "---\nlang: zh-CN\ntitle: " + v.split(".")[0] + "\ndescription: \u5173\u952E\u529F\u80FD\ncollapsible: true\n---\n# " + v.split(".")[0] + "\n<CommentService/>";
      if (!is_exist) {
        try {
          fs.appendFile(file, framatterString, (err) => {
            if (err)
              throw err;
            console.log('The "data to append" was appended to file!');
            exec_typora(file);
          });
        } catch (error) {
          console.log(error.syscall, "syscall");
        }
      }
    });
    sidebar_obj[intergrate_dir_name] = [
      {
        text: upStringFileName,
        collapsible: true,
        children: lib.map((v) => intergrate_dir_name + v)
      }
    ];
    return sidebar_obj;
  });
  return sidebar2;
};
var exec_typora = (md_file) => {
  if (process.env.NODE_ENV === "production" || !my_typora_path) {
    return;
  }
  const typora_path = path.normalize(my_typora_path);
  if (!fs.existsSync(typora_path)) {
    return;
  }
  md_file = path.normalize(md_file);
  exec(`${typora_path} ${md_file} `, (err, stdout, stderr) => {
    if (err) {
      console.error(err);
      return;
    }
    console.log(stdout);
  });
};

// docs/.vuepress/sidebar.ts
var Notes_sidebar = create_sidebar_md(Notes_Sidebar_Setting, "/Notes/");
var Interview_sidebar = create_sidebar_md(Interview_Sidebar_Setting, "/Interview/");
var Problems_sidebar = create_sidebar_md(Problems_Sidebar_Setting, "/Problems/");
var Utils_sidebar = create_sidebar_md(Utils_Sidebar_Setting, "/Utils/");
var sidebar_all = [...Notes_sidebar, ...Interview_sidebar, ...Problems_sidebar, ...Utils_sidebar];
var sidebar = {};
for (let value of sidebar_all) {
  const keys = Object.keys(value);
  sidebar[keys[0]] = value[keys[0]];
}
var sidebar_default = {
  ...sidebar
};

// docs/.vuepress/navbar.ts
var navbar_default = [
  create_navbar_md(Notes_navbar_Setting, "Notes", "\u7B14\u8BB0\u67E5\u8BE2"),
  create_navbar_md(Problems_navbar_Setting, "Problems", "\u95EE\u9898\u8BB0\u5F55"),
  create_navbar_md(Interview_navbar_Setting, "Interview", "\u9762\u7ECF"),
  create_navbar_md(Utils_navbar_Setting, "Utils", "\u4E0D\u9519\u7684\u5DE5\u5177"),
  {
    text: "\u4E2A\u4EBA\u4FE1\u606F",
    children: [
      {
        text: "github",
        link: "https://github.com/YuHaH1"
      },
      {
        text: "CSDN",
        link: "https://blog.csdn.net/m0_47195133?type=blog"
      }
    ]
  }
];

// docs/.vuepress/theme.config.ts
var theme_config_default = defaultTheme({
  lastUpdated: true,
  lastUpdatedText: "\u6700\u8FD1\u66F4\u65B0\u65F6\u95F4",
  sidebar: sidebar_default,
  logo: "/logo.png",
  navbar: navbar_default
});

// docs/.vuepress/config.ts
import path2 from "path";
import { commentPlugin } from "vuepress-plugin-comment2";
var __vite_injected_original_dirname2 = "E:/360MoveData/Users/YR/Desktop/\u524D\u7AEF\u5FC5\u4F1A\u624B\u5199\u9898/my_docs/docs/.vuepress";
var config_default = defineUserConfig({
  lang: "zh-CN",
  title: "fancy\u2014\u2014Blog",
  theme: theme_config_default,
  head: [
    // 设置 favor.ico，.vuepress/public 下
    [
      "link",
      { rel: "icon", href: "/hero.jpg" }
    ]
  ],
  public: `${path2.resolve(__vite_injected_original_dirname2, "./public")}`,
  plugins: [
    commentPlugin({
      // your options
      provider: "Giscus",
      comment: true,
      //启用评论功能
      repo: "YuHaH1/my_docs",
      repoId: "R_kgDOJhp_Ig",
      category: "Announcements",
      categoryId: "DIC_kwDOJhp_Is4CWaUE",
      mapping: "title"
    }),
    searchPlugin({
      locales: {
        "/": {
          placeholder: "\u641C\u7D22\u5173\u952E\u8BCD"
        },
        "/zh/": {
          placeholder: "\u641C\u7D22"
        }
      }
    })
  ]
});
export {
  config_default as default
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiZG9jcy8udnVlcHJlc3MvY29uZmlnLnRzIiwgImRvY3MvLnZ1ZXByZXNzL3RoZW1lLmNvbmZpZy50cyIsICJkb2NzLy52dWVwcmVzcy91dGlscy9pbmRleC50cyIsICJkb2NzLy52dWVwcmVzcy91dGlscy9jb25zdGFudC50cyIsICJkb2NzLy52dWVwcmVzcy9zaWRlYmFyLnRzIiwgImRvY3MvLnZ1ZXByZXNzL25hdmJhci50cyJdLAogICJzb3VyY2VzQ29udGVudCI6IFsiY29uc3QgX192aXRlX2luamVjdGVkX29yaWdpbmFsX2Rpcm5hbWUgPSBcIkU6LzM2ME1vdmVEYXRhL1VzZXJzL1lSL0Rlc2t0b3AvXHU1MjREXHU3QUVGXHU1RkM1XHU0RjFBXHU2MjRCXHU1MTk5XHU5ODk4L215X2RvY3MvZG9jcy8udnVlcHJlc3NcIjtjb25zdCBfX3ZpdGVfaW5qZWN0ZWRfb3JpZ2luYWxfZmlsZW5hbWUgPSBcIkU6XFxcXDM2ME1vdmVEYXRhXFxcXFVzZXJzXFxcXFlSXFxcXERlc2t0b3BcXFxcXHU1MjREXHU3QUVGXHU1RkM1XHU0RjFBXHU2MjRCXHU1MTk5XHU5ODk4XFxcXG15X2RvY3NcXFxcZG9jc1xcXFwudnVlcHJlc3NcXFxcY29uZmlnLnRzXCI7Y29uc3QgX192aXRlX2luamVjdGVkX29yaWdpbmFsX2ltcG9ydF9tZXRhX3VybCA9IFwiZmlsZTovLy9FOi8zNjBNb3ZlRGF0YS9Vc2Vycy9ZUi9EZXNrdG9wLyVFNSU4OSU4RCVFNyVBQiVBRiVFNSVCRiU4NSVFNCVCQyU5QSVFNiU4OSU4QiVFNSU4NiU5OSVFOSVBMiU5OC9teV9kb2NzL2RvY3MvLnZ1ZXByZXNzL2NvbmZpZy50c1wiO2ltcG9ydCB7IGRlZmluZVVzZXJDb25maWcsIGRlZmF1bHRUaGVtZSB9IGZyb20gJ3Z1ZXByZXNzJ1xyXG5pbXBvcnQgeyBzZWFyY2hQbHVnaW4gfSBmcm9tICdAdnVlcHJlc3MvcGx1Z2luLXNlYXJjaCdcclxuaW1wb3J0IHRoZW1lIGZyb20gJy4vdGhlbWUuY29uZmlnJ1xyXG5pbXBvcnQgcGF0aCBmcm9tICdwYXRoJ1xyXG5pbXBvcnQgeyBjb21tZW50UGx1Z2luIH0gZnJvbSBcInZ1ZXByZXNzLXBsdWdpbi1jb21tZW50MlwiO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgZGVmaW5lVXNlckNvbmZpZyh7XHJcbiAgICBsYW5nOiAnemgtQ04nLFxyXG4gICAgdGl0bGU6ICdmYW5jeVx1MjAxNFx1MjAxNEJsb2cnLFxyXG4gICAgdGhlbWUsXHJcbiAgICBoZWFkOiBbXHJcbiAgICAgICAgLy8gXHU4QkJFXHU3RjZFIGZhdm9yLmljb1x1RkYwQy52dWVwcmVzcy9wdWJsaWMgXHU0RTBCXHJcbiAgICAgICAgW1xyXG4gICAgICAgICAgICAnbGluaycsIHsgcmVsOiAnaWNvbicsIGhyZWY6ICcvaGVyby5qcGcnIH1cclxuICAgICAgICBdXHJcbiAgICBdLFxyXG4gICAgcHVibGljOiBgJHtwYXRoLnJlc29sdmUoX19kaXJuYW1lLCAnLi9wdWJsaWMnKX1gLFxyXG4gICAgcGx1Z2luczogW1xyXG4gICAgICAgIGNvbW1lbnRQbHVnaW4oe1xyXG4gICAgICAgICAgICAvLyB5b3VyIG9wdGlvbnNcclxuICAgICAgICAgICAgcHJvdmlkZXI6IFwiR2lzY3VzXCIsXHJcbiAgICAgICAgICAgIGNvbW1lbnQ6IHRydWUsIC8vXHU1NDJGXHU3NTI4XHU4QkM0XHU4QkJBXHU1MjlGXHU4MEZEXHJcbiAgICAgICAgICAgIHJlcG86ICdZdUhhSDEvbXlfZG9jcycsXHJcbiAgICAgICAgICAgIHJlcG9JZDogJ1Jfa2dET0pocF9JZycsXHJcbiAgICAgICAgICAgIGNhdGVnb3J5OiAnQW5ub3VuY2VtZW50cycsXHJcbiAgICAgICAgICAgIGNhdGVnb3J5SWQ6ICdESUNfa3dET0pocF9JczRDV2FVRScsXHJcbiAgICAgICAgICAgIG1hcHBpbmc6ICd0aXRsZSdcclxuICAgICAgICB9KSxcclxuICAgICAgICBzZWFyY2hQbHVnaW4oe1xyXG4gICAgICAgICAgICBsb2NhbGVzOiB7XHJcbiAgICAgICAgICAgICAgICAnLyc6IHtcclxuICAgICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcjogJ1x1NjQxQ1x1N0QyMlx1NTE3M1x1OTUyRVx1OEJDRCcsXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgJy96aC8nOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI6ICdcdTY0MUNcdTdEMjInLFxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICB9KSxcclxuXHJcbiAgICBdXHJcbn0pIiwgImNvbnN0IF9fdml0ZV9pbmplY3RlZF9vcmlnaW5hbF9kaXJuYW1lID0gXCJFOi8zNjBNb3ZlRGF0YS9Vc2Vycy9ZUi9EZXNrdG9wL1x1NTI0RFx1N0FFRlx1NUZDNVx1NEYxQVx1NjI0Qlx1NTE5OVx1OTg5OC9teV9kb2NzL2RvY3MvLnZ1ZXByZXNzXCI7Y29uc3QgX192aXRlX2luamVjdGVkX29yaWdpbmFsX2ZpbGVuYW1lID0gXCJFOlxcXFwzNjBNb3ZlRGF0YVxcXFxVc2Vyc1xcXFxZUlxcXFxEZXNrdG9wXFxcXFx1NTI0RFx1N0FFRlx1NUZDNVx1NEYxQVx1NjI0Qlx1NTE5OVx1OTg5OFxcXFxteV9kb2NzXFxcXGRvY3NcXFxcLnZ1ZXByZXNzXFxcXHRoZW1lLmNvbmZpZy50c1wiO2NvbnN0IF9fdml0ZV9pbmplY3RlZF9vcmlnaW5hbF9pbXBvcnRfbWV0YV91cmwgPSBcImZpbGU6Ly8vRTovMzYwTW92ZURhdGEvVXNlcnMvWVIvRGVza3RvcC8lRTUlODklOEQlRTclQUIlQUYlRTUlQkYlODUlRTQlQkMlOUElRTYlODklOEIlRTUlODYlOTklRTklQTIlOTgvbXlfZG9jcy9kb2NzLy52dWVwcmVzcy90aGVtZS5jb25maWcudHNcIjtpbXBvcnQgeyBkZWZhdWx0VGhlbWUgfSBmcm9tICd2dWVwcmVzcydcclxuaW1wb3J0IHNpZGViYXIgZnJvbSAnLi9zaWRlYmFyJ1xyXG5pbXBvcnQgbmF2YmFyIGZyb20gJy4vbmF2YmFyJ1xyXG5leHBvcnQgZGVmYXVsdCBkZWZhdWx0VGhlbWUoe1xyXG4gICAgbGFzdFVwZGF0ZWQ6IHRydWUsXHJcbiAgICBsYXN0VXBkYXRlZFRleHQ6ICdcdTY3MDBcdThGRDFcdTY2RjRcdTY1QjBcdTY1RjZcdTk1RjQnLFxyXG4gICAgc2lkZWJhcixcclxuICAgIGxvZ286ICcvbG9nby5wbmcnLFxyXG4gICAgbmF2YmFyLFxyXG5cclxufSkiLCAiY29uc3QgX192aXRlX2luamVjdGVkX29yaWdpbmFsX2Rpcm5hbWUgPSBcIkU6LzM2ME1vdmVEYXRhL1VzZXJzL1lSL0Rlc2t0b3AvXHU1MjREXHU3QUVGXHU1RkM1XHU0RjFBXHU2MjRCXHU1MTk5XHU5ODk4L215X2RvY3MvZG9jcy8udnVlcHJlc3MvdXRpbHNcIjtjb25zdCBfX3ZpdGVfaW5qZWN0ZWRfb3JpZ2luYWxfZmlsZW5hbWUgPSBcIkU6XFxcXDM2ME1vdmVEYXRhXFxcXFVzZXJzXFxcXFlSXFxcXERlc2t0b3BcXFxcXHU1MjREXHU3QUVGXHU1RkM1XHU0RjFBXHU2MjRCXHU1MTk5XHU5ODk4XFxcXG15X2RvY3NcXFxcZG9jc1xcXFwudnVlcHJlc3NcXFxcdXRpbHNcXFxcaW5kZXgudHNcIjtjb25zdCBfX3ZpdGVfaW5qZWN0ZWRfb3JpZ2luYWxfaW1wb3J0X21ldGFfdXJsID0gXCJmaWxlOi8vL0U6LzM2ME1vdmVEYXRhL1VzZXJzL1lSL0Rlc2t0b3AvJUU1JTg5JThEJUU3JUFCJUFGJUU1JUJGJTg1JUU0JUJDJTlBJUU2JTg5JThCJUU1JTg2JTk5JUU5JUEyJTk4L215X2RvY3MvZG9jcy8udnVlcHJlc3MvdXRpbHMvaW5kZXgudHNcIjtpbXBvcnQgZnMgZnJvbSAnZnMnXHJcbmltcG9ydCBwYXRoIGZyb20gJ3BhdGgnXHJcbmltcG9ydCB7IGV4ZWMgfSBmcm9tICdjaGlsZF9wcm9jZXNzJ1xyXG5pbXBvcnQgeyBteV90eXBvcmFfcGF0aCB9IGZyb20gJy4vY29uc3RhbnQnXHJcbmNvbnN0IGNyZWF0ZV9uYXZiYXJfbWQgPSAobGliX2FycmF5OiBBcnJheTxzdHJpbmc+LCBkaXJfbmFtZTogc3RyaW5nLCB0ZXh0OiBzdHJpbmcsKSA9PiB7XHJcblxyXG5cclxuICAgIGxpYl9hcnJheS5mb3JFYWNoKGxpYiA9PiB7XHJcbiAgICAgICAgY29uc3QgZmlsZV9uYW1lID0gbGliLnNwbGl0KCcuJylbMF1cclxuICAgICAgICAvLyBcdTk5OTZcdTVCNTdcdTZCQ0RcdTU5MjdcdTUxOTlcdTY1ODdcdTRFRjZcdTU5MzlcclxuICAgICAgICBjb25zdCB1cFN0cmluZ0ZpbGVOYW1lID0gZmlsZV9uYW1lWzBdLnRvVXBwZXJDYXNlKCkgKyBmaWxlX25hbWUuc3Vic3RyaW5nKDEpXHJcbiAgICAgICAgY29uc3QgZGlyID0gcGF0aC5yZXNvbHZlKF9fZGlybmFtZSwgYC4uLy4uLyR7ZGlyX25hbWV9YCwgdXBTdHJpbmdGaWxlTmFtZSlcclxuICAgICAgICAvLyBjb25zdCBmaWxlID0gcGF0aC5yZXNvbHZlKGRpciwgbGliKVxyXG4gICAgICAgIC8vIGNvbnN0IGlzX2V4aXN0ID0gZnMuZXhpc3RzU3luYyhmaWxlKVxyXG4gICAgICAgIGNvbnN0IGRpcl9leGlzdCA9IGZzLmV4aXN0c1N5bmMoZGlyKVxyXG4gICAgICAgIC8vIGlmICghaXNfZXhpc3QpIHtcclxuICAgICAgICAvLyAgICAgY29uc3QgZnJhbWF0dGVyU3RyaW5nID0gJy0tLVxcbmxhbmc6IHpoLUNOXFxudGl0bGU6ICcgKyBmaWxlX25hbWUgKyAnXFxuZGVzY3JpcHRpb246IFx1NTE3M1x1OTUyRVx1NTI5Rlx1ODBGRFxcbmNvbGxhcHNpYmxlOiB0cnVlXFxuLS0tJ1xyXG4gICAgICAgIGlmICghZGlyX2V4aXN0KSB7XHJcbiAgICAgICAgICAgIGZzLm1rZGlyKGRpciwgKGVycikgPT4ge1xyXG4gICAgICAgICAgICAgICAgaWYgKGVycikge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdcdTUyMUJcdTVFRkFcdTY1ODdcdTRFRjZcdTU5MzFcdThEMjUnLCBkaXIpXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgfVxyXG4gICAgfSlcclxuICAgIGNvbnN0IGNoaWxkcmVuID0gbGliX2FycmF5Lm1hcChsaWIgPT4ge1xyXG4gICAgICAgIGNvbnN0IGZpbGVfbmFtZSA9IGxpYi5zcGxpdCgnLicpWzBdXHJcbiAgICAgICAgY29uc3QgdXBTdHJpbmdGaWxlTmFtZSA9IGZpbGVfbmFtZVswXS50b1VwcGVyQ2FzZSgpICsgZmlsZV9uYW1lLnN1YnN0cmluZygxKVxyXG4gICAgICAgIGNvbnN0IGRpcnMgPSBmcy5yZWFkZGlyU3luYyhwYXRoLnJlc29sdmUoX19kaXJuYW1lLCBgLi4vLi4vJHtkaXJfbmFtZX0vJHt1cFN0cmluZ0ZpbGVOYW1lfWApKVxyXG4gICAgICAgIGxldCBtZF9maWxlID0gZGlycy5maWx0ZXIodiA9PiB2ICE9PSBsaWIpXHJcbiAgICAgICAgbWRfZmlsZSA9IG1kX2ZpbGUubGVuZ3RoID4gMCA/IG1kX2ZpbGVbbWRfZmlsZS5sZW5ndGggLSAxXSA6IFtdXHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgdGV4dDogdXBTdHJpbmdGaWxlTmFtZSxcclxuICAgICAgICAgICAgbGluazogYC8ke2Rpcl9uYW1lfS8ke3VwU3RyaW5nRmlsZU5hbWV9LyR7bWRfZmlsZX1gXHJcbiAgICAgICAgfVxyXG4gICAgfSlcclxuXHJcblxyXG4gICAgY29uc3QgbmF2X2JhciA9IHtcclxuICAgICAgICB0ZXh0LFxyXG4gICAgICAgIGNoaWxkcmVuXHJcbiAgICB9XHJcbiAgICByZXR1cm4gbmF2X2JhclxyXG59XHJcblxyXG5jb25zdCBjcmVhdGVfc2lkZWJhcl9tZCA9IChsaWJfYXJyYXk6IEFycmF5PEFycmF5PHN0cmluZz4+LCBkaXJfbmFtZTogc3RyaW5nKSA9PiB7XHJcbiAgICBjb25zdCBzaWRlYmFyID0gbGliX2FycmF5Lm1hcChsaWIgPT4ge1xyXG4gICAgICAgIC8vIFx1NUI1MFx1NzZFRVx1NUY1NVx1NTQwRFx1NzlGMFxyXG4gICAgICAgIGNvbnN0IGZpbGVfbmFtZSA9IGxpYi5zaGlmdCgpIVxyXG4gICAgICAgIGNvbnN0IHVwU3RyaW5nRmlsZU5hbWUgPSBmaWxlX25hbWVbMF0udG9VcHBlckNhc2UoKSArIGZpbGVfbmFtZS5zdWJzdHJpbmcoMSlcclxuICAgICAgICAvLyBcdTcyMzZcdTdFQTdcdTc2RUVcdTVGNTUrXHU4MUVBXHU1REYxXHU3NkVFXHU1RjU1XHJcbiAgICAgICAgY29uc3QgaW50ZXJncmF0ZV9kaXJfbmFtZSA9IGRpcl9uYW1lICsgdXBTdHJpbmdGaWxlTmFtZSArICcvJ1xyXG4gICAgICAgIGNvbnN0IHNpZGViYXJfb2JqID0ge31cclxuXHJcbiAgICAgICAgbGliLmZvckVhY2godiA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IGZpbGUgPSBwYXRoLnJlc29sdmUoX19kaXJuYW1lLCBgLi4vLi4vJHtpbnRlcmdyYXRlX2Rpcl9uYW1lICsgdn1gKVxyXG4gICAgICAgICAgICBjb25zdCBpc19leGlzdCA9IGZzLmV4aXN0c1N5bmMoZmlsZSlcclxuICAgICAgICAgICAgY29uc3QgZnJhbWF0dGVyU3RyaW5nID0gJy0tLVxcbmxhbmc6IHpoLUNOXFxudGl0bGU6ICcgKyB2LnNwbGl0KCcuJylbMF0gKyAnXFxuZGVzY3JpcHRpb246IFx1NTE3M1x1OTUyRVx1NTI5Rlx1ODBGRFxcbmNvbGxhcHNpYmxlOiB0cnVlXFxuLS0tXFxuIyAnICsgdi5zcGxpdCgnLicpWzBdICsgJ1xcbjxDb21tZW50U2VydmljZS8+J1xyXG4gICAgICAgICAgICBpZiAoIWlzX2V4aXN0KSB7XHJcbiAgICAgICAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAgICAgICAgIGZzLmFwcGVuZEZpbGUoZmlsZSwgZnJhbWF0dGVyU3RyaW5nLCAoZXJyKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChlcnIpIHRocm93IGVycjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ1RoZSBcImRhdGEgdG8gYXBwZW5kXCIgd2FzIGFwcGVuZGVkIHRvIGZpbGUhJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGV4ZWNfdHlwb3JhKGZpbGUpXHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhlcnJvci5zeXNjYWxsLCAnc3lzY2FsbCcpXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KVxyXG5cclxuXHJcbiAgICAgICAgc2lkZWJhcl9vYmpbaW50ZXJncmF0ZV9kaXJfbmFtZV0gPSBbXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHRleHQ6IHVwU3RyaW5nRmlsZU5hbWUsXHJcbiAgICAgICAgICAgICAgICBjb2xsYXBzaWJsZTogdHJ1ZSxcclxuICAgICAgICAgICAgICAgIGNoaWxkcmVuOiBsaWIubWFwKHYgPT4gaW50ZXJncmF0ZV9kaXJfbmFtZSArIHYpXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICBdXHJcbiAgICAgICAgLy8gY29uc29sZS5sb2coc2lkZWJhcl9vYmopO1xyXG4gICAgICAgIHJldHVybiBzaWRlYmFyX29ialxyXG4gICAgfSlcclxuICAgIHJldHVybiBzaWRlYmFyXHJcbn1cclxuXHJcbmNvbnN0IGV4ZWNfdHlwb3JhID0gKG1kX2ZpbGUpID0+IHtcclxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nIHx8ICFteV90eXBvcmFfcGF0aCkge1xyXG4gICAgICAgIHJldHVyblxyXG4gICAgfVxyXG4gICAgY29uc3QgdHlwb3JhX3BhdGggPSBwYXRoLm5vcm1hbGl6ZShteV90eXBvcmFfcGF0aClcclxuICAgIGlmICghZnMuZXhpc3RzU3luYyh0eXBvcmFfcGF0aCkpIHtcclxuICAgICAgICByZXR1cm5cclxuICAgIH1cclxuICAgIG1kX2ZpbGUgPSBwYXRoLm5vcm1hbGl6ZShtZF9maWxlKVxyXG4gICAgZXhlYyhgJHt0eXBvcmFfcGF0aH0gJHttZF9maWxlfSBgLCAoZXJyLCBzdGRvdXQsIHN0ZGVycikgPT4ge1xyXG4gICAgICAgIGlmIChlcnIpIHtcclxuICAgICAgICAgICAgY29uc29sZS5lcnJvcihlcnIpO1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnNvbGUubG9nKHN0ZG91dCk7XHJcbiAgICB9KVxyXG59XHJcblxyXG5cclxuXHJcblxyXG5cclxuZXhwb3J0IHsgY3JlYXRlX25hdmJhcl9tZCwgY3JlYXRlX3NpZGViYXJfbWQgfSIsICJjb25zdCBfX3ZpdGVfaW5qZWN0ZWRfb3JpZ2luYWxfZGlybmFtZSA9IFwiRTovMzYwTW92ZURhdGEvVXNlcnMvWVIvRGVza3RvcC9cdTUyNERcdTdBRUZcdTVGQzVcdTRGMUFcdTYyNEJcdTUxOTlcdTk4OTgvbXlfZG9jcy9kb2NzLy52dWVwcmVzcy91dGlsc1wiO2NvbnN0IF9fdml0ZV9pbmplY3RlZF9vcmlnaW5hbF9maWxlbmFtZSA9IFwiRTpcXFxcMzYwTW92ZURhdGFcXFxcVXNlcnNcXFxcWVJcXFxcRGVza3RvcFxcXFxcdTUyNERcdTdBRUZcdTVGQzVcdTRGMUFcdTYyNEJcdTUxOTlcdTk4OThcXFxcbXlfZG9jc1xcXFxkb2NzXFxcXC52dWVwcmVzc1xcXFx1dGlsc1xcXFxjb25zdGFudC50c1wiO2NvbnN0IF9fdml0ZV9pbmplY3RlZF9vcmlnaW5hbF9pbXBvcnRfbWV0YV91cmwgPSBcImZpbGU6Ly8vRTovMzYwTW92ZURhdGEvVXNlcnMvWVIvRGVza3RvcC8lRTUlODklOEQlRTclQUIlQUYlRTUlQkYlODUlRTQlQkMlOUElRTYlODklOEIlRTUlODYlOTklRTklQTIlOTgvbXlfZG9jcy9kb2NzLy52dWVwcmVzcy91dGlscy9jb25zdGFudC50c1wiO2NvbnN0IFNVQkpFQ1RTID0ge1xyXG4gICAgcmVhY3Q6ICdyZWFjdCcsXHJcbiAgICB2dWU6ICd2dWUnLFxyXG4gICAgc2FzczogJ3Nhc3MnLFxyXG4gICAgdHM6ICd0eXBlU2NyaXB0JyxcclxuICAgIG5vZGU6ICdub2RlJyxcclxuICAgIGpzOiAnamF2YVNjcmlwdCcsXHJcbiAgICBkb2NrZXI6ICdkb2NrZXInLFxyXG4gICAgZ286ICdnb2xhbmcnLFxyXG4gICAgbnBtOiAncGFja2FnZU1hbmFnZXInLFxyXG4gICAgdml0ZTogJ3ZpdGUnLFxyXG4gICAgZW5naW5lZXJpbmc6ICdGcm9udEVuZEVuZ2luZWVyaW5nJyxcclxuICAgIFsnXHU4QkExXHU3Qjk3XHU2NzNBXHU3RjUxXHU3RURDJ106ICdDb21wdXRlck5ldHdvcmsnLFxyXG4gICAgWydcdTY3MERcdTUyQTFcdTU2NjgnXTogJ1NlcnZlcicsXHJcbiAgICBsaW51eDogJ2xpbnV4JyxcclxuICAgIGNzczogJ2NzcycsXHJcbiAgICBjYW52YXM6ICdjYW52YXMnLFxyXG4gICAgdXRpbHM6IHtcclxuICAgICAgICBub2RlOiAnbm9kZURlcGVuZGVuY3knLFxyXG4gICAgICAgIHZ1ZXByZXNzOiAndnVlcHJlc3MnXHJcbiAgICB9LFxyXG4gICAgb3B0aW1pemU6ICdvcHRpbWl6ZScsXHJcbiAgICBFbmdsaXNoOiAnRW5nbGlzaCcsXHJcbiAgICBnaXQ6ICdHaXQnLFxyXG4gICAgYnJvd3NlcjogJ0Jyb3dzZXInLFxyXG4gICAgcHJvamVjdDogJ1Byb2plY3QnLFxyXG4gICAgYWxnb3JpdGhtczogJ0FsZ29yaXRobXMnLFxyXG4gICAgb3M6ICdPUycsXHJcbiAgICBzcGVjaWFsRWZmZWN0czogJ3NwZWNpYWxFZmZlY3RzJ1xyXG59XHJcblxyXG5jb25zdCBOb3Rlc19TaWRlYmFyX1NldHRpbmcgPSBbXHJcbiAgICBbU1VCSkVDVFMuZ28sICdnb2xhbmcubWQnXSxcclxuICAgIFtTVUJKRUNUUy5yZWFjdCwgJ2ZpYmVyLm1kJywgJ2RpZmYubWQnLCAnXHU1N0ZBXHU3ODQwLm1kJywgJ1JlYWN0XHU3MkI2XHU2MDAxXHU3QkExXHU3NDA2Lm1kJ10sXHJcbiAgICBbU1VCSkVDVFMudnVlLCAnZGlmZi5tZCcsICd2dWVSb3V0ZXIubWQnLCAndnVlMy4zXHU3MjQ4XHU2NzJDLm1kJywgJ3BpbmlhLm1kJywgJ1x1NTRDRFx1NUU5NFx1NUYwRlx1NTM5Rlx1NzQwNi5tZCcsICdcdTdGMTZcdThCRDFcdTUzOUZcdTc0MDYubWQnLCAndnVlLWxvYWRlclx1NTIxRFx1NjNBMi5tZCcsICdWdWUzXHU1RjAyXHU2QjY1XHU2NkY0XHU2NUIwLm1kJywgJ1Z1ZVx1NTE4NVx1N0Y2RVx1N0VDNFx1NEVGNi5tZCcsICdWdWVcdTc1MUZcdTU0N0RcdTU0NjhcdTY3MUYubWQnXSxcclxuICAgIFtTVUJKRUNUUy5zYXNzLCAnZ3JhbW1hci5tZCddLFxyXG4gICAgW1NVQkpFQ1RTLnRzLCAnZ3JhbW1hci5tZCcsICdcdTdDN0JcdTU3OEJcdTRGNTNcdTY0Q0QubWQnXSxcclxuICAgIFtTVUJKRUNUUy5ub2RlLCAnbm9kZVx1NTdGQVx1Nzg0MFx1NzdFNVx1OEJDNi5tZCcsICdjb21tb25fYXBpcy5tZCcsICdwbTIubWQnXSxcclxuICAgIFtTVUJKRUNUUy5qcywgJ1x1NUZDNVx1NEYxQUFQSXMubWQnLCAnanNcdThGREJcdTk2MzYubWQnLCAnXHU4QkJFXHU4QkExXHU2QTIxXHU1RjBGLm1kJ10sXHJcbiAgICBbU1VCSkVDVFMuZG9ja2VyLCAnZG9ja2VyXHU1N0ZBXHU3ODQwXHU3N0U1XHU4QkM2Lm1kJ10sXHJcbiAgICBbU1VCSkVDVFMubGludXgsICdsaW51eFx1NUUzOFx1NzUyOFx1NjMwN1x1NEVFNC5tZCddLFxyXG4gICAgW1NVQkpFQ1RTLmNzcywgJ1x1NEY2MFx1NEUwRFx1NzdFNVx1OTA1M1x1NzY4NGNzcy5tZCddLFxyXG4gICAgW1NVQkpFQ1RTLmNhbnZhcywgJ2NhbnZhc1x1NTdGQVx1Nzg0MC5tZCddLFxyXG4gICAgW1NVQkpFQ1RTLmVuZ2luZWVyaW5nLFxyXG4gICAgICAgICd3ZWJwYWNrXHU2NDJEXHU1RUZBVnVlM3RzLm1kJyxcclxuICAgICAgICAndml0ZVx1NUZDNVx1NjFDMlx1NzdFNVx1OEJDNi5tZCcsXHJcbiAgICAgICAgJ3dlYnBhY2tcdTVGQzVcdTYxQzJcdTc3RTVcdThCQzYubWQnLFxyXG4gICAgICAgICdWaXRlXHU2M0QyXHU0RUY2XHU1RjAwXHU1M0QxLm1kJyxcclxuICAgICAgICAncGFja2FnZUpzb25cdTY1ODdcdTRFRjYubWQnLFxyXG4gICAgICAgICdcdTUzMDVcdTdCQTFcdTc0MDZcdTU2NjhcdTc2ODRcdTc2RjhcdTUxNzNcdTc3RTVcdThCQzYubWQnLFxyXG4gICAgICAgICdcdTVGQUVcdTUyNERcdTdBRUYubWQnLFxyXG4gICAgICAgICdcdTk4NzlcdTc2RUVcdTUyMURcdTU5Q0JcdTUzMTYubWQnLFxyXG4gICAgICAgICdyb2xsdXAubWQnLFxyXG4gICAgICAgICdcdTUzNTVcdTUxNDNcdTZENEJcdThCRDUubWQnLFxyXG4gICAgICAgICdcdThERThcdTdBRUZcdTVGMDBcdTUzRDEubWQnXHJcbiAgICBdLFxyXG4gICAgW1NVQkpFQ1RTLm9wdGltaXplLCAnXHU2MDI3XHU4MEZEXHU0RjE4XHU1MzE2Lm1kJ10sXHJcbiAgICBbU1VCSkVDVFMuZ2l0LCAnR2l0XHU1N0ZBXHU3ODQwLm1kJ10sXHJcbiAgICBbU1VCSkVDVFMuRW5nbGlzaCwgJ1x1ODJGMVx1OEJFRFx1NTM1NVx1OEJDRC5tZCddLFxyXG4gICAgW1NVQkpFQ1RTLmJyb3dzZXIsICdcdTZENEZcdTg5QzhcdTU2NjhcdTVGQzVcdTU5MDdcdTc3RTVcdThCQzYubWQnXSxcclxuICAgIFtTVUJKRUNUUy5hbGdvcml0aG1zLCAnXHU3Qjk3XHU2Q0Q1Lm1kJ10sXHJcbiAgICBbU1VCSkVDVFNbJ1x1NjcwRFx1NTJBMVx1NTY2OCddLCAnTmdpbngubWQnXSxcclxuXHJcbl1cclxuY29uc3QgSW50ZXJ2aWV3X1NpZGViYXJfU2V0dGluZyA9IFtcclxuICAgIFtTVUJKRUNUUy5ub2RlLCAnbm9kZVx1OTc2Mlx1N0VDRi5tZCddLFxyXG4gICAgW1NVQkpFQ1RTWydcdThCQTFcdTdCOTdcdTY3M0FcdTdGNTFcdTdFREMnXSwgJ1x1OEJBMVx1N0I5N1x1NjczQVx1N0Y1MVx1N0VEQy5tZCddLFxyXG4gICAgW1NVQkpFQ1RTLmpzLCAnanNcdTk3NjJcdTdFQ0YubWQnLF0sXHJcbiAgICBbU1VCSkVDVFMuY3NzLCAnY3NzXHU5NzYyXHU3RUNGLm1kJ10sXHJcbiAgICBbU1VCSkVDVFMudnVlLCAnVnVlXHU5NzYyXHU3RUNGLm1kJ10sXHJcbiAgICBbU1VCSkVDVFMuYnJvd3NlciwgJ1x1NkQ0Rlx1ODlDOFx1NTY2OFx1NzZGOFx1NTE3M1x1OTc2Mlx1N0VDRi5tZCddLFxyXG4gICAgW1NVQkpFQ1RTLm9zLCAnXHU2NENEXHU0RjVDXHU3Q0ZCXHU3RURGLm1kJ11cclxuXHJcbl1cclxuY29uc3QgUHJvYmxlbXNfU2lkZWJhcl9TZXR0aW5nID0gW1xyXG4gICAgW1NVQkpFQ1RTLm5vZGUsICdwbTIubWQnXSxcclxuICAgIFtTVUJKRUNUU1snXHU2NzBEXHU1MkExXHU1NjY4J10sICdcdTY3MERcdTUyQTFcdTU2NjgubWQnXSxcclxuICAgIFtTVUJKRUNUUy5qcywgJ1x1NTdDQlx1NzBCOS5tZCcsICdqc1x1NEUyRFx1OTA0N1x1NTIzMFx1NzY4NFx1OTVFRVx1OTg5OC5tZCddLFxyXG4gICAgW1NVQkpFQ1RTLnByb2plY3QsICdcdTk4NzlcdTc2RUVcdTRFMkRcdTVGOTdcdTUyMzBcdTc2ODRcdTk1RUVcdTk4OTgubWQnXSxcclxuICAgIFtTVUJKRUNUUy5jc3MsICdDU1NcdTc2RjhcdTUxNzNcdTk1RUVcdTk4OTgubWQnXVxyXG5cclxuXVxyXG5jb25zdCBVdGlsc19TaWRlYmFyX1NldHRpbmcgPSBbXHJcbiAgICBbU1VCSkVDVFMudXRpbHMudnVlcHJlc3MsICdWdWVwcmVzc1x1NjNEMlx1NEVGNi5tZCddLFxyXG4gICAgW1NVQkpFQ1RTLnV0aWxzLm5vZGUsICdcdTU5N0RcdTc1MjhcdTc2ODRcdTRGOURcdThENTZcdTVERTVcdTUxNzdcdTUzMDUubWQnXSxcclxuICAgIFtTVUJKRUNUUy5zcGVjaWFsRWZmZWN0cywgJ2pzXHU1QjlFXHU3M0IwXHU2NTQ4XHU2NzlDLm1kJ11cclxuXVxyXG5cclxuXHJcblxyXG5jb25zdCBteV90eXBvcmFfcGF0aCA9IFwiRDpcXFxcdHlwb3JhXHU1Qjg5XHU4OEM1XFxcXFR5cG9yYVxcXFxUeXBvcmEuZXhlXCJcclxuXHJcbmNvbnN0IFByb2JsZW1zX25hdmJhcl9TZXR0aW5nID0gW1xyXG4gICAgU1VCSkVDVFNbJ1x1NjcwRFx1NTJBMVx1NTY2OCddLFxyXG4gICAgU1VCSkVDVFMuanMsXHJcbiAgICBTVUJKRUNUUy5wcm9qZWN0LFxyXG4gICAgU1VCSkVDVFMubm9kZSxcclxuICAgIFNVQkpFQ1RTLmNzc1xyXG5cclxuXVxyXG5jb25zdCBJbnRlcnZpZXdfbmF2YmFyX1NldHRpbmcgPSBbXHJcbiAgICBTVUJKRUNUUy5ub2RlLFxyXG4gICAgU1VCSkVDVFNbJ1x1OEJBMVx1N0I5N1x1NjczQVx1N0Y1MVx1N0VEQyddLFxyXG4gICAgU1VCSkVDVFMuanMsXHJcbiAgICBTVUJKRUNUUy5jc3MsXHJcbiAgICBTVUJKRUNUUy52dWUsXHJcbiAgICBTVUJKRUNUUy5icm93c2VyLFxyXG4gICAgU1VCSkVDVFMub3NcclxuXVxyXG5jb25zdCBVdGlsc19uYXZiYXJfU2V0dGluZyA9IFtcclxuICAgIFNVQkpFQ1RTLnV0aWxzLnZ1ZXByZXNzLFxyXG4gICAgU1VCSkVDVFMudXRpbHMubm9kZSxcclxuICAgIFNVQkpFQ1RTLnNwZWNpYWxFZmZlY3RzXHJcbl1cclxuY29uc3QgTm90ZXNfbmF2YmFyX1NldHRpbmcgPSBbXHJcbiAgICBTVUJKRUNUUy5yZWFjdCxcclxuICAgIFNVQkpFQ1RTLnZ1ZSxcclxuICAgIFNVQkpFQ1RTLnNhc3MsXHJcbiAgICBTVUJKRUNUUy50cyxcclxuICAgIFNVQkpFQ1RTLm5vZGUsXHJcbiAgICBTVUJKRUNUUy5qcyxcclxuICAgIFNVQkpFQ1RTLmRvY2tlcixcclxuICAgIFNVQkpFQ1RTLmxpbnV4LFxyXG4gICAgU1VCSkVDVFMuY3NzLFxyXG4gICAgU1VCSkVDVFMuY2FudmFzLFxyXG4gICAgU1VCSkVDVFMuZW5naW5lZXJpbmcsXHJcbiAgICBTVUJKRUNUUy5vcHRpbWl6ZSxcclxuICAgIFNVQkpFQ1RTLkVuZ2xpc2gsXHJcbiAgICBTVUJKRUNUUy5naXQsXHJcbiAgICBTVUJKRUNUUy5icm93c2VyLFxyXG4gICAgU1VCSkVDVFMuYWxnb3JpdGhtcyxcclxuICAgIFNVQkpFQ1RTWydcdTY3MERcdTUyQTFcdTU2NjgnXSxcclxuXVxyXG5leHBvcnQge1xyXG4gICAgTm90ZXNfU2lkZWJhcl9TZXR0aW5nLFxyXG4gICAgSW50ZXJ2aWV3X1NpZGViYXJfU2V0dGluZyxcclxuICAgIFByb2JsZW1zX1NpZGViYXJfU2V0dGluZyxcclxuICAgIFByb2JsZW1zX25hdmJhcl9TZXR0aW5nLFxyXG4gICAgSW50ZXJ2aWV3X25hdmJhcl9TZXR0aW5nLFxyXG4gICAgTm90ZXNfbmF2YmFyX1NldHRpbmcsXHJcbiAgICBteV90eXBvcmFfcGF0aCxcclxuICAgIFV0aWxzX25hdmJhcl9TZXR0aW5nLFxyXG4gICAgVXRpbHNfU2lkZWJhcl9TZXR0aW5nXHJcbn1cclxuIiwgImNvbnN0IF9fdml0ZV9pbmplY3RlZF9vcmlnaW5hbF9kaXJuYW1lID0gXCJFOi8zNjBNb3ZlRGF0YS9Vc2Vycy9ZUi9EZXNrdG9wL1x1NTI0RFx1N0FFRlx1NUZDNVx1NEYxQVx1NjI0Qlx1NTE5OVx1OTg5OC9teV9kb2NzL2RvY3MvLnZ1ZXByZXNzXCI7Y29uc3QgX192aXRlX2luamVjdGVkX29yaWdpbmFsX2ZpbGVuYW1lID0gXCJFOlxcXFwzNjBNb3ZlRGF0YVxcXFxVc2Vyc1xcXFxZUlxcXFxEZXNrdG9wXFxcXFx1NTI0RFx1N0FFRlx1NUZDNVx1NEYxQVx1NjI0Qlx1NTE5OVx1OTg5OFxcXFxteV9kb2NzXFxcXGRvY3NcXFxcLnZ1ZXByZXNzXFxcXHNpZGViYXIudHNcIjtjb25zdCBfX3ZpdGVfaW5qZWN0ZWRfb3JpZ2luYWxfaW1wb3J0X21ldGFfdXJsID0gXCJmaWxlOi8vL0U6LzM2ME1vdmVEYXRhL1VzZXJzL1lSL0Rlc2t0b3AvJUU1JTg5JThEJUU3JUFCJUFGJUU1JUJGJTg1JUU0JUJDJTlBJUU2JTg5JThCJUU1JTg2JTk5JUU5JUEyJTk4L215X2RvY3MvZG9jcy8udnVlcHJlc3Mvc2lkZWJhci50c1wiO2ltcG9ydCB7IGNyZWF0ZV9zaWRlYmFyX21kIH0gZnJvbSAnLi91dGlscydcclxuaW1wb3J0IHsgTm90ZXNfU2lkZWJhcl9TZXR0aW5nLCBJbnRlcnZpZXdfU2lkZWJhcl9TZXR0aW5nLCBQcm9ibGVtc19TaWRlYmFyX1NldHRpbmcsIFV0aWxzX1NpZGViYXJfU2V0dGluZyB9IGZyb20gJy4vdXRpbHMvY29uc3RhbnQnXHJcblxyXG5jb25zdCBOb3Rlc19zaWRlYmFyID0gY3JlYXRlX3NpZGViYXJfbWQoTm90ZXNfU2lkZWJhcl9TZXR0aW5nLCAnL05vdGVzLycpXHJcbmNvbnN0IEludGVydmlld19zaWRlYmFyID0gY3JlYXRlX3NpZGViYXJfbWQoSW50ZXJ2aWV3X1NpZGViYXJfU2V0dGluZywgJy9JbnRlcnZpZXcvJylcclxuY29uc3QgUHJvYmxlbXNfc2lkZWJhciA9IGNyZWF0ZV9zaWRlYmFyX21kKFByb2JsZW1zX1NpZGViYXJfU2V0dGluZywgJy9Qcm9ibGVtcy8nKVxyXG5jb25zdCBVdGlsc19zaWRlYmFyID0gY3JlYXRlX3NpZGViYXJfbWQoVXRpbHNfU2lkZWJhcl9TZXR0aW5nLCAnL1V0aWxzLycpXHJcbmNvbnN0IHNpZGViYXJfYWxsID0gWy4uLk5vdGVzX3NpZGViYXIsIC4uLkludGVydmlld19zaWRlYmFyLCAuLi5Qcm9ibGVtc19zaWRlYmFyLCAuLi5VdGlsc19zaWRlYmFyXVxyXG5cclxuXHJcbmNvbnN0IHNpZGViYXIgPSB7fVxyXG5cclxuZm9yIChsZXQgdmFsdWUgb2Ygc2lkZWJhcl9hbGwpIHtcclxuICAgIGNvbnN0IGtleXMgPSBPYmplY3Qua2V5cyh2YWx1ZSlcclxuICAgIHNpZGViYXJba2V5c1swXV0gPSB2YWx1ZVtrZXlzWzBdXVxyXG59XHJcblxyXG5cclxuZXhwb3J0IGRlZmF1bHQge1xyXG4gICAgLi4uc2lkZWJhcixcclxufVxyXG5cclxuIiwgImNvbnN0IF9fdml0ZV9pbmplY3RlZF9vcmlnaW5hbF9kaXJuYW1lID0gXCJFOi8zNjBNb3ZlRGF0YS9Vc2Vycy9ZUi9EZXNrdG9wL1x1NTI0RFx1N0FFRlx1NUZDNVx1NEYxQVx1NjI0Qlx1NTE5OVx1OTg5OC9teV9kb2NzL2RvY3MvLnZ1ZXByZXNzXCI7Y29uc3QgX192aXRlX2luamVjdGVkX29yaWdpbmFsX2ZpbGVuYW1lID0gXCJFOlxcXFwzNjBNb3ZlRGF0YVxcXFxVc2Vyc1xcXFxZUlxcXFxEZXNrdG9wXFxcXFx1NTI0RFx1N0FFRlx1NUZDNVx1NEYxQVx1NjI0Qlx1NTE5OVx1OTg5OFxcXFxteV9kb2NzXFxcXGRvY3NcXFxcLnZ1ZXByZXNzXFxcXG5hdmJhci50c1wiO2NvbnN0IF9fdml0ZV9pbmplY3RlZF9vcmlnaW5hbF9pbXBvcnRfbWV0YV91cmwgPSBcImZpbGU6Ly8vRTovMzYwTW92ZURhdGEvVXNlcnMvWVIvRGVza3RvcC8lRTUlODklOEQlRTclQUIlQUYlRTUlQkYlODUlRTQlQkMlOUElRTYlODklOEIlRTUlODYlOTklRTklQTIlOTgvbXlfZG9jcy9kb2NzLy52dWVwcmVzcy9uYXZiYXIudHNcIjtcclxuaW1wb3J0IHsgY3JlYXRlX25hdmJhcl9tZCB9IGZyb20gJy4vdXRpbHMnXHJcbmltcG9ydCB7IFByb2JsZW1zX25hdmJhcl9TZXR0aW5nLCBJbnRlcnZpZXdfbmF2YmFyX1NldHRpbmcsIE5vdGVzX25hdmJhcl9TZXR0aW5nLCBVdGlsc19uYXZiYXJfU2V0dGluZyB9IGZyb20gJy4vdXRpbHMvY29uc3RhbnQnXHJcblxyXG5cclxuZXhwb3J0IGRlZmF1bHQgW1xyXG4gICAgY3JlYXRlX25hdmJhcl9tZChOb3Rlc19uYXZiYXJfU2V0dGluZywgJ05vdGVzJywgJ1x1N0IxNFx1OEJCMFx1NjdFNVx1OEJFMicpLFxyXG4gICAgY3JlYXRlX25hdmJhcl9tZChQcm9ibGVtc19uYXZiYXJfU2V0dGluZywgJ1Byb2JsZW1zJywgJ1x1OTVFRVx1OTg5OFx1OEJCMFx1NUY1NScpLFxyXG4gICAgY3JlYXRlX25hdmJhcl9tZChJbnRlcnZpZXdfbmF2YmFyX1NldHRpbmcsICdJbnRlcnZpZXcnLCAnXHU5NzYyXHU3RUNGJyksXHJcbiAgICBjcmVhdGVfbmF2YmFyX21kKFV0aWxzX25hdmJhcl9TZXR0aW5nLCAnVXRpbHMnLCAnXHU0RTBEXHU5NTE5XHU3Njg0XHU1REU1XHU1MTc3JyksXHJcbiAgICB7XHJcbiAgICAgICAgdGV4dDogJ1x1NEUyQVx1NEVCQVx1NEZFMVx1NjA2RicsXHJcbiAgICAgICAgY2hpbGRyZW46IFtcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgdGV4dDogJ2dpdGh1YicsXHJcbiAgICAgICAgICAgICAgICBsaW5rOiAnaHR0cHM6Ly9naXRodWIuY29tL1l1SGFIMScsXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHRleHQ6ICdDU0ROJyxcclxuICAgICAgICAgICAgICAgIGxpbms6J2h0dHBzOi8vYmxvZy5jc2RuLm5ldC9tMF80NzE5NTEzMz90eXBlPWJsb2cnXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICBdXHJcbiAgICB9XHJcbl1cclxuXHJcbiJdLAogICJtYXBwaW5ncyI6ICI7QUFBb2EsU0FBUyx3QkFBc0M7QUFDbmQsU0FBUyxvQkFBb0I7OztBQ0RtWixTQUFTLG9CQUFvQjs7O0FDQXhCLE9BQU8sUUFBUTtBQUNwYyxPQUFPLFVBQVU7QUFDakIsU0FBUyxZQUFZOzs7QUNGc2EsSUFBTSxXQUFXO0FBQUEsRUFDeGMsT0FBTztBQUFBLEVBQ1AsS0FBSztBQUFBLEVBQ0wsTUFBTTtBQUFBLEVBQ04sSUFBSTtBQUFBLEVBQ0osTUFBTTtBQUFBLEVBQ04sSUFBSTtBQUFBLEVBQ0osUUFBUTtBQUFB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LG1CQUFtQixHQUFHLGtCQUFrQixHQUFHLGFBQWE7QUFHbEcsSUFBTSxVQUFVLENBQUM7QUFFakIsU0FBUyxTQUFTLGFBQWE7QUFDM0IsUUFBTSxPQUFPLE9BQU8sS0FBSyxLQUFLO0FBQzlCLFVBQVEsS0FBSyxDQUFDLENBQUMsSUFBSSxNQUFNLEtBQUssQ0FBQyxDQUFDO0FBQ3BDO0FBR0EsSUFBTyxrQkFBUTtBQUFBLEVBQ1gsR0FBRztBQUNQOzs7QUNmQSxJQUFPLGlCQUFRO0FBQUEsRUFDWCxpQkFBaUIsc0JBQXNCLFNBQVMsMEJBQU07QUFBQSxFQUN0RCxpQkFBaUIseUJBQXlCLFlBQVksMEJBQU07QUFBQSxFQUM1RCxpQkFBaUIsMEJBQTBCLGFBQWEsY0FBSTtBQUFBLEVBQzVELGlCQUFpQixzQkFBc0IsU0FBUyxnQ0FBTztBQUFBLEVBQ3ZEO0FBQUEsSUFDSSxNQUFNO0FBQUEsSUFDTixVQUFVO0FBQUEsTUFDTjtBQUFBLFFBQ0ksTUFBTTtBQUFBLFFBQ04sTUFBTTtBQUFBLE1BQ1Y7QUFBQSxNQUNBO0FBQUEsUUFDSSxNQUFNO0FBQUEsUUFDTixNQUFLO0FBQUEsTUFDVDtBQUFBLElBQ0o7QUFBQSxFQUNKO0FBQ0o7OztBSnBCQSxJQUFPLHVCQUFRLGFBQWE7QUFBQSxFQUN4QixhQUFhO0FBQUEsRUFDYixpQkFBaUI7QUFBQSxFQUNqQjtBQUFBLEVBQ0EsTUFBTTtBQUFBLEVBQ047QUFFSixDQUFDOzs7QURQRCxPQUFPQyxXQUFVO0FBQ2pCLFNBQVMscUJBQXFCO0FBSjlCLElBQU1DLG9DQUFtQztBQU16QyxJQUFPLGlCQUFRLGlCQUFpQjtBQUFBLEVBQzVCLE1BQU07QUFBQSxFQUNOLE9BQU87QUFBQSxFQUNQO0FBQUEsRUFDQSxNQUFNO0FBQUE7QUFBQSxJQUVGO0FBQUEsTUFDSTtBQUFBLE1BQVEsRUFBRSxLQUFLLFFBQVEsTUFBTSxZQUFZO0FBQUEsSUFDN0M7QUFBQSxFQUNKO0FBQUEsRUFDQSxRQUFRLEdBQUdDLE1BQUssUUFBUUMsbUNBQVcsVUFBVTtBQUFBLEVBQzdDLFNBQVM7QUFBQSxJQUNMLGNBQWM7QUFBQTtBQUFBLE1BRVYsVUFBVTtBQUFBLE1BQ1YsU0FBUztBQUFBO0FBQUEsTUFDVCxNQUFNO0FBQUEsTUFDTixRQUFRO0FBQUEsTUFDUixVQUFVO0FBQUEsTUFDVixZQUFZO0FBQUEsTUFDWixTQUFTO0FBQUEsSUFDYixDQUFDO0FBQUEsSUFDRCxhQUFhO0FBQUEsTUFDVCxTQUFTO0FBQUEsUUFDTCxLQUFLO0FBQUEsVUFDRCxhQUFhO0FBQUEsUUFDakI7QUFBQSxRQUNBLFFBQVE7QUFBQSxVQUNKLGFBQWE7QUFBQSxRQUNqQjtBQUFBLE1BQ0o7QUFBQSxJQUNKLENBQUM7QUFBQSxFQUVMO0FBQ0osQ0FBQzsiLAogICJuYW1lcyI6IFsic2lkZWJhciIsICJwYXRoIiwgIl9fdml0ZV9pbmplY3RlZF9vcmlnaW5hbF9kaXJuYW1lIiwgInBhdGgiLCAiX192aXRlX2luamVjdGVkX29yaWdpbmFsX2Rpcm5hbWUiXQp9Cg==
