// docs/.vuepress/config.ts
import { defineUserConfig } from "vuepress";
import { searchPlugin } from "@vuepress/plugin-search";

// docs/.vuepress/theme.config.ts
import { defaultTheme } from "vuepress";

// docs/.vuepress/utils/index.ts
import fs from "fs";
import path from "path";
import { exec } from "child_process";

// docs/.vuepress/utils/constant.ts
var Notes_Sidebar_Setting = [
  ["react", "fiber.md", "diff.md"],
  ["vue", "fiber.md", "diff.md"],
  ["sass", "grammar.md"],
  ["TypeScript", "grammar.md"],
  ["node", "node\u57FA\u7840\u77E5\u8BC6.md", "common_apis.md", "pm2.md"],
  ["javaScript", "\u5FC5\u4F1AAPIs.md"]
];
var Interview_Sidebar_Setting = [
  ["node", "node\u9762\u7ECF.md"]
];
var Problems_Sidebar_Setting = [
  ["node", "pm2.md"],
  ["Server", "\u670D\u52A1\u5668\u76F8\u5173\u95EE\u9898.md"]
];
var my_typora_path = "D:\\typora\u5B89\u88C5\\Typora\\Typora.exe";
var Problems_navbar_Setting = ["webpack.md", "browser.md", "vue.md", "react.md", "typeScript.md", "node.md", "nginx.md", "packageManager.md", "Server.md"];
var Interview_navbar_Setting = ["webpack.md", "browser.md", "vue.md", "react.md", "typeScript.md", "node.md", "nginx.md", "packageManager.md"];
var Notes_navbar_Setting = ["react.md", "vue.md", "sass.md", "typeScript.md", "node.md", "javaScript.md"];

// docs/.vuepress/utils/index.ts
var __vite_injected_original_dirname = "E:/360MoveData/Users/YR/Desktop/\u524D\u7AEF\u5FC5\u4F1A\u624B\u5199\u9898/Blog/docs/.vuepress/utils";
var create_navbar_md = (lib_array, dir_name, text) => {
  const children = lib_array.map((lib) => {
    const file_name = lib.split(".")[0];
    const upStringFileName = file_name[0].toUpperCase() + file_name.substring(1);
    return {
      text: upStringFileName,
      link: `/${dir_name}/${upStringFileName}/${lib}`
    };
  });
  lib_array.forEach((lib) => {
    const file_name = lib.split(".")[0];
    const upStringFileName = file_name[0].toUpperCase() + file_name.substring(1);
    const dir = path.resolve(__vite_injected_original_dirname, `../../${dir_name}`, upStringFileName);
    const file = path.resolve(dir, lib);
    const is_exist = fs.existsSync(file);
    const dir_exist = fs.existsSync(dir);
    try {
      if (!is_exist) {
        const framatterString = "---\nlang: zh-CN\ntitle: " + file_name + "\ndescription: \u5173\u952E\u529F\u80FD\ncollapsible: true\n---";
        if (!dir_exist) {
          fs.mkdir(dir, (err) => {
            if (!err) {
              fs.appendFile(file, framatterString, (err2) => {
                if (err2)
                  throw err2;
                console.log('The "data to append" was appended to file!');
              });
            } else {
              console.log("\u521B\u5EFA\u6587\u4EF6\u5931\u8D25", dir);
            }
          });
        } else {
          fs.appendFile(file, framatterString, (err) => {
            if (err)
              throw err;
            console.log('The "data to append" was appended to file!');
          });
        }
      }
    } catch (error) {
      console.log(error);
    }
  });
  const nav_bar = {
    text,
    children
  };
  return nav_bar;
};
var create_sidebar_md = (lib_array, dir_name) => {
  const sidebar2 = lib_array.map((lib) => {
    const file_name = lib.shift();
    const upStringFileName = file_name[0].toUpperCase() + file_name.substring(1);
    const intergrate_dir_name = dir_name + upStringFileName + "/";
    const sidebar_obj = {};
    lib.forEach((v) => {
      const file = path.resolve(__vite_injected_original_dirname, `../../${intergrate_dir_name + v}`);
      const is_exist = fs.existsSync(file);
      const framatterString = "---\nlang: zh-CN\ntitle: " + v.split(".")[0] + "\ndescription: \u5173\u952E\u529F\u80FD\ncollapsible: true\n---\n# " + v.split(".")[0];
      if (!is_exist) {
        fs.appendFile(file, framatterString, (err) => {
          if (err)
            throw err;
          console.log('The "data to append" was appended to file!');
        });
        exec_typora(file);
      }
    });
    sidebar_obj[intergrate_dir_name] = [
      {
        text: upStringFileName,
        collapsible: true,
        children: lib.map((v) => intergrate_dir_name + v)
      }
    ];
    return sidebar_obj;
  });
  return sidebar2;
};
var exec_typora = (md_file) => {
  if (process.env.NODE_ENV === "production" || !my_typora_path) {
    return;
  }
  const typora_path = path.normalize(my_typora_path);
  if (!fs.existsSync(typora_path)) {
    return;
  }
  md_file = path.normalize(md_file);
  exec(`${typora_path} ${md_file} `, (err, stdout, stderr) => {
    if (err) {
      console.error(err);
      return;
    }
    console.log(stdout);
  });
};

// docs/.vuepress/sidebar.ts
var Notes_sidebar = create_sidebar_md(Notes_Sidebar_Setting, "/Notes/");
var Interview_sidebar = create_sidebar_md(Interview_Sidebar_Setting, "/Interview/");
var Problems_sidebar = create_sidebar_md(Problems_Sidebar_Setting, "/Problems/");
var sidebar_all = [...Notes_sidebar, ...Interview_sidebar, ...Problems_sidebar];
var sidebar = {};
for (let value of sidebar_all) {
  const keys = Object.keys(value);
  sidebar[keys[0]] = value[keys[0]];
}
var sidebar_default = {
  ...sidebar
};

// docs/.vuepress/navbar.ts
var navbar_default = [
  create_navbar_md(Notes_navbar_Setting, "Notes", "\u7B14\u8BB0\u67E5\u8BE2"),
  create_navbar_md(Problems_navbar_Setting, "Problems", "\u95EE\u9898\u8BB0\u5F55"),
  create_navbar_md(Interview_navbar_Setting, "Interview", "\u9762\u7ECF")
];

// docs/.vuepress/theme.config.ts
var theme_config_default = defaultTheme({
  lastUpdated: true,
  lastUpdatedText: "\u6700\u8FD1\u66F4\u65B0\u65F6\u95F4",
  sidebar: sidebar_default,
  logo: "/logo.png",
  navbar: navbar_default
});

// docs/.vuepress/config.ts
import path2 from "path";
var __vite_injected_original_dirname2 = "E:/360MoveData/Users/YR/Desktop/\u524D\u7AEF\u5FC5\u4F1A\u624B\u5199\u9898/Blog/docs/.vuepress";
var config_default = defineUserConfig({
  lang: "zh-CN",
  title: "fancy\u2014\u2014Blog",
  theme: theme_config_default,
  public: `${path2.resolve(__vite_injected_original_dirname2, "./public")}`,
  plugins: [
    searchPlugin({
      locales: {
        "/": {
          placeholder: "\u641C\u7D22\u5173\u952E\u8BCD"
        },
        "/zh/": {
          placeholder: "\u641C\u7D22"
        }
      }
    })
  ]
});
export {
  config_default as default
};
//# sourceMappingURL=data:application/json;base64,
