import{_ as c,M as p,p as i,q as l,R as n,t as s,N as a,a1 as t}from"./framework-f7ec573f.js";const u="/Vue/pinia.png",r={},d=t(`<h1 id="pinia" tabindex="-1"><a class="header-anchor" href="#pinia" aria-hidden="true">#</a> pinia</h1><h2 id="为什么vue3放弃vuex4" tabindex="-1"><a class="header-anchor" href="#为什么vue3放弃vuex4" aria-hidden="true">#</a> 为什么vue3放弃vuex4</h2><ol><li>pinia比较轻量，只有1kb左右</li><li>良好的TS支持</li><li>使用更简单方便，不需要像Vuex一样，如果数据过多通常分模块管理。而pinia每个store都是独立的</li><li>pinia支持插件扩展自身功能</li><li>pinia放弃mutation，action支持同步和异步</li><li>服务器端渲染支持</li><li>开发工具支持 <ul><li>跟踪动作、突变的时间表</li><li>商店出现在使用它们的组件中</li><li>时间旅行和更容易的调试</li></ul></li><li>热模块更换 <ul><li>在不重新加载页面的情况下修改您的商店</li><li>在开发时保持任何现有状态</li></ul></li></ol><h2 id="_1-定义一个模块商店" tabindex="-1"><a class="header-anchor" href="#_1-定义一个模块商店" aria-hidden="true">#</a> 1.定义一个模块商店</h2><p>https://pinia.vuejs.org/core-concepts/</p><h3 id="_1-1、对象方式定义商店" tabindex="-1"><a class="header-anchor" href="#_1-1、对象方式定义商店" aria-hidden="true">#</a> 1.1、对象方式定义商店</h3><p>在深入研究核心概念之前，我们需要知道存储是使用定义的<code>defineStore()</code>，并且它需要一个<strong>唯一的</strong>名称，作为第一个参数传递：</p><p>这个<em>名称</em>，也称为<em>id</em>，是必要的，Pania 使用它来将商店连接到 devtools。将返回的函数命名为*use...*是可组合项之间的约定，以使其使用习惯。</p><p>与 Vue 的 Options API 类似，也可以传递带有<code>state</code>、<code>actions</code>和<code>getters</code>属性的 Options 对象。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">const</span> useCounterStore <span class="token operator">=</span> <span class="token function">defineStore</span><span class="token punctuation">(</span><span class="token string">&#39;counter&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token function-variable function">state</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">count</span><span class="token operator">:</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token literal-property property">getters</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token function-variable function">double</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">state</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> state<span class="token punctuation">.</span>count <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">actions</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>count<span class="token operator">++</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>==如果解构使用商店定义的属性会失去响应式，因为state是用reactive，因此解构会导致失去响应式==</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> storeToRefs <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;pinia&#39;</span><span class="token comment">//可以使用这个api来保持响应式</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineComponent</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token function">useStore</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token comment">// ❌ 解构会破坏响应式</span>
    <span class="token keyword">const</span> <span class="token punctuation">{</span> name<span class="token punctuation">,</span> doubleCount <span class="token punctuation">}</span> <span class="token operator">=</span> store
    <span class="token comment">//保持响应式</span>
    <span class="token keyword">const</span> <span class="token punctuation">{</span> name<span class="token punctuation">,</span> doubleCount <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">storeToRefs</span><span class="token punctuation">(</span>store<span class="token punctuation">)</span>

    name <span class="token comment">// &quot;eduardo&quot;</span>
    doubleCount <span class="token comment">// 2</span>

    <span class="token keyword">return</span> <span class="token punctuation">{</span>
      <span class="token comment">// will always be &quot;eduardo&quot;</span>
      name<span class="token punctuation">,</span>
      <span class="token comment">// will always be 2</span>
      doubleCount<span class="token punctuation">,</span>
      <span class="token comment">// this one will be reactive</span>
      <span class="token literal-property property">doubleValue</span><span class="token operator">:</span> <span class="token function">computed</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> store<span class="token punctuation">.</span>doubleCount<span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-2、函数的方式定义商店" tabindex="-1"><a class="header-anchor" href="#_1-2、函数的方式定义商店" aria-hidden="true">#</a> 1.2、函数的方式定义商店</h3>`,13),k={href:"https://vuejs.org/api/composition-api-setup.html",target:"_blank",rel:"noopener noreferrer"},v=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> ref <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> useCounterStore <span class="token operator">=</span> <span class="token function">defineStore</span><span class="token punctuation">(</span><span class="token string">&#39;counter&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> count <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
  <span class="token keyword">function</span> <span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    count<span class="token punctuation">.</span>value<span class="token operator">++</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">return</span> <span class="token punctuation">{</span> count<span class="token punctuation">,</span> increment <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在<em>设置商店</em>中：</p><ul><li><code>ref()</code>s 成为<code>state</code>属性</li><li><code>computed()</code>变成<code>getters</code></li><li><code>function()</code>变成<code>actions</code></li></ul><h3 id="_2-状态" tabindex="-1"><a class="header-anchor" href="#_2-状态" aria-hidden="true">#</a> 2.状态</h3><p>在 Pinia 中，状态被定义为返回初始状态的函数。这允许 Pinia 在服务器端和客户端工作。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> defineStore <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;pinia&#39;</span>

<span class="token keyword">const</span> useStore <span class="token operator">=</span> <span class="token function">defineStore</span><span class="token punctuation">(</span><span class="token string">&#39;storeId&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token comment">// arrow function recommended for full type inference</span>
  <span class="token function-variable function">state</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
      <span class="token comment">// all these properties will have their type inferred automatically</span>
      <span class="token literal-property property">counter</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
      <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;Eduardo&#39;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">isAdmin</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><h1 id="关于state状态操作" tabindex="-1"><a class="header-anchor" href="#关于state状态操作" aria-hidden="true">#</a> 关于state状态操作</h1><ol><li>重置状态</li></ol><ul><li><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token function">useStore</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
store<span class="token punctuation">.</span><span class="token function">$reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></blockquote><h3 id="_2-1、修改状态的多种方式" tabindex="-1"><a class="header-anchor" href="#_2-1、修改状态的多种方式" aria-hidden="true">#</a> 2.1、修改状态的多种方式</h3><blockquote><h1 id="直接修改" tabindex="-1"><a class="header-anchor" href="#直接修改" aria-hidden="true">#</a> 直接修改</h1><p>默认情况下，您可以通过<code>store</code>实例访问状态来直接读取和写入状态：</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token function">useStore</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
store<span class="token punctuation">.</span>counter<span class="token operator">++</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><h1 id="通过-patch方法。state它允许您对部分对象同时应用多个更改" tabindex="-1"><a class="header-anchor" href="#通过-patch方法。state它允许您对部分对象同时应用多个更改" aria-hidden="true">#</a> 通过<code>$patch</code>方法。<code>state</code>它允许您对部分对象同时应用多个更改：</h1></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>store<span class="token punctuation">.</span><span class="token function">$patch</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">counter</span><span class="token operator">:</span> store<span class="token punctuation">.</span>counter <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>
  <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">120</span><span class="token punctuation">,</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;DIO&#39;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>但是，使用这种语法应用某些突变确实很难或代价高昂：任何集合修改（例如，从数组中推送、删除、拼接元素）都需要您创建一个新集合。正因为如此，该<code>$patch</code>方法还接受一个函数来对这种难以用补丁对象应用的突变进行分组：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>cartStore.$patch((state) =&gt; {
  state.items.push({ name: &#39;shoes&#39;, quantity: 1 })
  state.hasChanged = true
})
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-2、订阅状态" tabindex="-1"><a class="header-anchor" href="#_2-2、订阅状态" aria-hidden="true">#</a> 2.2、订阅状态</h3><p>用来监测数据变化</p>`,16),m=n("code",null,"$subscribe()",-1),b={href:"https://vuex.vuejs.org/api/#subscribe",target:"_blank",rel:"noopener noreferrer"},g=n("code",null,"$subscribe()",-1),h=n("code",null,"watch()",-1),f=n("em",null,"订阅",-1),y=n("em",null,"补丁",-1),w=t(`<p>默认情况下，<em>状态订阅</em>绑定到添加它们的组件（如果存储在组件的内部<code>setup()</code>）。意思是，<strong>当组件被卸载时，它们将被自动删除</strong>。如果要在组件卸载后保留它们，请<code>{ detached: true }</code>作为第二个参数传递以从当前组件中<em>分离**状态订阅：</em></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> someStore <span class="token operator">=</span> <span class="token function">useSomeStore</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token comment">// this subscription will be kept after the component is unmounted</span>
    someStore<span class="token punctuation">.</span><span class="token function">$subscribe</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">mutation<span class="token punctuation">,</span>state</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
    	
    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">detached</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>

    <span class="token comment">// ...</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
<span class="token comment">//参数mutation</span>
<span class="token punctuation">{</span><span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;patch function&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">storeId</span><span class="token operator">:</span> <span class="token string">&#39;count&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">events</span><span class="token operator">:</span> <span class="token function">Array</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">}</span>
<span class="token literal-property property">events</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>…<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>…<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>…<span class="token punctuation">}</span><span class="token punctuation">]</span>
<span class="token literal-property property">storeId</span><span class="token operator">:</span> <span class="token string">&quot;count&quot;</span>
<span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&quot;patch function&quot;</span> <span class="token comment">//如果是直接修改state中内容，type就是direct ，如果是$patch对象式就是&#39;patch object&#39; 如果是$patch函数式&#39;patch function&#39;</span>
<span class="token punctuation">[</span><span class="token punctuation">[</span>Prototype<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">:</span> Object
<span class="token comment">//events是修改的数据对象</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>类似于watch</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">watch</span><span class="token punctuation">(</span>
  pinia<span class="token punctuation">.</span>state<span class="token punctuation">,</span>
  <span class="token punctuation">(</span><span class="token parameter">state</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// persist the whole state to the local storage whenever it changes</span>
    localStorage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span><span class="token string">&#39;piniaState&#39;</span><span class="token punctuation">,</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span> <span class="token literal-property property">deep</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span>
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-getters" tabindex="-1"><a class="header-anchor" href="#_3-getters" aria-hidden="true">#</a> 3.getters</h2><p>大多数时候，getter 只会依赖状态，但是，他们可能需要使用其他 getter。因此，我们可以在定义常规函数时访问整个*store 实例，<em><strong>但需要定义返回类型的类型（在 TypeScript 中）</strong>。这是由于 TypeScript 中的一个已知限制，<strong>不会影响使用箭头函数定义的 getter，也不会影响不使用的 getter</strong>：<code>this</code></em><em><code>this</code></em>*</p><div class="language-tsx line-numbers-mode" data-ext="tsx"><pre class="language-tsx"><code><span class="token keyword">export</span> <span class="token keyword">const</span> useStore <span class="token operator">=</span> <span class="token function">defineStore</span><span class="token punctuation">(</span><span class="token string">&#39;main&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token function-variable function">state</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>
    counter<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  getters<span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token comment">// automatically infers the return type as a number</span>
    <span class="token function">doubleCount</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> state<span class="token punctuation">.</span>counter <span class="token operator">*</span> <span class="token number">2</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token comment">// the return type **must** be explicitly set</span>
    <span class="token function">doublePlusOne</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span> <span class="token punctuation">{</span>
      <span class="token comment">// autocompletion and typings for the whole store ✨</span>
      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>doubleCount <span class="token operator">+</span> <span class="token number">1</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-1、访问getters内部其他计算属性" tabindex="-1"><a class="header-anchor" href="#_3-1、访问getters内部其他计算属性" aria-hidden="true">#</a> 3.1、访问getters内部其他计算属性</h3>`,8),_=n("code",null,"this",-1),x={href:"https://jsdoc.app/tags-returns.html",target:"_blank",rel:"noopener noreferrer"},S=t(`<div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">const</span> useStore <span class="token operator">=</span> <span class="token function">defineStore</span><span class="token punctuation">(</span><span class="token string">&#39;main&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token function-variable function">state</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>
    counter<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  getters<span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token comment">// 类型是自动推断出来的，因为我们没有使用&quot; this &quot; </span>
    <span class="token function-variable function">doubleCount</span><span class="token operator">:</span> <span class="token punctuation">(</span>state<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> state<span class="token punctuation">.</span>counter <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">,</span>
    <span class="token comment">// here we need to add the type ourselves (using JSDoc in JS). We can also</span>
    <span class="token comment">// use this to document the getter</span>
    <span class="token doc-comment comment">/**
     * Returns the counter value times two plus one.
     *
     * <span class="token keyword">@returns</span> <span class="token punctuation">{</span>number<span class="token punctuation">}</span>
     */</span>
    <span class="token function">doubleCountPlusOne</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// autocompletion ✨</span>
      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>doubleCount <span class="token operator">+</span> <span class="token number">1</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-2、将参数传递给" tabindex="-1"><a class="header-anchor" href="#_3-2、将参数传递给" aria-hidden="true">#</a> 3.2、将参数传递给</h3><p>==请注意，执行此操作时，<strong>getter 不再缓存</strong>，它们只是您调用的函数。但是，您可以在 getter 本身内部缓存一些结果，这并不常见，但应该证明性能更高：==</p><p><em>Getter</em>只是在幕后<em>计算</em>的属性，因此不可能将任何参数传递给它们。但是，您可以从<em>getter</em>返回一个函数以接受任何参数：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">const</span> useStore <span class="token operator">=</span> <span class="token function">defineStore</span><span class="token punctuation">(</span><span class="token string">&#39;main&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
  getters<span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token function-variable function">getUserById</span><span class="token operator">:</span> <span class="token punctuation">(</span>state<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token punctuation">(</span>userId<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> state<span class="token punctuation">.</span>users<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> user<span class="token punctuation">.</span>id <span class="token operator">===</span> userId<span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token function">useStore</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span> <span class="token literal-property property">getUserById</span><span class="token operator">:</span> store<span class="token punctuation">.</span>getUserById <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>User 2: {{ getUserById(2) }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们可以在函数内部自己做缓存来提高性能</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">const</span> useStore <span class="token operator">=</span> <span class="token function">defineStore</span><span class="token punctuation">(</span><span class="token string">&#39;main&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
  getters<span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token function">getActiveUserById</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> activeUsers <span class="token operator">=</span> state<span class="token punctuation">.</span>users<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> user<span class="token punctuation">.</span>active<span class="token punctuation">)</span>
      <span class="token keyword">return</span> <span class="token punctuation">(</span>userId<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> activeUsers<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> user<span class="token punctuation">.</span>id <span class="token operator">===</span> userId<span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-3、访问其他商店的getters" tabindex="-1"><a class="header-anchor" href="#_3-3、访问其他商店的getters" aria-hidden="true">#</a> 3.3、访问其他商店的getters</h3><p>要使用其他存储 getter，您可以直接在<em>getter</em>内部<em>使用它</em>：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> useOtherStore <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./other-store&#39;</span>

<span class="token keyword">export</span> <span class="token keyword">const</span> useStore <span class="token operator">=</span> <span class="token function">defineStore</span><span class="token punctuation">(</span><span class="token string">&#39;main&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token function-variable function">state</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token comment">// ...</span>
      localData
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  getters<span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token function">otherGetter</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> otherStore <span class="token operator">=</span> <span class="token function">useOtherStore</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token keyword">return</span> state<span class="token punctuation">.</span>localData <span class="token operator">+</span> otherStore<span class="token punctuation">.</span>data
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4-actions" tabindex="-1"><a class="header-anchor" href="#_4-actions" aria-hidden="true">#</a> 4.actions</h2><h3 id="_4-1、访问其他商店操作" tabindex="-1"><a class="header-anchor" href="#_4-1、访问其他商店操作" aria-hidden="true">#</a> 4.1、访问其他商店操作</h3><p>要使用另一个商店，您可以直接在<em>action</em>内部<em>使用它</em>：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>import { useAuthStore } from &#39;./auth-store&#39;

export const useSettingsStore = defineStore(&#39;settings&#39;, {
  state: () =&gt; ({
    preferences: null,
    // ...
  }),
  actions: {
    async fetchUserPreferences() {
      const auth = useAuthStore()
      if (auth.isAuthenticated) {
        this.preferences = await fetchPreferences()
      } else {
        throw new Error(&#39;User must be authenticated&#39;)
      }
    },
  },
})
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-2、用法与setup" tabindex="-1"><a class="header-anchor" href="#_4-2、用法与setup" aria-hidden="true">#</a> 4.2、用法与setup()</h3><p>您可以直接调用任何操作作为 store 的方法：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>export default {
  setup() {
    const store = useStore()

    store.randomizeCounter()
  },
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-3、订阅行为" tabindex="-1"><a class="header-anchor" href="#_4-3、订阅行为" aria-hidden="true">#</a> 4.3、订阅行为</h3>`,19),j=n("code",null,"store.$onAction()",-1),q=n("code",null,"after",-1),$=n("code",null,"onError",-1),A={href:"https://v3.vuejs.org/guide/tooling/deployment.html#tracking-runtime-errors",target:"_blank",rel:"noopener noreferrer"},I=t(`<p>这是一个在运行操作之前和它们解决/拒绝之后记录的示例。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> unsubscribe <span class="token operator">=</span> someStore<span class="token punctuation">.</span><span class="token function">$onAction</span><span class="token punctuation">(</span>
  <span class="token punctuation">(</span><span class="token punctuation">{</span>
    name<span class="token punctuation">,</span> <span class="token comment">// name of the action</span>
    store<span class="token punctuation">,</span> <span class="token comment">// store instance, same as \`someStore\`</span>
    args<span class="token punctuation">,</span> <span class="token comment">// array of parameters passed to the action</span>
    after<span class="token punctuation">,</span> <span class="token comment">// hook after the action returns or resolves</span>
    onError<span class="token punctuation">,</span> <span class="token comment">// hook if the action throws or rejects</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// a shared variable for this specific action call</span>
    <span class="token keyword">const</span> startTime <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token comment">// this will trigger before an action on \`store\` is executed</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Start &quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot; with params [</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>args<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;, &#39;</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">].</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>

    <span class="token comment">// this will trigger if the action succeeds and after it has fully run.</span>
    <span class="token comment">// it waits for any returned promised</span>
    <span class="token function">after</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">result</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>
        <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Finished &quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot; after </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>
          Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> startTime
        <span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">ms.\\nResult: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>result<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">.</span><span class="token template-punctuation string">\`</span></span>
      <span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>

    <span class="token comment">// this will trigger if the action throws or returns a promise that rejects</span>
    <span class="token function">onError</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span>
        <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Failed &quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot; after </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> startTime<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">ms.\\nError: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>error<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">.</span><span class="token template-punctuation string">\`</span></span>
      <span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">)</span>

<span class="token comment">// manually remove the listener</span>
<span class="token function">unsubscribe</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span>script setup<span class="token operator">&gt;</span>
	<span class="token keyword">import</span> <span class="token punctuation">{</span> useUsers <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;...&#39;</span>
	<span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token function">useUsers</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	store<span class="token punctuation">.</span><span class="token function">registerUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//可以直接调用</span>

<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-4、订阅-onaction" tabindex="-1"><a class="header-anchor" href="#_4-4、订阅-onaction" aria-hidden="true">#</a> 4.4、订阅$onAction</h3><p>订阅操作默认情况下绑定到添加他的组件。这就意味着当组件卸载，订阅会自动被删除，但如果第二个参数传递为true则会将该订阅与组件分离。（即组件卸载该订阅依然存在）</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//新建一个测试仓库</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> defineStore <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;pinia&#39;</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> testStore <span class="token operator">=</span> <span class="token function">defineStore</span><span class="token punctuation">(</span><span class="token string">&#39;test&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
    <span class="token function">state</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token punctuation">{</span>
            <span class="token literal-property property">count</span><span class="token operator">:</span><span class="token number">1</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token literal-property property">actions</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token function">testOnAction</span><span class="token punctuation">(</span><span class="token parameter">id</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>count<span class="token operator">++</span>
            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>count<span class="token punctuation">)</span>
            <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">&#39;这是testOnAction返回的值&#39;</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token function">testOnAction2</span><span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span>
            <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span><span class="token string">&#39;这是testOnAction222错误返回的值&#39;</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>

    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token comment">//在setup的语法糖里	</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> testStore <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;../../pinia/modules/test&#39;</span>
<span class="token keyword">const</span> myTestStore <span class="token operator">=</span> <span class="token function">testStore</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

store<span class="token punctuation">.</span><span class="token function">$onAction</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span>
  name<span class="token punctuation">,</span>
  store<span class="token punctuation">,</span>
  args<span class="token punctuation">,</span>
  after<span class="token punctuation">,</span>
  onError
<span class="token punctuation">}</span></span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
	<span class="token keyword">if</span><span class="token punctuation">(</span>name<span class="token operator">===</span><span class="token string">&#39;testOnAction&#39;</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
		<span class="token function">after</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">reject</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
			<span class="token comment">//这里可以执行一些操作</span>
		<span class="token punctuation">}</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	<span class="token comment">//onError钩子类似一个错误级中间件，当函数抛出promise的失败状态就会调用</span>
  <span class="token function">onError</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
store<span class="token punctuation">.</span><span class="token function">testOnAction</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
store<span class="token punctuation">.</span><span class="token function">testOnAction2</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">45</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>({ name,store, args,after, onError }） <img src="`+u+'" alt="在这里插入图片描述">$onAction函数接受一个回调函数，<strong>该回调函数内部的代码会先于actions函数调用前执行</strong>，以下是$onAction中回调函数的参数介绍。 name当该仓库中的某个actions函数被调用，name是被调用函数的名字。 store是当前仓库实例,就是myTestStore args是actions中某个被调用函数接受的实参，是个数组类型 after是个钩子函数，内部接受要给回调函数，该回调函数接受一个参数result，当actions中的函数返回了一个promise成功的返回值，result可以接受到，如果actions里的函数没有返回值则result则为undefined。<strong>after钩子函数会在actions中的函数被调用后执行</strong> onError是个钩子函数，如果做过服务端的小伙伴肯定知道错误级中间件，onError同样接受一个回调函数，该回调函数接受一个error参数，该参数是actions内部函数中返回promise失败传的参数。<strong>如果actions内部函数返回了promise失败状态onError就会执行</strong></p><h2 id="_5-插件" tabindex="-1"><a class="header-anchor" href="#_5-插件" aria-hidden="true">#</a> 5.插件</h2><p>由于低级 API，Pania 商店可以完全扩展。以下是您可以执行的操作列表：</p>',9),P=n("li",null,"向商店添加新属性",-1),C=n("li",null,"定义商店时添加新选项",-1),E=n("li",null,"向商店添加新方法",-1),O=n("li",null,"包装现有方法",-1),U=n("li",null,"更改甚至取消操作",-1),T={href:"https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage",target:"_blank",rel:"noopener noreferrer"},V=n("li",null,[n("strong",null,"仅适用"),s("于特定商店")],-1),D=t(`<p>插件被添加到 pinia 实例中<code>pinia.use()</code>。最简单的例子是通过返回一个对象为所有商店添加一个静态属性：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> createPinia <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;pinia&#39;</span>
<span class="token comment">// add a property named \`secret\` to every store that is created after this plugin is installed</span>
<span class="token comment">// this could be in a different file</span>
<span class="token keyword">function</span> <span class="token function">SecretPiniaPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span> <span class="token literal-property property">secret</span><span class="token operator">:</span> <span class="token string">&#39;the cake is a lie&#39;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> pinia <span class="token operator">=</span> <span class="token function">createPinia</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment">// give the plugin to pinia</span>
pinia<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>SecretPiniaPlugin<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2);function B(N,R){const e=p("ExternalLinkIcon"),o=p("CommentService");return i(),l("div",null,[d,n("p",null,[s("还有另一种可能的语法来定义商店。与 Vue Composition API 的"),n("a",k,[s("setup 函数"),a(e)]),s("类似，我们可以传入一个定义响应式属性和方法的函数，并返回一个包含我们想要公开的属性和方法的对象。")]),v,n("p",null,[s("你可以通过 store 的方法观察状态及其变化"),m,s("，类似于 Vuex 的"),n("a",b,[s("subscribe 方法"),a(e)]),s("。"),g,s("与常规相比使用的优点"),h,s("是"),f,s("只会在"),y,s("后触发一次（例如，使用上面的函数版本时）。")]),w,n("p",null,[s("与计算属性一样，您可以组合多个 getter。通过 访问任何其他吸气剂"),_,s("。即使您不使用 TypeScript，您也可以使用"),n("a",x,[s("JSDoc"),a(e)]),s("提示您的 IDE 类型：")]),S,n("p",null,[s("可以用 观察动作及其结果"),j,s("。传递给它的回调在操作本身之前执行。"),q,s("处理承诺并允许您在操作解决后执行功能。以类似的方式，"),$,s("允许您在操作抛出或拒绝时执行函数。这些对于在运行时跟踪错误很有用，类似于"),n("a",A,[s("Vue 文档中的这个技巧"),a(e)]),s("。")]),I,n("ul",null,[P,C,E,O,U,n("li",null,[n("a",T,[s("实现像本地存储"),a(e)]),s("这样的副作用")]),V]),D,a(o)])}const W=c(r,[["render",B],["__file","pinia.html.vue"]]);export{W as default};
