import{_ as c,M as e,p as i,q as l,R as n,t as s,N as a,a1 as p}from"./framework-f7ec573f.js";const u="/HarmonyOS/fangzhou.png",r="/HarmonyOS/runtime_compiler.png",k="/HarmonyOS/font_compile.png",d="/HarmonyOS/composition.png",v="/HarmonyOS/page_life.png",m="/HarmonyOS/life.png",b="/HarmonyOS/State.png",g="/HarmonyOS/uiablitity_life.png",h="/HarmonyOS/uiablitity_life2.png",f={},y=n("h1",{id:"鸿蒙",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#鸿蒙","aria-hidden":"true"},"#"),s(" 鸿蒙")],-1),_=n("h2",{id:"应用模型",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#应用模型","aria-hidden":"true"},"#"),s(" 应用模型")],-1),w=n("p",null,"随着系统的演进发展，HarmonyOS先后提供了两种应用模型：",-1),S=n("strong",null,"FA（Feature Ability）模型：",-1),C={href:"https://developer.harmonyos.com/cn/docs/documentation/doc-guides-V3/fa-model-development-overview-0000001428061496-V3",target:"_blank",rel:"noopener noreferrer"},A=n("strong",null,"Stage模型：",-1),P={href:"https://developer.harmonyos.com/cn/docs/documentation/doc-guides-V3/stage-model-development-overview-0000001427744552-V3",target:"_blank",rel:"noopener noreferrer"},x=n("thead",null,[n("tr",null,[n("th",null,"项目"),n("th",null,"FA模型"),n("th",null,"Stage模型")])],-1),I=n("td",null,[n("strong",null,"应用组件")],-1),L=n("img",{src:"https://alliance-communityfile-drcn.dbankcdn.com/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20231121183807.29131481081492634354539404250632:50001231000000:2800:7B471847779A8EBF8FB498BB6BBE1458CD017B0B9A41D6D29EE9EC6C9130C4DE.png?needInitFileName=true?needInitFileName=true",alt:"点击放大"},null,-1),V={href:"https://developer.harmonyos.com/cn/docs/documentation/doc-guides-V3/pageability-overview-0000001478340893-V3",target:"_blank",rel:"noopener noreferrer"},B={href:"https://developer.harmonyos.com/cn/docs/documentation/doc-guides-V3/serviceability-overview-0000001427584628-V3",target:"_blank",rel:"noopener noreferrer"},U={href:"https://developer.harmonyos.com/cn/docs/documentation/doc-guides-V3/dataability-overview-0000001428061508-V3",target:"_blank",rel:"noopener noreferrer"},T=n("img",{src:"https://alliance-communityfile-drcn.dbankcdn.com/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20231121183807.63076002401067021809337070382294:50001231000000:2800:4490D13AADCABFA0BEEF23041D93F4B3FC102D56869AAB6BC574775C54D1E2EF.png?needInitFileName=true?needInitFileName=true",alt:"点击放大"},null,-1),E={href:"https://developer.harmonyos.com/cn/docs/documentation/doc-guides-V3/uiability-overview-0000001477980929-V3",target:"_blank",rel:"noopener noreferrer"},D={href:"https://developer.harmonyos.com/cn/docs/documentation/doc-guides-V3/4_3extensionability_u7ec4_u4ef6-0000001478340873-V3",target:"_blank",rel:"noopener noreferrer"},F=n("td",null,[n("strong",null,"进程模型")],-1),O={href:"https://developer.harmonyos.com/cn/docs/documentation/doc-guides-V3/process-model-fa-0000001478181185-V3",target:"_blank",rel:"noopener noreferrer"},j={href:"https://developer.harmonyos.com/cn/docs/documentation/doc-guides-V3/process-model-stage-0000001428061488-V3",target:"_blank",rel:"noopener noreferrer"},H=n("td",null,[n("strong",null,"线程模型")],-1),R={href:"https://developer.harmonyos.com/cn/docs/documentation/doc-guides-V3/thread-model-fa-0000001427902248-V3",target:"_blank",rel:"noopener noreferrer"},W={href:"https://developer.harmonyos.com/cn/docs/documentation/doc-guides-V3/thread-model-stage-0000001428061492-V3",target:"_blank",rel:"noopener noreferrer"},$=n("td",null,[n("strong",null,"应用配置文件")],-1),q={href:"https://developer.harmonyos.com/cn/docs/documentation/doc-guides-V3/application-configuration-file-overview-fa-0000001478340857-V3",target:"_blank",rel:"noopener noreferrer"},N={href:"https://developer.harmonyos.com/cn/docs/documentation/doc-guides-V3/application-configuration-file-overview-stage-0000001428061460-V3",target:"_blank",rel:"noopener noreferrer"},M={href:"https://developer.harmonyos.com/cn/docs/documentation/doc-guides-V3/application-component-configuration-stage-0000001478340869-V3",target:"_blank",rel:"noopener noreferrer"},z=p('<h2 id="方舟编译器" tabindex="-1"><a class="header-anchor" href="#方舟编译器" aria-hidden="true">#</a> 方舟编译器</h2><p>ArkCompiler利用ArkTS的静态类型信息，进行类型推导并生成对象描述和内联缓存，加速运行时对字节码的解释执行；AOT（Ahead-of-Time）Compiler利用静态类型信息直接将字节码编译生成优化机器码，让应用启动即可运行高性能代码，提升应用启动和运行性能。</p><p><img src="https://developer.huawei.com/images/new-content/develop/ArkCompiler/arkcompiler-1-1103.gif" alt=""></p><p>支持多种编程语言、多种芯片平台联合编译、运行而设计的统一编译运行时平台。支持 包括动态类型和静态类型语言在内的多种编程语言，如 ArkTS、TS、JS。</p><p><img src="'+u+'" alt=""></p><p>①<strong>方舟编译器分成两个部分。</strong></p><ul><li>编译工具链（负责将ArkTS/TS/JS源码编译生成方舟字节码）</li><li>运行时（直接运行字节码文件）</li></ul><p>②<strong>方舟的特点</strong></p><ul><li><strong>原生支持TS</strong>，不需要将TS转成JS。方舟编译器的编译工具链编译 TS 源码时，会分析推导 TS 的类型信息并将其传递给运行时。运行时直接使用类型信息在运行前预生成内联缓 存 （Inline Cache ）以加速字节码执行。另外， TSAOT（ Ahead-of-Time ） Compiler，可以利用字节码文件中的类型信息，直接编译生成优化机器码，使得应 用可以直接运行优化机器码，获得高性能运行体验。</li><li>**并发模型优化，**ECMAScript 规范没有提供并发语义表述，业界引擎，如 浏览器或者 Node.js，通常会提供基于 Actor 并发模型的 Worker API 来支持多线 程开发。Actor 模型下执行体之间不共享任何数据对象，通过消息机制进行通信。 因此 Web 引擎或者 Node.js 引擎的 Worker 都有启动速度慢、内存占用高这些问 题。针对这些问题，方舟编译器运行时已经实现了 Actor 实例中的不可变或者不易 变的对象（方法和字节码）的共享，较大程度地优化了 Actor 的启动性能和启动内 存。</li><li><strong>便利的并发API，</strong>：方舟编译运行时不只提供了业界通用的 Worker API，还提供了 TaskPool，作为并发 API 的增强。TaskPool 是一个支持优先级调度、工作线程自 动扩缩容的任务池功能库。开发者无需关心并发实例的生命周期，也无需关心任务负载变化时需要创建或者销毁并发实例，极大地简化了高性能多线程鸿蒙应用的开发。</li><li>**代码安全，**方舟编译器前端编译工具链将 ArkTS/TS/JS 程序预先静态编译为方舟字节码， 并且还提供了多重混淆能力的增强，有效地提升了开发者代码资产的安全强度。同 时出于安全的考虑，ArkCompiler 不支持宽松模式的 JS 代码，也不支持 eval 等 运行动态字符串的功能。</li></ul><p>③<strong>方舟工具链</strong></p><p>传统的 JS 程序开发中，应用程序往往带的是经过前端打包工具处理过的 JS bundle 文 件，在程序运行阶段进行解释执行；这种运行方式需要设备有强大的计算能力。鸿蒙系统能 够支持的设备范围广泛，覆盖从低端的 IoT 设备到高性能手机设备。采用传统的方式，无法 保证多类型设备的体验一致性。</p><p>在鸿蒙开发环境中，应用代码是通过前端编译器完成编译的。前端编译器按照语言规范 解析源代码，编译成方舟运行时能够理解的二进制字节码格式（ABC，ArkCompiler ByteCode），最后打包到应用中。前端编译器是鸿蒙应用框架与其它 JS 应用框架最主要的 差别之一。下图展示了两种编译运行方式的差别，方舟前端工具链把解析源码、编译字节码 的过程从运行时迁移到编译时，降低运行时的开销。</p><p><img src="'+r+'" alt=""></p><p>前端编译器负责将 ArkTS 代码编译成方舟字节码 ABC，鸿蒙生态应用编译流程中，分 为两种编译模式。分别是 bundle 和 esmodule 编译模式。两者的区别主要在源码文件的处理上，bundle 编译把各个有依赖关系的源代码通过打包方式打成一个 bundle 文件，然后 通过前端编译器编译成 ABC 字节码文件；而 esmodule 编译是保持用户写的 ArkTS 模块不变，通过前端编译器编译成 ABC 字节码文件，字节码文件内保留各个模块的代码段，依赖关系等信息；当前推荐开发者使用 esmodule 模式，保持模块语义。</p><p>前端编译器是根据输入的 ArkTS 源码，进行词法，语法解析、转换、编译、输出字节码 文件；在这个过程中会提取代码中标注的类型信息，进行类型检查，类型绑定，最终作为元 数据生成到字节码 ABC 文件中。</p><p><img src="'+k+'" alt=""></p><ul><li>解析：前端编译器读取 ArkTS 源码，进行词法，语法解析，输出抽象语法树（AST）</li><li>转换：前端编译器识别语法糖，转换成基础语法</li><li>编译：根据抽象语法树，生成对应的中间表示（IR）</li><li>输出：收集 IR，字符资源，常量，等各种元素，按照 ABC 文件格式生成字节码文件</li><li>优化：读取 ABC 文件中的字节码信息，生成 IR 表示，进行优化处理，重新生成更 优的字节码文件。</li></ul><h2 id="工程目录" tabindex="-1"><a class="header-anchor" href="#工程目录" aria-hidden="true">#</a> 工程目录</h2><ul><li>AppScope中存放应用全局所需要的资源文件。</li><li>entry是应用的主模块，存放HarmonyOS应用的代码、资源等。</li><li>oh_modules是工程的依赖包，存放工程依赖的源文件。</li><li>build-profile.json5是工程级配置信息，包括签名、产品配置等。</li><li>hvigorfile.ts是工程级编译构建任务脚本，hvigor是基于任务管理机制实现的一款全新的自动化构建工具，主要提供任务注册编排，工程模型管理、配置管理等核心能力。</li><li>oh-package.json5是工程级依赖配置文件，用于记录引入包的配置信息。</li></ul><p>在AppScope，其中有resources文件夹和配置文件app.json5。AppScope&gt;resources&gt;base中包含element和media两个文件夹，</p><ul><li>其中element文件夹主要存放公共的字符串、布局文件等资源。</li><li>media存放全局公共的多媒体资源文件。</li></ul><p>entry&gt;src目录中主要包含总的main文件夹，单元测试目录ohosTest，以及模块级的配置文件。</p><ul><li>main文件夹中，ets文件夹用于存放ets代码，resources文件存放模块内的多媒体及布局文件等，module.json5文件为模块的配置文件。</li><li>ohosTest是单元测试目录。</li><li>build-profile.json5是模块级配置信息，包括编译构建配置项。</li><li>hvigorfile.ts文件是模块级构建脚本。</li><li>oh-package.json5是模块级依赖配置信息文件。</li></ul><p>进入src&gt;main&gt;ets目录中，其分为entryability、pages两个文件夹。</p><ul><li>entryability存放ability文件，用于当前ability应用逻辑和生命周期管理。</li><li>pages存放UI界面相关代码文件，初始会生成一个Index页面。</li></ul><p>resources目录下存放模块公共的多媒体、字符串及布局文件等资源，分别存放在element、media文件夹中。</p><h3 id="app-json5" tabindex="-1"><a class="header-anchor" href="#app-json5" aria-hidden="true">#</a> app.json5</h3><p>AppScope&gt;app.json5是应用的全局的配置文件，用于存放应用公共的配置信息。</p><p>其中配置信息如下：</p><ul><li>bundleName是包名。</li><li>vendor是应用程序供应商。</li><li>versionCode是用于区分应用版本。</li><li>versionName是版本号。</li><li>icon对应于应用的显示图标。</li><li>label是应用名。</li></ul><h3 id="module-json5" tabindex="-1"><a class="header-anchor" href="#module-json5" aria-hidden="true">#</a> module.json5</h3><p>entry&gt;src&gt;main&gt;module.json5是模块的配置文件，包含当前模块的配置信息。</p><p>其中module对应的是模块的配置信息，一个模块对应一个打包后的hap包，hap包全称是HarmonyOS Ability Package，其中包含了ability、第三方库、资源和配置文件。其具体属性及其描述可以参照下表1。</p><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>name</td><td>该标签标识当前module的名字，module打包成hap后，表示hap的名称，标签值采用字符串表示（最大长度31个字节），该名称在整个应用要唯一。</td></tr><tr><td>type</td><td>表示模块的类型，类型有三种，分别是entry、feature和har。</td></tr><tr><td>srcEntry</td><td>当前模块的入口文件路径。</td></tr><tr><td>description</td><td>当前模块的描述信息。</td></tr><tr><td>mainElement</td><td>该标签标识hap的入口ability名称或者extension名称。只有配置为mainElement的ability或者extension才允许在服务中心露出。</td></tr><tr><td>deviceTypes</td><td>该标签标识hap可以运行在哪类设备上，标签值采用字符串数组的表示。</td></tr><tr><td>deliveryWithInstall</td><td>标识当前Module是否在用户主动安装的时候安装，表示该Module对应的HAP是否跟随应用一起安装。- true：主动安装时安装。- false：主动安装时不安装。</td></tr><tr><td>installationFree</td><td>标识当前Module是否支持免安装特性。- true：表示支持免安装特性，且符合免安装约束。- false：表示不支持免安装特性。</td></tr><tr><td>pages</td><td>对应的是main_pages.json文件，用于配置ability中用到的page信息。</td></tr><tr><td>abilities</td><td>是一个数组，存放当前模块中所有的ability元能力的配置信息，其中可以有多个ability。</td></tr></tbody></table><p>对于abilities中每一个ability的属性项，其描述信息如下表2。</p><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>name</td><td>该标签标识当前ability的逻辑名，该名称在整个应用要唯一，标签值采用字符串表示（最大长度127个字节）。</td></tr><tr><td>srcEntry</td><td>ability的入口代码路径。</td></tr><tr><td>description</td><td>ability的描述信息。</td></tr><tr><td>icon</td><td>ability的图标。该标签标识ability图标，标签值为资源文件的索引。该标签可缺省，缺省值为空。如果ability被配置为MainElement，该标签必须配置。</td></tr><tr><td>label</td><td>ability的标签名。</td></tr><tr><td>startWindowIcon</td><td>启动页面的图标。</td></tr><tr><td>startWindowBackground</td><td>启动页面的背景色。</td></tr><tr><td>visible</td><td>ability是否可以被其他应用程序调用，true表示可以被其它应用调用， false表示不可以被其它应用调用。</td></tr><tr><td>skills</td><td>标识能够接收的意图的action值的集合，取值通常为系统预定义的action值，也允许自定义。</td></tr><tr><td>entities</td><td>标识能够接收的Want的Action值的集合，取值通常为系统预定义的action值，也允许自定义。</td></tr><tr><td>actions</td><td>标识能够接收Want的Entity值的集合。</td></tr></tbody></table><h3 id="main-pages-json" tabindex="-1"><a class="header-anchor" href="#main-pages-json" aria-hidden="true">#</a> main_pages.json</h3><p>src/main/resources/base/profile/main_pages.json文件保存的是页面page的路径配置信息，所有需要进行路由跳转的page页面都要在这里进行配置。</p><h2 id="arkts" tabindex="-1"><a class="header-anchor" href="#arkts" aria-hidden="true">#</a> ArkTS</h2><p>ArkTs继承了TS的所有特性，是TS的超集，在Ts基础上扩展了声明式UI</p><p>ArkUI 框架提供给开发者两种开发方式：基于 ArkTS 的声明式开发范式和基于 JS 扩展 的类 Web 开发范式。声明式开发范式更加简洁高效，类 Web 开发范式对 Web 及前端开发 者更友好。</p><p><strong>推荐使用声明式开发范式</strong></p><p>在声明式开发范式模式下，通过语言增强、渲染管线扁平化，最小化更新等手段，在功 能和性能方面对比类 Web 开发范式有了全面提升。采用声明式开发范式进行应用开发，相 同场景下，对比类 Web 开发范式代码更为精简，并且在性能、内存方面进一步优化提升。 另外 ArkUI 框架还提供了 API 扩展机制，通过此种机制进行封装风格统一的 JS 接口。</p><h3 id="基础语法" tabindex="-1"><a class="header-anchor" href="#基础语法" aria-hidden="true">#</a> 基础语法</h3><p>先来看官方给的基本组成</p><p><img src="'+d+'" alt=""></p>',46),G={href:"https://developer.harmonyos.com/cn/docs/documentation/doc-guides-V3/arkts-create-custom-components-0000001473537046-V3#section1430055924816",target:"_blank",rel:"noopener noreferrer"},Z={href:"https://developer.harmonyos.com/cn/docs/documentation/doc-guides-V3/arkts-create-custom-components-0000001473537046-V3#section1430055924816",target:"_blank",rel:"noopener noreferrer"},J={href:"https://developer.harmonyos.com/cn/docs/documentation/doc-guides-V3/arkts-state-0000001474017162-V3",target:"_blank",rel:"noopener noreferrer"},K={href:"https://developer.harmonyos.com/cn/docs/documentation/doc-guides-V3/arkts-declarative-ui-description-0000001524416537-V3",target:"_blank",rel:"noopener noreferrer"},Y={href:"https://developer.harmonyos.com/cn/docs/documentation/doc-guides-V3/arkts-create-custom-components-0000001473537046-V3",target:"_blank",rel:"noopener noreferrer"},Q=n("li",null,"系统组件：ArkUI框架中默认内置的基础和容器组件，可直接被开发者调用，比如示例中的Column、Text、Divider、Button。",-1),X=n("li",null,"属性方法：组件可以通过链式调用配置多项属性，如fontSize()、width()、height()、backgroundColor()等。",-1),nn=n("li",null,"事件方法：组件可以通过链式调用设置多个事件的响应逻辑，如跟随在Button后面的onClick()。",-1),sn={href:"https://developer.harmonyos.com/cn/docs/documentation/doc-references-V3/ts-components-summary-0000001478181369-V3",target:"_blank",rel:"noopener noreferrer"},an=p(`<h3 id="自定义组件" tabindex="-1"><a class="header-anchor" href="#自定义组件" aria-hidden="true">#</a> 自定义组件</h3><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token decorator"><span class="token at operator">@</span><span class="token function">Component</span></span>
struct HelloComponent <span class="token punctuation">{</span>
  <span class="token decorator"><span class="token at operator">@</span><span class="token function">State</span></span> message<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">&#39;Hello, World!&#39;</span><span class="token punctuation">;</span>

  <span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// HelloComponent自定义组件组合系统组件Row和Text</span>
    <span class="token function">Row</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">Text</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>message<span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">onClick</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
          <span class="token comment">// 状态变量message的改变驱动UI刷新，UI从&#39;Hello, World!&#39;刷新为&#39;Hello, ArkUI!&#39;</span>
          <span class="token keyword">this</span><span class="token punctuation">.</span>message <span class="token operator">=</span> <span class="token string">&#39;Hello, ArkUI!&#39;</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">//使用</span>
<span class="token decorator"><span class="token at operator">@</span><span class="token function">Entry</span></span>
<span class="token decorator"><span class="token at operator">@</span><span class="token function">Component</span></span>
struct ParentComponent <span class="token punctuation">{</span>
  <span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">Column</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">Text</span><span class="token punctuation">(</span><span class="token string">&#39;ArkUI message&#39;</span><span class="token punctuation">)</span>
      <span class="token function">HelloComponent</span><span class="token punctuation">(</span><span class="token punctuation">{</span> message<span class="token operator">:</span> <span class="token string">&#39;Hello, World!&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">Divider</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token function">HelloComponent</span><span class="token punctuation">(</span><span class="token punctuation">{</span> message<span class="token operator">:</span> <span class="token string">&#39;你好!&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>@component</strong>：@Component装饰器仅能装饰struct关键字声明的数据结构。struct被@Component装饰后具备组件化的能力，需要实现build方法描述UI，一个struct只能被一个@Component装饰。<strong>其build()函数下的根节点唯一且必要，可以为非容器组件，其中ForEach禁止作为根节点。</strong></p><p><strong>build(）函数</strong>：类似于flutter，build()函数用于定义自定义组件的声明式UI描述，自定义组件必须定义build()函数。</p><ul><li><p>build函数内不允许声明本地变量</p></li><li><p>不允许在UI描述里直接使用console.info，但允许在方法或者函数里使用</p></li><li><p>不允许创建本地的作用域</p></li><li><p>不允许调用没有用@Builder装饰的方法，允许系统组件的参数是TS方法的返回值</p><ul><li><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token decorator"><span class="token at operator">@</span><span class="token function">Component</span></span>
struct ParentComponent <span class="token punctuation">{</span>
  <span class="token function">doSomeCalculations</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token punctuation">}</span>

  <span class="token function">calcTextValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token string">&#39;Hello World&#39;</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token decorator"><span class="token at operator">@</span><span class="token function">Builder</span></span> <span class="token function">doSomeRender</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">Text</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Hello World</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">Column</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// 反例：不能调用没有用@Builder装饰的方法</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">doSomeCalculations</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token comment">// 正例：可以调用</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">doSomeRender</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token comment">// 正例：参数可以为调用TS方法的返回值</span>
      <span class="token function">Text</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">calcTextValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p>不允许switch语法，如果需要使用条件判断，请使用if</p></li><li><p>不允许使用表达式</p></li></ul>`,5),tn=n("strong",null,"@Entry",-1),pn={href:"https://developer.harmonyos.com/cn/docs/documentation/doc-guides-V3/arkts-localstorage-0000001524537149-V3",target:"_blank",rel:"noopener noreferrer"},en=n("strong",null,"@Entry装饰的自定义组件，其build()函数下的根节点唯一且必要，且必须为容器组件，其中ForEach禁止作为根节点。",-1),on=p(`<p><strong>struct</strong>：自定义组件基于struct实现，struct + 自定义组件名 + {...}的组合构成自定义组件，不能有继承关系。对于struct的实例化，可以省略new。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token decorator"><span class="token at operator">@</span><span class="token function">Entry</span></span>
<span class="token decorator"><span class="token at operator">@</span><span class="token function">Component</span></span>
struct MyComponent <span class="token punctuation">{</span>
  <span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 根节点唯一且必要，必须为容器组件</span>
    <span class="token function">Row</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">ChildComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token decorator"><span class="token at operator">@</span><span class="token function">Component</span></span>
struct ChildComponent <span class="token punctuation">{</span>
  <span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 根节点唯一且必要，可为非容器组件</span>
    <span class="token function">Image</span><span class="token punctuation">(</span><span class="token string">&#39;test.jpg&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="自定义组件的成员" tabindex="-1"><a class="header-anchor" href="#自定义组件的成员" aria-hidden="true">#</a> 自定义组件的成员</h4><p>①<strong>约束</strong></p>`,4),cn=n("li",null,"自定义组件的成员不能是静态函数/变量",-1),ln=n("li",null,"成员函数/变量的访问是私有的",-1),un={href:"https://developer.harmonyos.com/cn/docs/documentation/doc-guides-V3/arkts-state-management-overview-0000001524537145-V3",target:"_blank",rel:"noopener noreferrer"},rn=p('<h4 id="组件渲染原理" tabindex="-1"><a class="header-anchor" href="#组件渲染原理" aria-hidden="true">#</a> 组件渲染原理</h4><ol><li>自定义组件的创建：自定义组件的实例由ArkUI框架创建。</li><li>初始化自定义组件的成员变量：通过本地默认值或者构造方法传递参数来初始化自定义组件的成员变量，初始化顺序为成员变量的定义顺序。</li><li>如果开发者定义了aboutToAppear，则执行aboutToAppear方法。</li><li>在首次渲染的时候，执行build方法渲染系统组件，如果子组件为自定义组件，则创建自定义组件的实例。在执行build()函数的过程中，框架会观察每个状态变量的读取状态，将保存两个map： <ol><li>状态变量 -&gt; UI组件（包括ForEach和if）。</li><li>UI组件 -&gt; 此组件的更新函数，即一个lambda方法，作为build()函数的子集，创建对应的UI组件并执行其属性方法，示意如下。</li></ol></li><li>当事件句柄被触发（比如设置了点击事件，即触发点击事件）改变了状态变量时。框架观察到了变化，将启动重新渲染。根据框架持有的两个map（自定义组件的创建和渲染流程中第4步），框架可以知道该状态变量管理了哪些UI组件，以及这些UI组件对应的更新函数。执行这些UI组件的更新函数，实现最小化更新。</li></ol><h4 id="组件的卸载" tabindex="-1"><a class="header-anchor" href="#组件的卸载" aria-hidden="true">#</a> 组件的卸载</h4><p>如果if组件的分支改变，或者ForEach循环渲染中数组的个数改变，组件将被删除：</p>',4),kn=n("li",null,"在删除组件之前，将调用其aboutToDisappear生命周期函数，标记着该节点将要被销毁。ArkUI的节点删除机制是：后端节点直接从组件树上摘下，后端节点被销毁，对前端节点解引用，当前端节点已经没有引用时，将被JS虚拟机垃圾回收。",-1),dn={href:"https://developer.harmonyos.com/cn/docs/documentation/doc-guides-V3/arkts-link-0000001524297305-V3",target:"_blank",rel:"noopener noreferrer"},vn={href:"https://developer.harmonyos.com/cn/docs/documentation/doc-guides-V3/arkts-page-custom-components-lifecycle-0000001524296665-V3",target:"_blank",rel:"noopener noreferrer"},mn={href:"https://developer.harmonyos.com/cn/docs/documentation/doc-guides-V3/arkts-appstorage-0000001524417209-V3#section84115526424",target:"_blank",rel:"noopener noreferrer"},bn={href:"https://developer.harmonyos.com/cn/docs/documentation/doc-guides-V3/arkts-state-management-overview-0000001524537145-V3#section127619262713",target:"_blank",rel:"noopener noreferrer"},gn=p(`<div class="custom-container tip"><p class="custom-container-title">TIP</p><p>不建议在生命周期aboutToDisappear内使用async await，如果在生命周期的aboutToDisappear使用异步操作（Promise或者回调方法），自定义组件将被保留在Promise的闭包中，直到回调方法被执行完，这个行为阻止了自定义组件的垃圾回收。</p></div><h3 id="生命周期" tabindex="-1"><a class="header-anchor" href="#生命周期" aria-hidden="true">#</a> 生命周期</h3><p>生命周期的调用时机</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// Index.ets</span>
<span class="token keyword">import</span> router <span class="token keyword">from</span> <span class="token string">&#39;@ohos.router&#39;</span><span class="token punctuation">;</span>

<span class="token decorator"><span class="token at operator">@</span><span class="token function">Entry</span></span>
<span class="token decorator"><span class="token at operator">@</span><span class="token function">Component</span></span>
struct MyComponent <span class="token punctuation">{</span>
  <span class="token decorator"><span class="token at operator">@</span><span class="token function">State</span></span> showChild<span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>

  <span class="token comment">// 只有被@Entry装饰的组件才可以调用页面的生命周期</span>
  <span class="token function">onPageShow</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&#39;Index onPageShow&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// 只有被@Entry装饰的组件才可以调用页面的生命周期</span>
  <span class="token function">onPageHide</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&#39;Index onPageHide&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// 只有被@Entry装饰的组件才可以调用页面的生命周期</span>
  <span class="token function">onBackPress</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&#39;Index onBackPress&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// 组件生命周期</span>
  <span class="token function">aboutToAppear</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&#39;MyComponent aboutToAppear&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// 组件生命周期</span>
  <span class="token function">aboutToDisappear</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&#39;MyComponent aboutToDisappear&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">Column</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// this.showChild为true，创建Child子组件，执行Child aboutToAppear</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>showChild<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">Child</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
      <span class="token comment">// this.showChild为false，删除Child子组件，执行Child aboutToDisappear</span>
      <span class="token function">Button</span><span class="token punctuation">(</span><span class="token string">&#39;create or delete Child&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">onClick</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>showChild <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span>
      <span class="token comment">// push到Page2页面，执行onPageHide</span>
      <span class="token function">Button</span><span class="token punctuation">(</span><span class="token string">&#39;push to next page&#39;</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">onClick</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
          router<span class="token punctuation">.</span><span class="token function">pushUrl</span><span class="token punctuation">(</span><span class="token punctuation">{</span> url<span class="token operator">:</span> <span class="token string">&#39;pages/Page2&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>

  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token decorator"><span class="token at operator">@</span><span class="token function">Component</span></span>
struct Child <span class="token punctuation">{</span>
  <span class="token decorator"><span class="token at operator">@</span><span class="token function">State</span></span> title<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">&#39;Hello World&#39;</span><span class="token punctuation">;</span>
  <span class="token comment">// 组件生命周期</span>
  <span class="token function">aboutToDisappear</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&#39;[lifeCycle] Child aboutToDisappear&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// 组件生命周期</span>
  <span class="token function">aboutToAppear</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&#39;[lifeCycle] Child aboutToAppear&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">Text</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>title<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fontSize</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">onClick</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>title <span class="token operator">=</span> <span class="token string">&#39;Hello ArkUI&#39;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>应用冷启动的初始化流程为：MyComponent <code>aboutToAppear</code> --&gt; MyComponent <code>build</code> --&gt; Child <code>aboutToAppear</code> --&gt; Child <code>build</code> --&gt; Child <code>build执行完毕</code> --&gt; MyComponent<code> build执行完毕</code> --&gt; Index <code>onPageShow</code>。</p></li><li><p>点击“delete Child”，if绑定的<code>this.showChild</code>变成<code>false</code>，删除Child组件，会执行Child <code>aboutToDisappear</code>方法。</p></li><li><p>点击“push to next page”，调用<code>router.pushUrl</code>接口，跳转到另外一个页面，当前Index页面隐藏，执行页面生命周期Index <code>onPageHide</code>。此处调用的是router.pushUrl接口，Index页面被隐藏，并没有销毁，所以只调用<code>onPageHide</code>。跳转到新页面后，执行初始化新页面的生命周期的流程。</p></li><li><p>如果调用的是router.replaceUrl，则当前Index页面被销毁，执行的生命周期流程将变为：Index <code>onPageHide</code> --&gt; MyComponent <code>aboutToDisappear</code> --&gt; Child <code>aboutToDisappear</code>。上文已经提到，组件的销毁是从组件树上直接摘下子树，所以先调用父组件的<code>aboutToDisappear</code>，再调用子组件的<code>aboutToDisappear</code>，然后执行初始化新页面的生命周期流程。</p></li><li><p>点击返回按钮，触发页面生命周期Index <code>onBackPress</code>，且触发返回一个页面后会导致当前Index页面被销毁。</p></li><li><p>最小化应用或者应用进入后台，触发Index<code> onPageHide</code>。当前Index页面没有被销毁，所以并不会执行组件的<code>aboutToDisappear</code>。应用回到前台，执行Index <code>onPageShow</code>。</p></li><li><p>退出应用，执行Index <code>onPageHide</code> --&gt; MyComponent <code>aboutToDisappear</code> --&gt; Child <code>aboutToDisappear</code>。</p></li></ul><h4 id="应用的生命周期" tabindex="-1"><a class="header-anchor" href="#应用的生命周期" aria-hidden="true">#</a> 应用的生命周期</h4><p>在app.js中可以定义如下应用生命周期函数：</p><table><thead><tr><th>属性</th><th>类型</th><th>描述</th><th>触发时机</th></tr></thead><tbody><tr><td>onCreate</td><td>() =&gt; void</td><td>应用创建</td><td>当应用创建时调用。</td></tr><tr><td>onShow6+</td><td>() =&gt; void</td><td>应用处于前台</td><td>当应用处于前台时触发。</td></tr><tr><td>onHide6+</td><td>() =&gt; void</td><td>应用处于后台</td><td>当应用处于后台时触发。</td></tr><tr><td>onDestroy</td><td>() =&gt; void</td><td>应用销毁</td><td>当应用退出时触发。</td></tr></tbody></table><h4 id="页面生命周期" tabindex="-1"><a class="header-anchor" href="#页面生命周期" aria-hidden="true">#</a> 页面生命周期</h4><p>页面：即应用的UI页面。可以由一个或者多个自定义组件组成，@Entry装饰的自定义组件为页面的入口组件，即页面的根节点，一个页面有且仅能有一个@Entry。只有被@Entry装饰的组件才可以调用页面的生命周期。</p><p>页面生命周期，即被@Entry装饰的组件生命周期，提供以下生命周期接口：</p><p>在页面JS文件中可以定义如下页面生命周期函数：</p><table><thead><tr><th>属性</th><th>类型</th><th>描述</th><th>触发时机</th></tr></thead><tbody><tr><td>onInit</td><td>() =&gt; void</td><td>页面初始化</td><td>页面数据初始化完成时触发，只触发一次。</td></tr><tr><td>onReady</td><td>() =&gt; void</td><td>页面创建完成</td><td>页面创建完成时触发，只触发一次。</td></tr><tr><td>onShow</td><td>() =&gt; void</td><td>页面显示</td><td>页面显示时触发。</td></tr><tr><td>onHide</td><td>() =&gt; void</td><td>页面消失</td><td>页面消失时触发。</td></tr><tr><td>onDestroy</td><td>() =&gt; void</td><td>页面销毁</td><td>页面销毁时触发。</td></tr><tr><td>onBackPress</td><td>() =&gt; boolean</td><td>返回按钮动作</td><td>当用户点击返回按钮时触发。- 返回true表示页面自己处理返回逻辑。- 返回false表示使用默认的返回逻辑。- 不返回值会作为false处理。</td></tr><tr><td>onActive()5+</td><td>() =&gt; void</td><td>页面激活</td><td>页面激活时触发。</td></tr><tr><td>onInactive()5+</td><td>() =&gt; void</td><td>页面暂停</td><td>页面暂停时触发。</td></tr><tr><td>onNewRequest()5+</td><td>() =&gt; void</td><td>FA重新请求</td><td>FA已经启动时收到新的请求后触发。</td></tr></tbody></table><p><img src="`+v+'" alt=""></p><h4 id="自定义组件生命周期" tabindex="-1"><a class="header-anchor" href="#自定义组件生命周期" aria-hidden="true">#</a> 自定义组件生命周期</h4><p>组件生命周期，即一般用@Component装饰的自定义组件的生命周期，提供以下生命周期接口：</p>',16),hn={href:"https://developer.harmonyos.com/cn/docs/documentation/doc-references-V3/arkts-custom-component-lifecycle-0000001482395076-V3#ZH-CN_TOPIC_0000001523488850__abouttoappear",target:"_blank",rel:"noopener noreferrer"},fn={href:"https://developer.harmonyos.com/cn/docs/documentation/doc-references-V3/arkts-custom-component-lifecycle-0000001482395076-V3#ZH-CN_TOPIC_0000001523488850__abouttodisappear",target:"_blank",rel:"noopener noreferrer"},yn=p('<p>被@Entry修饰的自定义组件生命周期图</p><p><img src="'+m+`" alt=""></p><h3 id="装饰器" tabindex="-1"><a class="header-anchor" href="#装饰器" aria-hidden="true">#</a> 装饰器</h3><h4 id="builder" tabindex="-1"><a class="header-anchor" href="#builder" aria-hidden="true">#</a> @Builder</h4><p>@Builder装饰器：自定义构建函数</p><p>使用方式：</p><p>①<strong>定义</strong>：在自定义组件内</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token decorator"><span class="token at operator">@</span><span class="token function">Builder</span></span> <span class="token function">MyBuilderFunction</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>②<strong>使用</strong>：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">MyBuilderFunction</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>③<strong>使用规则：</strong></p><ul><li>允许在自定义组件内定义一个或多个@Builder方法，该方法被认为是该组件的私有、特殊类型的成员函数。</li><li>自定义构建函数可以在所属组件的build方法和其他自定义构建函数中调用，但不允许在组件外调用（因为是私有的）。</li><li>在自定义函数体中，this指代当前所属组件，组件的状态变量可以在自定义构建函数内访问。建议通过this访问自定义组件的状态变量而不是参数传递。</li></ul><h5 id="全局自定义构建函数" tabindex="-1"><a class="header-anchor" href="#全局自定义构建函数" aria-hidden="true">#</a> 全局自定义构建函数</h5><ul><li>全局的自定义构建函数可以被整个应用获取，不允许使用this和bind方法。</li><li>如果不涉及组件状态变化，建议使用全局的自定义构建方法。</li></ul><p>①<strong>定义：</strong></p><div class="language-TS line-numbers-mode" data-ext="TS"><pre class="language-TS"><code>@Builder function MyGlobalBuilderFunction({ ... })
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>②<strong>使用：</strong></p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token function">MyGlobalBuilderFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="自定义构建函数参数" tabindex="-1"><a class="header-anchor" href="#自定义构建函数参数" aria-hidden="true">#</a> 自定义构建函数参数</h5>`,19),_n={href:"https://developer.harmonyos.com/cn/docs/documentation/doc-guides-V3/arkts-builder-0000001524176981-V3#section163841721135012",target:"_blank",rel:"noopener noreferrer"},wn={href:"https://developer.harmonyos.com/cn/docs/documentation/doc-guides-V3/arkts-builder-0000001524176981-V3#section1522464044212",target:"_blank",rel:"noopener noreferrer"},Sn=n("li",null,"参数的类型必须与参数声明的类型一致，不允许undefined、null和返回undefined、null的表达式。",-1),Cn={href:"https://developer.harmonyos.com/cn/docs/documentation/doc-guides-V3/arkts-link-0000001524297305-V3",target:"_blank",rel:"noopener noreferrer"},An={href:"https://developer.harmonyos.com/cn/docs/documentation/doc-guides-V3/arkts-create-custom-components-0000001473537046-V3#section1150911733811",target:"_blank",rel:"noopener noreferrer"},Pn=p(`<p>①<strong>按引用传递参数：</strong>(可以理解为Vue的双向绑定，状态数据更新会重新Builder)</p><ul><li>这种方式传递的参数可为状态变量，且状态变量的改变会引起@Builder方法内的UI刷新。ArkUI提供<code>$$</code>作为按引用传递参数的范式。</li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token decorator"><span class="token at operator">@</span><span class="token function">Builder</span></span> <span class="token keyword">function</span> <span class="token function">ABuilder</span><span class="token punctuation">(</span>$$<span class="token operator">:</span> <span class="token punctuation">{</span> paramA1<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">Row</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">Text</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">UseStateVarByReference: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>$$<span class="token punctuation">.</span>paramA1<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> </span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token decorator"><span class="token at operator">@</span><span class="token function">Entry</span></span>
<span class="token decorator"><span class="token at operator">@</span><span class="token function">Component</span></span>
struct Parent <span class="token punctuation">{</span>
  <span class="token decorator"><span class="token at operator">@</span><span class="token function">State</span></span> label<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">&#39;Hello&#39;</span><span class="token punctuation">;</span>
  <span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">Column</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// 在Parent组件中调用ABuilder的时候，将this.label引用传递给ABuilder</span>
      <span class="token function">ABuilder</span><span class="token punctuation">(</span><span class="token punctuation">{</span> paramA1<span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>label <span class="token punctuation">}</span><span class="token punctuation">)</span>
      <span class="token function">Button</span><span class="token punctuation">(</span><span class="token string">&#39;Click me&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">onClick</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token comment">// 点击“Click me”后，UI从“Hello”刷新为“ArkUI”</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>label <span class="token operator">=</span> <span class="token string">&#39;ArkUI&#39;</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>②<strong>按值传递：</strong></p>`,4),xn={href:"https://developer.harmonyos.com/cn/docs/documentation/doc-guides-V3/arkts-builder-0000001524176981-V3#section1522464044212",target:"_blank",rel:"noopener noreferrer"},In=p(`<div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token decorator"><span class="token at operator">@</span><span class="token function">Builder</span></span> <span class="token keyword">function</span> <span class="token function">ABuilder</span><span class="token punctuation">(</span>paramA1<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">Row</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">Text</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">UseStateVarByValue: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>paramA1<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> </span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token decorator"><span class="token at operator">@</span><span class="token function">Entry</span></span>
<span class="token decorator"><span class="token at operator">@</span><span class="token function">Component</span></span>
struct Parent <span class="token punctuation">{</span>
  label<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">&#39;Hello&#39;</span><span class="token punctuation">;</span>
  <span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">Column</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">ABuilder</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>label<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="builderparam-引用-builder函数" tabindex="-1"><a class="header-anchor" href="#builderparam-引用-builder函数" aria-hidden="true">#</a> @BuilderParam：引用@Builder函数</h4><p>当开发者创建了自定义组件，并想对该组件添加特定功能时，例如在自定义组件中添加一个点击跳转操作。若直接在组件内嵌入事件方法，将会导致所有引入该自定义组件的地方均增加了该功能。为解决此问题，ArkUI引入了@BuilderParam装饰器，@BuilderParam用来装饰指向@Builder方法的变量，开发者可在初始化自定义组件时对此属性进行赋值，为自定义组件增加特定的功能。该装饰器用于声明任意UI描述的一个元素，（类似于插槽）。</p><p><strong>@BuilderParam装饰的方法只能被自定义构建函数（@Builder装饰的方法）初始化。</strong></p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token decorator"><span class="token at operator">@</span><span class="token function">Builder</span></span> <span class="token keyword">function</span> <span class="token function">GlobalBuilder0</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

<span class="token decorator"><span class="token at operator">@</span><span class="token function">Component</span></span>
struct Child <span class="token punctuation">{</span>
  <span class="token decorator"><span class="token at operator">@</span><span class="token function">Builder</span></span> <span class="token function">doNothingBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

  <span class="token decorator"><span class="token at operator">@</span><span class="token function">BuilderParam</span></span> <span class="token function-variable function">aBuilder0</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>doNothingBuilder<span class="token punctuation">;</span>
  <span class="token decorator"><span class="token at operator">@</span><span class="token function">BuilderParam</span></span> <span class="token function-variable function">aBuilder1</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span> <span class="token operator">=</span> GlobalBuilder0<span class="token punctuation">;</span>
  <span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>用父组件自定义构建函数初始化子组件@BuilderParam装饰的方法。</strong></p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token decorator"><span class="token at operator">@</span><span class="token function">Component</span></span>
struct Child <span class="token punctuation">{</span>
  <span class="token decorator"><span class="token at operator">@</span><span class="token function">BuilderParam</span></span> <span class="token function-variable function">aBuilder0</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token punctuation">;</span>

  <span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">Column</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">aBuilder0</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token decorator"><span class="token at operator">@</span><span class="token function">Entry</span></span>
<span class="token decorator"><span class="token at operator">@</span><span class="token function">Component</span></span>
struct Parent <span class="token punctuation">{</span>
  <span class="token decorator"><span class="token at operator">@</span><span class="token function">Builder</span></span> <span class="token function">componentBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">Text</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Parent builder </span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">Column</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">Child</span><span class="token punctuation">(</span><span class="token punctuation">{</span> aBuilder0<span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>componentBuilder <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="this指向" tabindex="-1"><a class="header-anchor" href="#this指向" aria-hidden="true">#</a> this指向</h5><p>以下示例中，Parent组件在调用<code>this.componentBuilder()</code>时，<code>this.label</code>指向其所属组件，即“Parent”。<code>@Builder componentBuilder()</code>传给子组件<code>@BuilderParam aBuilder0</code>，在Child组件中调用<code>this.aBuilder0()</code>时，<code>this.label</code>指向在Child的label，即“Child”。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token decorator"><span class="token at operator">@</span><span class="token function">Component</span></span>
struct Child <span class="token punctuation">{</span>
  label<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Child</span><span class="token template-punctuation string">\`</span></span>
  <span class="token decorator"><span class="token at operator">@</span><span class="token function">BuilderParam</span></span> <span class="token function-variable function">aBuilder0</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token punctuation">;</span>

  <span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">Column</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">aBuilder0</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token decorator"><span class="token at operator">@</span><span class="token function">Entry</span></span>
<span class="token decorator"><span class="token at operator">@</span><span class="token function">Component</span></span>
struct Parent <span class="token punctuation">{</span>
  label<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Parent</span><span class="token template-punctuation string">\`</span></span>

  <span class="token decorator"><span class="token at operator">@</span><span class="token function">Builder</span></span> <span class="token function">componentBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">Text</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>label<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">Column</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">componentBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token function">Child</span><span class="token punctuation">(</span><span class="token punctuation">{</span> aBuilder0<span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>componentBuilder <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="带参数的-builderparam" tabindex="-1"><a class="header-anchor" href="#带参数的-builderparam" aria-hidden="true">#</a> 带参数的@BuilderParam</h5><p><strong>这个可以理解为作用域插槽</strong></p><p>@BuilderParam装饰的方法可以是有参数和无参数的两种形式，需与指向的@Builder方法类型匹配。@BuilderParam装饰的方法类型需要和@Builder方法类型一致。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token decorator"><span class="token at operator">@</span><span class="token function">Builder</span></span> <span class="token keyword">function</span> <span class="token function">GlobalBuilder1</span><span class="token punctuation">(</span>$$ <span class="token operator">:</span> <span class="token punctuation">{</span>label<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">Text</span><span class="token punctuation">(</span>$$<span class="token punctuation">.</span>label<span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">width</span><span class="token punctuation">(</span><span class="token number">400</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">height</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">backgroundColor</span><span class="token punctuation">(</span>Color<span class="token punctuation">.</span>Blue<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token decorator"><span class="token at operator">@</span><span class="token function">Component</span></span>
struct Child <span class="token punctuation">{</span>
  label<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">&#39;Child&#39;</span>
  <span class="token comment">// 无参数类，指向的componentBuilder也是无参数类型</span>
  <span class="token decorator"><span class="token at operator">@</span><span class="token function">BuilderParam</span></span> <span class="token function-variable function">aBuilder0</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token punctuation">;</span>
  <span class="token comment">// 有参数类型，指向的GlobalBuilder1也是有参数类型的方法</span>
  <span class="token decorator"><span class="token at operator">@</span><span class="token function">BuilderParam</span></span> <span class="token function-variable function">aBuilder1</span><span class="token operator">:</span> <span class="token punctuation">(</span>$$ <span class="token operator">:</span> <span class="token punctuation">{</span> label <span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token punctuation">;</span>

  <span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">Column</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">aBuilder0</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">aBuilder1</span><span class="token punctuation">(</span><span class="token punctuation">{</span>label<span class="token operator">:</span> <span class="token string">&#39;global Builder label&#39;</span> <span class="token punctuation">}</span> <span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token decorator"><span class="token at operator">@</span><span class="token function">Entry</span></span>
<span class="token decorator"><span class="token at operator">@</span><span class="token function">Component</span></span>
struct Parent <span class="token punctuation">{</span>
  label<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">&#39;Parent&#39;</span>

  <span class="token decorator"><span class="token at operator">@</span><span class="token function">Builder</span></span> <span class="token function">componentBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">Text</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>label<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">Column</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">componentBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token function">Child</span><span class="token punctuation">(</span><span class="token punctuation">{</span> aBuilder0<span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>componentBuilder<span class="token punctuation">,</span> aBuilder1<span class="token operator">:</span> GlobalBuilder1 <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="尾随闭包初始化组件" tabindex="-1"><a class="header-anchor" href="#尾随闭包初始化组件" aria-hidden="true">#</a> 尾随闭包初始化组件</h5><p>在自定义组件中使用@BuilderParam装饰的属性时也可通过尾随闭包进行初始化。在初始化自定义组件时，组件后紧跟一个大括号“{}”形成尾随闭包场景。</p><p><strong>可以将尾随闭包内的内容看做@Builder装饰的函数传给@BuilderParam。（这一块就是插槽可以理解为React的child）将<code>{}</code>代码块的内容作为参数传递给@BuilderParam</strong>示例如下：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// xxx.ets</span>
<span class="token decorator"><span class="token at operator">@</span><span class="token function">Component</span></span>
struct CustomContainer <span class="token punctuation">{</span>
  <span class="token decorator"><span class="token at operator">@</span><span class="token function">Prop</span></span> header<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
  <span class="token decorator"><span class="token at operator">@</span><span class="token function">BuilderParam</span></span> <span class="token function-variable function">closer</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span>

  <span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">Column</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">Text</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>header<span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">fontSize</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">closer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token decorator"><span class="token at operator">@</span><span class="token function">Builder</span></span> <span class="token keyword">function</span> <span class="token function">specificParam</span><span class="token punctuation">(</span>label1<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> label2<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">Column</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">Text</span><span class="token punctuation">(</span>label1<span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">fontSize</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span>
    <span class="token function">Text</span><span class="token punctuation">(</span>label2<span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">fontSize</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token decorator"><span class="token at operator">@</span><span class="token function">Entry</span></span>
<span class="token decorator"><span class="token at operator">@</span><span class="token function">Component</span></span>
struct CustomContainerUser <span class="token punctuation">{</span>
  <span class="token decorator"><span class="token at operator">@</span><span class="token function">State</span></span> text<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">&#39;header&#39;</span><span class="token punctuation">;</span>

  <span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">Column</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// 创建CustomContainer，在创建CustomContainer时，通过其后紧跟一个大括号“{}”形成尾随闭包</span>
      <span class="token comment">// 作为传递给子组件CustomContainer @BuilderParam closer: () =&gt; void的参数</span>
      <span class="token function">CustomContainer</span><span class="token punctuation">(</span><span class="token punctuation">{</span> header<span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>text <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">Column</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token function">specificParam</span><span class="token punctuation">(</span><span class="token string">&#39;testA&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;testB&#39;</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">backgroundColor</span><span class="token punctuation">(</span>Color<span class="token punctuation">.</span>Yellow<span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">onClick</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
          <span class="token keyword">this</span><span class="token punctuation">.</span>text <span class="token operator">=</span> <span class="token string">&#39;changeHeader&#39;</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="静态页面样式复用" tabindex="-1"><a class="header-anchor" href="#静态页面样式复用" aria-hidden="true">#</a> 静态页面样式复用</h4><h5 id="style定义组件重用样式" tabindex="-1"><a class="header-anchor" href="#style定义组件重用样式" aria-hidden="true">#</a> @Style定义组件重用样式</h5><p>①<strong>语法</strong></p>`,21),Ln={href:"https://developer.harmonyos.com/cn/docs/documentation/doc-references-V3/ts-universal-attributes-size-0000001428061700-V3",target:"_blank",rel:"noopener noreferrer"},Vn={href:"https://developer.harmonyos.com/cn/docs/documentation/doc-references-V3/ts-universal-events-click-0000001477981153-V3",target:"_blank",rel:"noopener noreferrer"},Bn=p(`<li><p>@Styles方法不支持参数。</p></li><li><p>@Styles可以定义在组件内或全局，在全局定义时需在方法名前面添加function关键字，组件内定义时则不需要添加function关键字。定义在组件内的@Styles可以通过<code>this</code>访问组件的常量和状态变量，并可以在@Styles里通过事件来改变状态变量的值，示例如下：</p><ul><li><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token decorator"><span class="token at operator">@</span><span class="token function">Component</span></span>
struct FancyUse <span class="token punctuation">{</span>
  <span class="token decorator"><span class="token at operator">@</span><span class="token function">State</span></span> heightValue<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> <span class="token number">100</span>
  <span class="token decorator"><span class="token at operator">@</span><span class="token function">Styles</span></span> <span class="token function">fancy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">.</span><span class="token function">height</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>heightValue<span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">backgroundColor</span><span class="token punctuation">(</span>Color<span class="token punctuation">.</span>Yellow<span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">onClick</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>heightValue <span class="token operator">=</span> <span class="token number">200</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p>组件内@Styles的优先级高于全局@Styles。框架优先找当前组件内的@Styles，如果找不到，则会全局查找。</p></li>`,3),Un=n("h5",{id:"extend装饰器-定义扩展组件样式",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#extend装饰器-定义扩展组件样式","aria-hidden":"true"},"#"),s(" @Extend装饰器：定义扩展组件样式")],-1),Tn=n("p",null,[s("①"),n("strong",null,"语法")],-1),En=p(`<li><p>@Extend仅支持定义在全局，不支持在组件内部定义。</p></li><li><p>@Extend支持封装指定的组件的私有属性和私有事件和预定义相同组件的@Extend的方法。</p><ul><li><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// @Extend(Text)可以支持Text的私有属性fontColor</span>
<span class="token decorator"><span class="token at operator">@</span><span class="token function">Extend</span></span><span class="token punctuation">(</span>Text<span class="token punctuation">)</span> <span class="token keyword">function</span> <span class="token function">fancy</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token punctuation">.</span><span class="token function">fontColor</span><span class="token punctuation">(</span>Color<span class="token punctuation">.</span>Red<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token comment">// superFancyText可以调用预定义的fancy</span>
<span class="token decorator"><span class="token at operator">@</span><span class="token function">Extend</span></span><span class="token punctuation">(</span>Text<span class="token punctuation">)</span> <span class="token keyword">function</span> <span class="token function">superFancyText</span><span class="token punctuation">(</span>size<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">.</span><span class="token function">fontSize</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">fancy</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p>和@Styles不同，@Extend装饰的方法支持参数，开发者可以在调用时传递参数，调用遵循TS方法传值调用。</p><ul><li><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// xxx.ets</span>
<span class="token decorator"><span class="token at operator">@</span><span class="token function">Extend</span></span><span class="token punctuation">(</span>Text<span class="token punctuation">)</span> <span class="token keyword">function</span> <span class="token function">fancy</span> <span class="token punctuation">(</span>fontSize<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token punctuation">.</span><span class="token function">fontColor</span><span class="token punctuation">(</span>Color<span class="token punctuation">.</span>Red<span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">fontSize</span><span class="token punctuation">(</span>fontSize<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token decorator"><span class="token at operator">@</span><span class="token function">Entry</span></span>
<span class="token decorator"><span class="token at operator">@</span><span class="token function">Component</span></span>
struct FancyUse <span class="token punctuation">{</span>
  <span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">Row</span><span class="token punctuation">(</span><span class="token punctuation">{</span> space<span class="token operator">:</span> <span class="token number">10</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">Text</span><span class="token punctuation">(</span><span class="token string">&#39;Fancy&#39;</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">fancy</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span>
      <span class="token function">Text</span><span class="token punctuation">(</span><span class="token string">&#39;Fancy&#39;</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">fancy</span><span class="token punctuation">(</span><span class="token number">24</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p>@Extend装饰的方法的参数可以为function，作为Event事件的句柄</p><ul><li><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token decorator"><span class="token at operator">@</span><span class="token function">Extend</span></span><span class="token punctuation">(</span>Text<span class="token punctuation">)</span> <span class="token keyword">function</span> <span class="token function">makeMeClick</span><span class="token punctuation">(</span><span class="token function-variable function">onClick</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token punctuation">.</span><span class="token function">backgroundColor</span><span class="token punctuation">(</span>Color<span class="token punctuation">.</span>Blue<span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">onClick</span><span class="token punctuation">(</span>onClick<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token decorator"><span class="token at operator">@</span><span class="token function">Entry</span></span>
<span class="token decorator"><span class="token at operator">@</span><span class="token function">Component</span></span>
struct FancyUse <span class="token punctuation">{</span>
  <span class="token decorator"><span class="token at operator">@</span><span class="token function">State</span></span> label<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">&#39;Hello World&#39;</span><span class="token punctuation">;</span>

  <span class="token function">onClickHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>label <span class="token operator">=</span> <span class="token string">&#39;Hello ArkUI&#39;</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">Row</span><span class="token punctuation">(</span><span class="token punctuation">{</span> space<span class="token operator">:</span> <span class="token number">10</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">Text</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>label<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">makeMeClick</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">onClickHandler</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li>`,4),Dn={href:"https://developer.harmonyos.com/cn/docs/documentation/doc-guides-V3/arkts-state-management-overview-0000001524537145-V3",target:"_blank",rel:"noopener noreferrer"},Fn=p(`<ul><li><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token decorator"><span class="token at operator">@</span><span class="token function">Extend</span></span><span class="token punctuation">(</span>Text<span class="token punctuation">)</span> <span class="token keyword">function</span> <span class="token function">fancy</span> <span class="token punctuation">(</span>fontSize<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token punctuation">.</span><span class="token function">fontColor</span><span class="token punctuation">(</span>Color<span class="token punctuation">.</span>Red<span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">fontSize</span><span class="token punctuation">(</span>fontSize<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token decorator"><span class="token at operator">@</span><span class="token function">Entry</span></span>
<span class="token decorator"><span class="token at operator">@</span><span class="token function">Component</span></span>
struct FancyUse <span class="token punctuation">{</span>
  <span class="token decorator"><span class="token at operator">@</span><span class="token function">State</span></span> fontSizeValue<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> <span class="token number">20</span>
  <span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">Row</span><span class="token punctuation">(</span><span class="token punctuation">{</span> space<span class="token operator">:</span> <span class="token number">10</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">Text</span><span class="token punctuation">(</span><span class="token string">&#39;Fancy&#39;</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">fancy</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>fontSizeValue<span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">onClick</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
          <span class="token keyword">this</span><span class="token punctuation">.</span>fontSizeValue <span class="token operator">=</span> <span class="token number">30</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul>`,1),On=p(`<p>例子</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token decorator"><span class="token at operator">@</span><span class="token function">Entry</span></span>
<span class="token decorator"><span class="token at operator">@</span><span class="token function">Component</span></span>
struct FancyUse <span class="token punctuation">{</span>
  <span class="token decorator"><span class="token at operator">@</span><span class="token function">State</span></span> label<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">&#39;Hello World&#39;</span>

  <span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">Row</span><span class="token punctuation">(</span><span class="token punctuation">{</span> space<span class="token operator">:</span> <span class="token number">10</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">Text</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>label<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">fontStyle</span><span class="token punctuation">(</span>FontStyle<span class="token punctuation">.</span>Italic<span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">fontWeight</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">backgroundColor</span><span class="token punctuation">(</span>Color<span class="token punctuation">.</span>Blue<span class="token punctuation">)</span>
      <span class="token function">Text</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>label<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">fontStyle</span><span class="token punctuation">(</span>FontStyle<span class="token punctuation">.</span>Italic<span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">fontWeight</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">backgroundColor</span><span class="token punctuation">(</span>Color<span class="token punctuation">.</span>Pink<span class="token punctuation">)</span>
      <span class="token function">Text</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>label<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">fontStyle</span><span class="token punctuation">(</span>FontStyle<span class="token punctuation">.</span>Italic<span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">fontWeight</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">backgroundColor</span><span class="token punctuation">(</span>Color<span class="token punctuation">.</span>Orange<span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">margin</span><span class="token punctuation">(</span><span class="token string">&#39;20%&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">//@Extend将样式组合复用，示例如下。</span>
<span class="token decorator"><span class="token at operator">@</span><span class="token function">Extend</span></span><span class="token punctuation">(</span>Text<span class="token punctuation">)</span> <span class="token keyword">function</span> <span class="token function">fancyText</span><span class="token punctuation">(</span>weightValue<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> color<span class="token operator">:</span> Color<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token punctuation">.</span><span class="token function">fontStyle</span><span class="token punctuation">(</span>FontStyle<span class="token punctuation">.</span>Italic<span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">fontWeight</span><span class="token punctuation">(</span>weightValue<span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">backgroundColor</span><span class="token punctuation">(</span>color<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token decorator"><span class="token at operator">@</span><span class="token function">Entry</span></span>
<span class="token decorator"><span class="token at operator">@</span><span class="token function">Component</span></span>
struct FancyUse <span class="token punctuation">{</span>
  <span class="token decorator"><span class="token at operator">@</span><span class="token function">State</span></span> label<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">&#39;Hello World&#39;</span>

  <span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">Row</span><span class="token punctuation">(</span><span class="token punctuation">{</span> space<span class="token operator">:</span> <span class="token number">10</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">Text</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>label<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">fancyText</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> Color<span class="token punctuation">.</span>Blue<span class="token punctuation">)</span>
      <span class="token function">Text</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>label<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">fancyText</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> Color<span class="token punctuation">.</span>Pink<span class="token punctuation">)</span>
      <span class="token function">Text</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>label<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">fancyText</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">,</span> Color<span class="token punctuation">.</span>Orange<span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">margin</span><span class="token punctuation">(</span><span class="token string">&#39;20%&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="statestyles-多态样式" tabindex="-1"><a class="header-anchor" href="#statestyles-多态样式" aria-hidden="true">#</a> stateStyles：多态样式</h4><p>@Styles和@Extend仅仅应用于静态页面的样式复用，stateStyles可以依据组件的内部状态的不同，快速设置不同样式。这就是我们本章要介绍的内容stateStyles（又称为：多态样式）。</p><p>stateStyles是属性方法，可以根据UI内部状态来设置样式，类似于css伪类，但语法不同。ArkUI提供以下四种状态：</p><ul><li>focused：获焦态。</li><li>normal：正常态。</li><li>pressed：按压态。</li><li>disabled：不可用态。</li></ul><p>例如：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token decorator"><span class="token at operator">@</span><span class="token function">Entry</span></span>
<span class="token decorator"><span class="token at operator">@</span><span class="token function">Component</span></span>
struct CompWithInlineStateStyles <span class="token punctuation">{</span>
  <span class="token decorator"><span class="token at operator">@</span><span class="token function">State</span></span> focusedColor<span class="token operator">:</span> Color <span class="token operator">=</span> Color<span class="token punctuation">.</span>Red<span class="token punctuation">;</span>
  normalColor<span class="token operator">:</span> Color <span class="token operator">=</span> Color<span class="token punctuation">.</span>Green
  <span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">Column</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">Button</span><span class="token punctuation">(</span><span class="token string">&#39;clickMe&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">height</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">width</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">stateStyles</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
          normal<span class="token operator">:</span> <span class="token punctuation">{</span>
            <span class="token punctuation">.</span><span class="token function">backgroundColor</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>normalColor<span class="token punctuation">)</span>
          <span class="token punctuation">}</span><span class="token punctuation">,</span>
          focused<span class="token operator">:</span> <span class="token punctuation">{</span>
            <span class="token punctuation">.</span><span class="token function">backgroundColor</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>focusedColor<span class="token punctuation">)</span>
          <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">onClick</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
          <span class="token keyword">this</span><span class="token punctuation">.</span>focusedColor <span class="token operator">=</span> Color<span class="token punctuation">.</span>Pink
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">margin</span><span class="token punctuation">(</span><span class="token string">&#39;30%&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="style和statestyles联合使用" tabindex="-1"><a class="header-anchor" href="#style和statestyles联合使用" aria-hidden="true">#</a> @style和stateStyles联合使用</h5><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token decorator"><span class="token at operator">@</span><span class="token function">Entry</span></span>
<span class="token decorator"><span class="token at operator">@</span><span class="token function">Component</span></span>
struct MyComponent <span class="token punctuation">{</span>
  <span class="token decorator"><span class="token at operator">@</span><span class="token function">Styles</span></span> <span class="token function">normalStyle</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">.</span><span class="token function">backgroundColor</span><span class="token punctuation">(</span>Color<span class="token punctuation">.</span>Gray<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token decorator"><span class="token at operator">@</span><span class="token function">Styles</span></span> <span class="token function">pressedStyle</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">.</span><span class="token function">backgroundColor</span><span class="token punctuation">(</span>Color<span class="token punctuation">.</span>Red<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">Column</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">Text</span><span class="token punctuation">(</span><span class="token string">&#39;Text1&#39;</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">fontSize</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">fontColor</span><span class="token punctuation">(</span>Color<span class="token punctuation">.</span>White<span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">stateStyles</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
          normal<span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>normalStyle<span class="token punctuation">,</span>
          pressed<span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>pressedStyle<span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="状态管理" tabindex="-1"><a class="header-anchor" href="#状态管理" aria-hidden="true">#</a> 状态管理</h3><p>①<strong>概念</strong></p><ul><li>状态变量：被状态装饰器装饰的变量，状态变量值的改变会引起UI的渲染更新。示例：<code>@State num: number = </code>1,其中，@State是状态装饰器，num是状态变量。</li><li>常规变量：没有状态的变量，通常应用于辅助计算。它的改变永远不会引起UI的刷新。</li><li>数据源/同步源：状态变量的原始来源，可以同步给不同的状态数据。通常意义为父组件传给子组件的数据。</li><li>命名参数机制：父组件通过指定参数传递给子组件的状态变量，为父子传递同步参数的主要手段。示例：<code>CompA: ({ aProp: this.aProp })</code>。</li><li>父组件传递的参数会<strong>覆盖</strong>子组件定义参数时初始化的值。</li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token decorator"><span class="token at operator">@</span><span class="token function">Component</span></span>
struct MyComponent <span class="token punctuation">{</span>
  <span class="token decorator"><span class="token at operator">@</span><span class="token function">State</span></span> count<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token keyword">private</span> increaseBy<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>

  <span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token decorator"><span class="token at operator">@</span><span class="token function">Component</span></span>
struct Parent <span class="token punctuation">{</span>
  <span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">Column</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// 从父组件初始化，覆盖本地定义的默认值</span>
      <span class="token function">MyComponent</span><span class="token punctuation">(</span><span class="token punctuation">{</span> count<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> increaseBy<span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>ArkUI提供了多种装饰器，通过使用这些装饰器，状态变量不仅可以观察在组件内的改变，还可以在不同组件层级间传递，比如父子组件、跨组件层级，也可以观察全局范围内的变化。根据状态变量的影响范围，将所有的装饰器可以大致分为：</p><ul><li>管理组件拥有状态的装饰器：组件级别的状态管理，可以观察组件内变化，和不同组件层级的变化，但需要唯一观察同一个组件树上，即同一个页面内。</li><li>管理应用拥有状态的装饰器：应用级别的状态管理，可以观察不同页面，甚至不同UIAbility的状态变化，是应用内全局的状态管理。</li></ul><p>从数据的传递形式和同步类型层面看，装饰器也可分为：</p><ul><li>只读的单向传递；</li><li>可变更的双向传递。</li></ul>`,18),jn={href:"https://developer.harmonyos.com/cn/docs/documentation/doc-guides-V3/arkts-state-0000001474017162-V3",target:"_blank",rel:"noopener noreferrer"},Hn={href:"https://developer.harmonyos.com/cn/docs/documentation/doc-guides-V3/arkts-application-state-management-overview-0000001529381989-V3",target:"_blank",rel:"noopener noreferrer"},Rn=n("p",null,[n("img",{src:b,alt:""})],-1),Wn=n("p",null,"上图中，Components部分的装饰器为组件级别的状态管理，Application部分为应用的状态管理。开发者可以通过@StorageLink/@LocalStorageLink实现应用和组件状态的双向同步，通过@StorageProp/@LocalStorageProp实现应用和组件状态的单向同步。",-1),$n={href:"https://developer.harmonyos.com/cn/docs/documentation/doc-guides-V3/arkts-state-0000001474017162-V3",target:"_blank",rel:"noopener noreferrer"},qn=p("<li><p>@State：@State装饰的变量拥有其所属组件的状态，可以作为其子组件单向和双向同步的数据源。当其数值改变时，会引起相关组件的渲染刷新。</p></li><li><p>@Prop：@Prop装饰的变量可以和父组件建立单向同步关系，@Prop装饰的变量是可变的，但修改不会同步回父组件。</p></li><li><p>@Link：@Link装饰的变量和父组件构建双向同步关系的状态变量，父组件会接受来自@Link装饰的变量的修改的同步，父组件的更新也会同步给@Link装饰的变量。</p></li><li><p>@Provide/@Consume：@Provide/@Consume装饰的变量用于跨组件层级（多层组件）同步状态变量，可以不需要通过参数命名机制传递，通过alias（别名）或者属性名绑定。</p></li><li><p>@Observed：@Observed装饰class，需要观察多层嵌套场景的class需要被@Observed装饰。单独使用@Observed没有任何作用，需要和@ObjectLink、@Prop连用。</p></li><li><p>@ObjectLink：@ObjectLink装饰的变量接收@Observed装饰的class的实例，应用于观察多层嵌套场景，和父组件的数据源构建双向同步。</p></li><li><p>@Watch用于监听状态变量的变化。（类似Vue的监听器）</p></li><li> 运算符：给内置组件提供TS变量的引用，使得TS变量和内置组件的内部状态保持同步。（就相当于响应式，做了个劫持，当数据变化就触发UI视图更新） </li>",8),Nn={href:"https://developer.harmonyos.com/cn/docs/documentation/doc-guides-V3/arkts-appstorage-0000001524417209-V3#section676113134317",target:"_blank",rel:"noopener noreferrer"},Mn={href:"https://developer.harmonyos.com/cn/docs/documentation/doc-guides-V3/arkts-appstorage-0000001524417209-V3#section84115526424",target:"_blank",rel:"noopener noreferrer"},zn=n("li",null,[n("p",null,"AppStorage是应用状态的“中枢”，需要和组件（UI）交互的数据存入AppStorage，比如持久化数据PersistentStorage和环境变量Environment。UI再通过AppStorage提供的装饰器或者API接口，访问这些数据；")],-1),Gn={href:"https://developer.harmonyos.com/cn/docs/documentation/doc-guides-V3/arkts-localstorage-0000001524537149-V3#section14665991077",target:"_blank",rel:"noopener noreferrer"},Zn={href:"https://developer.harmonyos.com/cn/docs/documentation/doc-guides-V3/arkts-localstorage-0000001524537149-V3#section20745122910311",target:"_blank",rel:"noopener noreferrer"},Jn=p(`<h4 id="组件内的状态" tabindex="-1"><a class="header-anchor" href="#组件内的状态" aria-hidden="true">#</a> 组件内的状态</h4><h5 id="state装饰器-组件内状态" tabindex="-1"><a class="header-anchor" href="#state装饰器-组件内状态" aria-hidden="true">#</a> @State装饰器：组件内状态</h5><p>@State装饰的变量，或称为状态变量，一旦变量拥有了状态属性，就和自定义组件的渲染绑定起来。当状态改变时，UI会发生对应的渲染改变。</p><p>在状态变量相关装饰器中，@State是最基础的，使变量拥有状态属性的装饰器，它也是大部分状态变量的数据源。</p><p>①<strong>语法</strong></p><ul><li><p>@State装饰的变量，与声明式范式中的其他被装饰变量一样，是私有的，只能从组件内部访问，在声明时必须指定其类型和本地初始化。初始化也可选择使用命名参数机制从父组件完成初始化。</p><ul><li><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token decorator"><span class="token at operator">@</span><span class="token function">Entry</span></span>
<span class="token decorator"><span class="token at operator">@</span><span class="token function">Component</span></span>
struct Index <span class="token punctuation">{</span>
  <span class="token decorator"><span class="token at operator">@</span><span class="token function">State</span></span> message<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">&#39;Hello World22222&#39;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li></ul>`,6),Kn=n("thead",null,[n("tr",null,[n("th",null,"@State变量装饰器"),n("th",null,"说明")])],-1),Yn=n("tr",null,[n("td",null,"装饰器参数"),n("td",null,"无")],-1),Qn=n("tr",null,[n("td",null,"同步类型"),n("td",null,"不与父组件中任何类型的变量同步。")],-1),Xn=n("td",null,"允许装饰的变量类型",-1),ns={href:"https://developer.harmonyos.com/cn/docs/documentation/doc-guides-V3/arkts-state-0000001474017162-V3#section135631413173517",target:"_blank",rel:"noopener noreferrer"},ss=n("strong",null,"建议不要装饰Date类型，应用可能会产生异常行为。不支持Length、ResourceStr、ResourceColor类型，Length、ResourceStr、ResourceColor为简单类型和复杂类型的联合类型。",-1),as=n("tr",null,[n("td",null,"被装饰变量的初始值"),n("td",null,"必须本地初始化。")],-1),ts=p(`<p>②<strong>特点</strong></p><ul><li>@State装饰的变量与子组件中的@Prop、@Link或@ObjectLink装饰变量之间建立单向或双向数据同步。</li><li>@State装饰的变量生命周期与其所属自定义组件的生命周期相同。</li></ul><p>③<strong>传递/访问规则</strong></p><table><thead><tr><th>传递/访问</th><th>说明</th></tr></thead><tbody><tr><td>从父组件初始化</td><td>可选，从父组件初始化或者本地初始化。如果从父组件初始化将会覆盖本地初始化。支持父组件中常规变量、@State、@Link、@Prop、@Provide、@Consume、@ObjectLink、@StorageLink、@StorageProp、@LocalStorageLink和@LocalStorageProp装饰的变量，初始化子组件的@State。</td></tr><tr><td>用于初始化子组件</td><td>@State装饰的变量支持初始化子组件的常规变量、@State、@Link、@Prop、@Provide。</td></tr><tr><td>是否支持组件外访问</td><td>不支持，只能在组件内访问。</td></tr></tbody></table><p>④<strong>监听范围，不是所有被@state修饰的状态变化都能让UI更新</strong></p><ul><li><p>当装饰的数据类型为boolean、string、number类型时，可以观察到数值的变化</p></li><li><p>当装饰的数据类型为class或者Object时，可以观察到自身的赋值的变化，和其属性赋值的变化，即Object.keys(observedObject)返回的所有属性。</p><ul><li><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">class</span> <span class="token class-name">ClassA</span> <span class="token punctuation">{</span>
  <span class="token keyword">public</span> value<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>

  <span class="token function">constructor</span><span class="token punctuation">(</span>value<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">Model</span> <span class="token punctuation">{</span>
  <span class="token keyword">public</span> value<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
  <span class="token keyword">public</span> name<span class="token operator">:</span> ClassA<span class="token punctuation">;</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span>value<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> a<span class="token operator">:</span> ClassA<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> a<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">// class类型</span>
<span class="token decorator"><span class="token at operator">@</span><span class="token function">State</span></span> title<span class="token operator">:</span> Model <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Model</span><span class="token punctuation">(</span><span class="token string">&#39;Hello&#39;</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">ClassA</span><span class="token punctuation">(</span><span class="token string">&#39;World&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// class类型赋值</span>
<span class="token keyword">this</span><span class="token punctuation">.</span>title <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Model</span><span class="token punctuation">(</span><span class="token string">&#39;Hi&#39;</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">ClassA</span><span class="token punctuation">(</span><span class="token string">&#39;ArkUI&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// class属性的赋值</span>
<span class="token keyword">this</span><span class="token punctuation">.</span>title<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token string">&#39;Hi&#39;</span>
<span class="token comment">// 嵌套的属性赋值观察不到 （但实际测试这里还是能检测到）</span>
<span class="token keyword">this</span><span class="token punctuation">.</span>title<span class="token punctuation">.</span>name<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token string">&#39;ArkUI&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li></ul><h5 id="prop装饰器-父子单向同步" tabindex="-1"><a class="header-anchor" href="#prop装饰器-父子单向同步" aria-hidden="true">#</a> @Prop装饰器：父子单向同步</h5><p>@Prop装饰的变量可以和父组件建立单向的同步关系。@Prop装饰的变量是可变的，但是变化不会同步回其父组件。</p><p>@Prop装饰的变量和父组件建立单向的同步关系：</p><ul><li>@Prop变量允许在本地修改，但修改后的变化不会同步回父组件。</li><li>当父组件中的数据源更改时，与之相关的@Prop装饰的变量都会自动更新。如果子组件已经在本地修改了@Prop装饰的相关变量值，而在父组件中对应的@State装饰的变量被修改后，子组件本地修改的@Prop装饰的相关变量值将被覆盖。</li></ul><p>①<strong>限制</strong></p><ul><li>@Prop修饰复杂类型时是深拷贝，在拷贝的过程中除了基本类型、Map、Set、Date、Array外，都会丢失类型。</li><li>@Prop装饰器不能在@Entry装饰的自定义组件中使用。</li></ul>`,12),ps=n("thead",null,[n("tr",null,[n("th",null,"@Prop变量装饰器"),n("th",null,"说明")])],-1),es=n("tr",null,[n("td",null,"装饰器参数"),n("td",null,"无")],-1),os=n("tr",null,[n("td",null,"同步类型"),n("td",null,"单向同步：对父组件状态变量值的修改，将同步给子组件@Prop装饰的变量，子组件@Prop变量的修改不会同步到父组件的状态变量上")],-1),cs=n("td",null,"允许装饰的变量类型",-1),is=n("code",null,"CompA ({ aProp: undefined })``CompA ({ aProp: null })",-1),ls={href:"https://developer.harmonyos.com/cn/docs/documentation/doc-guides-V3/arkts-state-management-overview-0000001524537145-V3#section127619262713",target:"_blank",rel:"noopener noreferrer"},us={href:"https://developer.harmonyos.com/cn/docs/documentation/doc-guides-V3/arkts-prop-0000001473537702-V3#section614118685518",target:"_blank",rel:"noopener noreferrer"},rs=n("code",null,"@State : Array<S>",-1),ks={href:"https://developer.harmonyos.com/cn/docs/documentation/doc-guides-V3/arkts-prop-0000001473537702-V3#section99561777591",target:"_blank",rel:"noopener noreferrer"},ds=n("code",null,"@State : { propA: S }",-1),vs={href:"https://developer.harmonyos.com/cn/docs/documentation/doc-guides-V3/arkts-prop-0000001473537702-V3#section1381944312202",target:"_blank",rel:"noopener noreferrer"},ms=n("tr",null,[n("td",null,"被装饰变量的初始值"),n("td",null,"允许本地初始化。")],-1),bs=p(`<p>②<strong>传递/访问规则说明</strong></p><table><thead><tr><th>传递/访问</th><th>说明</th></tr></thead><tbody><tr><td>从父组件初始化</td><td>如果本地有初始化，则是可选的。没有的话，则必选，支持父组件中的常规变量、@State、@Link、@Prop、@Provide、@Consume、@ObjectLink、@StorageLink、@StorageProp、@LocalStorageLink和@LocalStorageProp去初始化子组件中的@Prop变量。</td></tr><tr><td>用于初始化子组件</td><td>@Prop支持去初始化子组件中的常规变量、@State、@Link、@Prop、@Provide。</td></tr><tr><td>是否支持组件外访问</td><td>@Prop装饰的变量是私有的，只能在组件内访问。</td></tr></tbody></table><p>③<strong>示例代码</strong></p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code>
<span class="token decorator"><span class="token at operator">@</span><span class="token function">Entry</span></span>
<span class="token decorator"><span class="token at operator">@</span><span class="token function">Component</span></span>
struct Index <span class="token punctuation">{</span>
  <span class="token decorator"><span class="token at operator">@</span><span class="token function">State</span></span> message<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">&#39;Hello World22222&#39;</span>

<span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">Row</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">Column</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">Child</span><span class="token punctuation">(</span><span class="token punctuation">{</span>message<span class="token operator">:</span><span class="token keyword">this</span><span class="token punctuation">.</span>message<span class="token punctuation">}</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
      <span class="token punctuation">.</span><span class="token function">width</span><span class="token punctuation">(</span><span class="token string">&#39;100%&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token punctuation">.</span><span class="token function">height</span><span class="token punctuation">(</span><span class="token string">&#39;100%&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token decorator"><span class="token at operator">@</span><span class="token function">Component</span></span>
struct Child<span class="token punctuation">{</span>
  <span class="token decorator"><span class="token at operator">@</span><span class="token function">Prop</span></span> message<span class="token operator">:</span><span class="token builtin">string</span>
  <span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token function">Row</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token function">Text</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>message<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
      <span class="token function">Button</span><span class="token punctuation">(</span><span class="token string">&#39;changeMsg&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">onClick</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token keyword">this</span><span class="token punctuation">.</span>message <span class="token operator">=</span> <span class="token string">&#39;change&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>被prop修饰不能有默认值。</li><li>子组件被prop修饰的值改变不会影响父亲组件，父组件UI不会变化。</li><li>如果父组件修改了传递的值，则子组件和父组件引用该数据的UI视图都会更新（也就是说父组件的更改会覆盖子组件@prop修饰的值）。</li></ul><h5 id="link装饰器-父子双向同步" tabindex="-1"><a class="header-anchor" href="#link装饰器-父子双向同步" aria-hidden="true">#</a> @Link装饰器：父子双向同步</h5><p>子组件中被@Link装饰的变量与其父组件中对应的数据源建立双向数据绑定。</p><p>①<strong>语法</strong></p><ul><li>@Link装饰器不能在@Entry装饰的自定义组件中使用。</li></ul>`,9),gs=n("thead",null,[n("tr",null,[n("th",null,"@Link变量装饰器"),n("th",null,"说明")])],-1),hs=n("tr",null,[n("td",null,"装饰器参数"),n("td",null,"无")],-1),fs=n("tr",null,[n("td",null,"同步类型"),n("td",null,"双向同步。父组件中@State, @StorageLink和@Link 和子组件@Link可以建立双向数据同步，反之亦然。")],-1),ys=n("td",null,"允许装饰的变量类型",-1),_s={href:"https://developer.harmonyos.com/cn/docs/documentation/doc-guides-V3/arkts-link-0000001524297305-V3#section7141136115513",target:"_blank",rel:"noopener noreferrer"},ws=n("tr",null,[n("td",null,"被装饰变量的初始值"),n("td",null,"无，禁止本地初始化。")],-1),Ss=p(`<p>②<strong>传递/访问规则</strong></p><table><thead><tr><th>传递/访问</th><th>说明</th></tr></thead><tbody><tr><td>从父组件初始化和更新</td><td>必选。与父组件@State, @StorageLink和@Link 建立双向绑定。允许父组件中@State、@Link、@Prop、@Provide、@Consume、@ObjectLink、@StorageLink、@StorageProp、@LocalStorageLink和@LocalStorageProp装饰变量初始化子组件@Link。从API version 9开始，@Link子组件从父组件初始化@State的语法为Comp({ aLink: this.aState })。同样Comp({aLink: $aState})也支持。</td></tr><tr><td>用于初始化子组件</td><td>允许，可用于初始化常规变量、@State、@Link、@Prop、@Provide。</td></tr><tr><td>是否支持组件外访问</td><td>私有，只能在所属组件内访问。</td></tr></tbody></table><p>③<strong>Link的原理</strong></p><p>为了了解@Link变量初始化和更新机制，有必要先了解父组件和拥有@Link变量的子组件的关系，初始渲染和双向更新的流程（以父组件为@State为例）。</p><ol><li>初始渲染：执行父组件的build()函数后将创建子组件的新实例。初始化过程如下： <ol><li>必须指定父组件中的@State变量，用于初始化子组件的@Link变量。子组件的@Link变量值与其父组件的数据源变量保持同步（双向数据同步）。</li><li>父组件的@State状态变量包装类通过构造函数传给子组件，子组件的@Link包装类拿到父组件的@State的状态变量后，将当前@Link包装类this指针注册给父组件的@State变量。</li></ol></li><li>@Link的数据源的更新：即父组件中状态变量更新，引起相关子组件的@Link的更新。处理步骤： <ol><li>通过初始渲染的步骤可知，子组件@Link包装类把当前this指针注册给父组件。父组件@State变量变更后，会遍历更新所有依赖它的系统组件（elementid）和状态变量（比如@Link包装类）。</li><li>通知@Link包装类更新后，子组件中所有依赖@Link状态变量的系统组件（elementId）都会被通知更新。以此实现父组件对子组件的状态数据同步。</li></ol></li><li>@Link的更新：当子组件中@Link更新后，处理步骤如下（以父组件为@State为例）： <ol><li>@Link更新后，调用父组件的@State包装类的set方法，将更新后的数值同步回父组件。</li><li>子组件@Link和父组件@State分别遍历依赖的系统组件，进行对应的UI的更新。以此实现子组件@Link同步回父组件@State。</li></ol></li></ol><h5 id="provide装饰器和-consume装饰器-与后代组件双向同步" tabindex="-1"><a class="header-anchor" href="#provide装饰器和-consume装饰器-与后代组件双向同步" aria-hidden="true">#</a> @Provide装饰器和@Consume装饰器：与后代组件双向同步</h5><p>类似于依赖注入和React的类似。</p><p>①<strong>语法</strong></p><ul><li>@Provide和@Consume可以通过相同的变量名或者相同的变量别名绑定，变量类型必须相同。</li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// 通过相同的变量名绑定</span>
<span class="token decorator"><span class="token at operator">@</span><span class="token function">Provide</span></span> a<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token decorator"><span class="token at operator">@</span><span class="token function">Consume</span></span> a<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>

<span class="token comment">// 通过相同的变量别名绑定</span>
<span class="token decorator"><span class="token at operator">@</span><span class="token function">Provide</span></span><span class="token punctuation">(</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">)</span> b<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token decorator"><span class="token at operator">@</span><span class="token function">Consume</span></span><span class="token punctuation">(</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">)</span> c<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,10),Cs=n("thead",null,[n("tr",null,[n("th",null,"@Provide变量装饰器"),n("th",null,"说明")])],-1),As=n("tr",null,[n("td",null,"装饰器参数"),n("td",null,"别名：常量字符串，可选。如果指定了别名，则通过别名来绑定变量；如果未指定别名，则通过变量名绑定变量。")],-1),Ps=n("tr",null,[n("td",null,"同步类型"),n("td",null,"双向同步。从@Provide变量到所有@Consume变量以及相反的方向的数据同步。双向同步的操作与@State和@Link的组合相同。")],-1),xs=n("td",null,"允许装饰的变量类型",-1),Is={href:"https://developer.harmonyos.com/cn/docs/documentation/doc-guides-V3/arkts-provide-and-consume-0000001473857338-V3#section7141136115513",target:"_blank",rel:"noopener noreferrer"},Ls=n("tr",null,[n("td",null,"被装饰变量的初始值"),n("td",null,"必须指定。")],-1),Vs=n("thead",null,[n("tr",null,[n("th",null,"@Consume变量装饰器"),n("th",null,"说明")])],-1),Bs=n("tr",null,[n("td",null,"装饰器参数"),n("td",null,"别名：常量字符串，可选。如果提供了别名，则必须有@Provide的变量和其有相同的别名才可以匹配成功；否则，则需要变量名相同才能匹配成功。")],-1),Us=n("tr",null,[n("td",null,"同步类型"),n("td",null,"双向：从@Provide变量（具体请参见@Provide）到所有@Consume变量，以及相反的方向。双向同步操作与@State和@Link的组合相同。")],-1),Ts=n("td",null,"允许装饰的变量类型",-1),Es={href:"https://developer.harmonyos.com/cn/docs/documentation/doc-guides-V3/arkts-provide-and-consume-0000001473857338-V3#section7141136115513",target:"_blank",rel:"noopener noreferrer"},Ds=n("tr",null,[n("td",null,"被装饰变量的初始值"),n("td",null,"无，禁止本地初始化。")],-1),Fs=p(`<p>②<strong>传递/访问规则</strong></p><table><thead><tr><th>@Provide传递/访问</th><th>说明</th></tr></thead><tbody><tr><td>从父组件初始化和更新</td><td>可选，允许父组件中常规变量、@State、@Link、@Prop、@Provide、@Consume、@ObjectLink、@StorageLink、@StorageProp、@LocalStorageLink和@LocalStorageProp装饰的变量装饰变量初始化子组件@Provide。</td></tr><tr><td>用于初始化子组件</td><td>允许，可用于初始化@State、@Link、@Prop、@Provide。</td></tr><tr><td>和父组件同步</td><td>否。</td></tr><tr><td>和后代组件同步</td><td>和@Consume双向同步。</td></tr><tr><td>是否支持组件外访问</td><td>私有，仅可以在所属组件内访问。</td></tr></tbody></table><table><thead><tr><th>@Consume传递/访问</th><th>说明</th></tr></thead><tbody><tr><td>从父组件初始化和更新</td><td>禁止。通过相同的变量名和alias（别名）从@Provide初始化。</td></tr><tr><td>用于初始化子组件</td><td>允许，可用于初始化@State、@Link、@Prop、@Provide。</td></tr><tr><td>和祖先组件同步</td><td>和@Provide双向同步。</td></tr><tr><td>是否支持组件外访问</td><td>私有，仅可以在所属组件内访问</td></tr></tbody></table><p>③<strong>原理</strong></p><ol><li>初始渲染： <ol><li>@Provide装饰的变量会以map的形式，传递给当前@Provide所属组件的所有子组件；</li><li>子组件中如果使用@Consume变量，则会在map中查找是否有该变量名/alias（别名）对应的@Provide的变量，如果查找不到，框架会抛出JS ERROR;</li><li>在初始化@Consume变量时，和@State/@Link的流程类似，@Consume变量会保存在map中查找到的@Provide变量，并把自己注册给@Provide。</li></ol></li><li>当@Provide装饰的数据变化时： <ol><li>通过初始渲染的步骤可知，子组件@Consume已把自己注册给父组件。父组件@Provide变量变更后，会遍历更新所有依赖它的系统组件（elementid）和状态变量（@Consume）；</li><li>通知@Consume更新后，子组件所有依赖@Consume的系统组件（elementId）都会被通知更新。以此实现@Provide对@Consume状态数据同步。</li></ol></li><li>当@Consume装饰的数据变化时： <ol><li>通过初始渲染的步骤可知，子组件@Consume持有@Provide的实例。在@Consume更新后调用@Provide的更新方法，将更新的数值同步回@Provide，以此实现@Consume向@Provide的同步更新。</li></ol></li></ol><p>④<strong>示例</strong></p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token decorator"><span class="token at operator">@</span><span class="token function">Component</span></span>
struct CompD <span class="token punctuation">{</span>
  <span class="token comment">// @Consume装饰的变量通过相同的属性名绑定其祖先组件CompA内的@Provide装饰的变量</span>
  <span class="token decorator"><span class="token at operator">@</span><span class="token function">Consume</span></span> reviewVotes<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
  <span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">Column</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">Text</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">reviewVotes(</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>reviewVotes<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">)</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
      <span class="token function">Button</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">reviewVotes(</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>reviewVotes<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">), give +1</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">onClick</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>reviewVotes <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token punctuation">.</span><span class="token function">width</span><span class="token punctuation">(</span><span class="token string">&#39;50%&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token decorator"><span class="token at operator">@</span><span class="token function">Component</span></span>
struct CompC <span class="token punctuation">{</span>
  <span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">Row</span><span class="token punctuation">(</span><span class="token punctuation">{</span> space<span class="token operator">:</span> <span class="token number">5</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">CompD</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token function">CompD</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token decorator"><span class="token at operator">@</span><span class="token function">Component</span></span>
struct CompB <span class="token punctuation">{</span>
  <span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">CompC</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token decorator"><span class="token at operator">@</span><span class="token function">Entry</span></span>
<span class="token decorator"><span class="token at operator">@</span><span class="token function">Component</span></span>
struct CompA <span class="token punctuation">{</span>
  <span class="token comment">// @Provide装饰的变量reviewVotes由入口组件CompA提供其后代组件</span>
  <span class="token decorator"><span class="token at operator">@</span><span class="token function">Provide</span></span> reviewVotes<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

  <span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">Column</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">Button</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">reviewVotes(</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>reviewVotes<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">), give +1</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">onClick</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>reviewVotes <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">)</span>
      <span class="token function">CompB</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="observed装饰器和-objectlink装饰器-嵌套类对象属性变化" tabindex="-1"><a class="header-anchor" href="#observed装饰器和-objectlink装饰器-嵌套类对象属性变化" aria-hidden="true">#</a> @Observed装饰器和@ObjectLink装饰器：嵌套类对象属性变化</h5><p>上文所述的装饰器仅能观察到第一层的变化，但是在实际应用开发中，应用会根据开发需要，封装自己的数据模型。对于多层嵌套的情况，比如二维数组，或者数组项class，或者class的属性是class，他们的第二层的属性变化是无法观察到的。这就引出了@Observed/@ObjectLink装饰器。</p><p>①<strong>概述</strong></p><p>@ObjectLink和@Observed类装饰器用于在涉及嵌套对象或数组的场景中进行双向数据同步：</p><ul><li>被@Observed装饰的类，可以被观察到属性的变化；</li><li>子组件中@ObjectLink装饰器装饰的状态变量用于接收@Observed装饰的类的实例，和父组件中对应的状态变量建立双向数据绑定。这个实例可以是数组中的被@Observed装饰的项，或者是class object中的属性，这个属性同样也需要被@Observed装饰。</li><li>单独使用@Observed是没有任何作用的，需要搭配@ObjectLink或者@Prop使用。</li></ul><p>②<strong>语法</strong></p><ul><li><p>使用@Observed装饰class会改变class原始的原型链，@Observed和其他类装饰器装饰同一个class可能会带来问题。</p></li><li><p>@ObjectLink装饰器不能在@Entry装饰的自定义组件中使用。</p></li><li><p>@Observed装饰的类，如果其属性为非简单类型，比如class、Object或者数组，也需要被@Observed装饰，否则将观察不到其属性的变化。</p><ul><li><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">class</span> <span class="token class-name">ClassA</span> <span class="token punctuation">{</span>
  <span class="token keyword">public</span> c<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>

  <span class="token function">constructor</span><span class="token punctuation">(</span>c<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>c <span class="token operator">=</span> c<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token decorator"><span class="token at operator">@</span><span class="token function">Observed</span></span>
<span class="token keyword">class</span> <span class="token class-name">ClassB</span> <span class="token punctuation">{</span>
  <span class="token keyword">public</span> a<span class="token operator">:</span> ClassA<span class="token punctuation">;</span>
  <span class="token keyword">public</span> b<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>

  <span class="token function">constructor</span><span class="token punctuation">(</span>a<span class="token operator">:</span> ClassA<span class="token punctuation">,</span> b<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>a <span class="token operator">=</span> a<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>b <span class="token operator">=</span> b<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">//以上示例中，ClassB被@Observed装饰，其成员变量的赋值的变化是可以被观察到的，但对于ClassA，没有被@Observed装饰，其属性的修改不能被观察到。</span>
<span class="token decorator"><span class="token at operator">@</span><span class="token function">ObjectLink</span></span> b<span class="token operator">:</span> ClassB

<span class="token comment">// 赋值变化可以被观察到</span>
<span class="token keyword">this</span><span class="token punctuation">.</span>b<span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassA</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>
<span class="token keyword">this</span><span class="token punctuation">.</span>b<span class="token punctuation">.</span>b <span class="token operator">=</span> <span class="token number">5</span>

<span class="token comment">// ClassA没有被@Observed装饰，其属性的变化观察不到</span>
<span class="token keyword">this</span><span class="token punctuation">.</span>b<span class="token punctuation">.</span>a<span class="token punctuation">.</span>c <span class="token operator">=</span> <span class="token number">5</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li></li></ul></li></ul><table><thead><tr><th>@Observed类装饰器</th><th>说明</th></tr></thead><tbody><tr><td>装饰器参数</td><td>无</td></tr><tr><td>类装饰器</td><td>装饰class。需要放在class的定义前，使用new创建类对象。</td></tr></tbody></table><table><thead><tr><th>@ObjectLink变量装饰器</th><th>说明</th></tr></thead><tbody><tr><td>装饰器参数</td><td>无</td></tr><tr><td>同步类型</td><td>不与父组件中的任何类型同步变量。</td></tr><tr><td>允许装饰的变量类型</td><td>必须为被@Observed装饰的class实例，必须指定类型。不支持简单类型，可以使用@Prop。@ObjectLink的属性是可以改变的，但是变量的分配是不允许的，也就是说这个装饰器装饰变量是只读的，不能被改变。</td></tr><tr><td>被装饰变量的初始值</td><td>不允许。</td></tr></tbody></table>`,16),Os={class:"custom-container tip"},js=n("p",{class:"custom-container-title"},"TIP",-1),Hs={href:"https://developer.harmonyos.com/cn/docs/documentation/doc-guides-V3/arkts-prop-0000001473537702-V3",target:"_blank",rel:"noopener noreferrer"},Rs=n("ul",null,[n("li",null,"@Prop装饰的变量和数据源的关系是是单向同步，@Prop装饰的变量在本地拷贝了数据源，所以它允许本地更改，如果父组件中的数据源有更新，@Prop装饰的变量本地的修改将被覆盖；"),n("li",null,"@ObjectLink装饰的变量和数据源的关系是双向同步，@ObjectLink装饰的变量相当于指向数据源的指针。如果一旦发生@ObjectLink装饰的变量的赋值，则同步链将被打断。")],-1),Ws=n("p",null,[s("③"),n("strong",null,"传递/访问规则")],-1),$s=n("thead",null,[n("tr",null,[n("th",null,"@ObjectLink传递/访问"),n("th",null,"说明")])],-1),qs=n("td",null,"从父组件初始化",-1),Ns={href:"https://developer.harmonyos.com/cn/docs/documentation/doc-guides-V3/arkts-observed-and-objectlink-0000001473697338-V3#section99561777591",target:"_blank",rel:"noopener noreferrer"},Ms={href:"https://developer.harmonyos.com/cn/docs/documentation/doc-guides-V3/arkts-observed-and-objectlink-0000001473697338-V3#section614118685518",target:"_blank",rel:"noopener noreferrer"},zs=n("tr",null,[n("td",null,"与源对象同步"),n("td",null,"双向。")],-1),Gs=n("tr",null,[n("td",null,"可以初始化子组件"),n("td",null,"允许，可用于初始化常规变量、@State、@Link、@Prop、@Provide")],-1),Zs=p(`<p>④<strong>原理</strong></p><ol><li>初始渲染： <ol><li>@Observed装饰的class的实例会被不透明的代理对象包装，代理了class上的属性的setter和getter方法</li><li>子组件中@ObjectLink装饰的从父组件初始化，接收被@Observed装饰的class的实例，@ObjectLink的包装类会将自己注册给@Observed class。</li></ol></li><li>属性更新：当@Observed装饰的class属性改变时，会走到代理的setter和getter，然后遍历依赖它的@ObjectLink包装类，通知数据更新。</li></ol><p>⑤<strong>示例</strong></p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// objectLinkNestedObjects.ets</span>
<span class="token keyword">let</span> NextID<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>

<span class="token decorator"><span class="token at operator">@</span><span class="token function">Observed</span></span>
<span class="token keyword">class</span> <span class="token class-name">ClassA</span> <span class="token punctuation">{</span>
  <span class="token keyword">public</span> id<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
  <span class="token keyword">public</span> c<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>

  <span class="token function">constructor</span><span class="token punctuation">(</span>c<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> NextID<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>c <span class="token operator">=</span> c<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token decorator"><span class="token at operator">@</span><span class="token function">Observed</span></span>
<span class="token keyword">class</span> <span class="token class-name">ClassB</span> <span class="token punctuation">{</span>
  <span class="token keyword">public</span> a<span class="token operator">:</span> ClassA<span class="token punctuation">;</span>

  <span class="token function">constructor</span><span class="token punctuation">(</span>a<span class="token operator">:</span> ClassA<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>a <span class="token operator">=</span> a<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token decorator"><span class="token at operator">@</span><span class="token function">Component</span></span>
struct ViewA <span class="token punctuation">{</span>
  label<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">&#39;ViewA1&#39;</span><span class="token punctuation">;</span>
  <span class="token decorator"><span class="token at operator">@</span><span class="token function">ObjectLink</span></span> a<span class="token operator">:</span> ClassA<span class="token punctuation">;</span>

  <span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">Row</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">Button</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">ViewA [</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>label<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">] this.a.c=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>a<span class="token punctuation">.</span>c<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> +1</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">onClick</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
          <span class="token keyword">this</span><span class="token punctuation">.</span>a<span class="token punctuation">.</span>c <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token decorator"><span class="token at operator">@</span><span class="token function">Entry</span></span>
<span class="token decorator"><span class="token at operator">@</span><span class="token function">Component</span></span>
struct ViewB <span class="token punctuation">{</span>
  <span class="token decorator"><span class="token at operator">@</span><span class="token function">State</span></span> b<span class="token operator">:</span> ClassB <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassB</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ClassA</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">Column</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">ViewA</span><span class="token punctuation">(</span><span class="token punctuation">{</span> label<span class="token operator">:</span> <span class="token string">&#39;ViewA #1&#39;</span><span class="token punctuation">,</span> a<span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>b<span class="token punctuation">.</span>a <span class="token punctuation">}</span><span class="token punctuation">)</span>
      <span class="token function">ViewA</span><span class="token punctuation">(</span><span class="token punctuation">{</span> label<span class="token operator">:</span> <span class="token string">&#39;ViewA #2&#39;</span><span class="token punctuation">,</span> a<span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>b<span class="token punctuation">.</span>a <span class="token punctuation">}</span><span class="token punctuation">)</span>

      <span class="token function">Button</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">ViewB: this.b.a.c+= 1</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">onClick</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
          <span class="token keyword">this</span><span class="token punctuation">.</span>b<span class="token punctuation">.</span>a<span class="token punctuation">.</span>c <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
      <span class="token function">Button</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">ViewB: this.b.a = new ClassA(0)</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">onClick</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
          <span class="token keyword">this</span><span class="token punctuation">.</span>b<span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassA</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
      <span class="token function">Button</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">ViewB: this.b = new ClassB(ClassA(0))</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">onClick</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
          <span class="token keyword">this</span><span class="token punctuation">.</span>b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassB</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ClassA</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="watch装饰器-状态变量更改通知" tabindex="-1"><a class="header-anchor" href="#watch装饰器-状态变量更改通知" aria-hidden="true">#</a> @Watch装饰器：状态变量更改通知</h5><p>①<strong>概念</strong></p><p>@Watch应用于对状态变量的监听。如果开发者需要关注某个状态变量的值是否改变，可以使用@Watch为状态变量设置回调函数。相当于Vue的监听器。<strong>@Watch在ArkUI框架内部判断数值有无更新使用的是严格相等（===）</strong></p><ol><li>在第一次初始化的时候，@Watch装饰的方法不会被调用，即认为初始化不是状态变量的改变。只有在后续状态改变时，才会调用@Watch回调方法。</li><li>@Watch方法在自定义组件的属性变更之后同步执行；（应关注性能，属性值更新函数会延迟组件的重新渲染；不建议在@Watch函数中调用async await，因为@Watch设计的用途是为了快速的计算，异步行为可能会导致重新渲染速度的性能问题。）</li><li>如果在@Watch的方法里改变了其他的状态变量，也会引起状态变更和@Watch的执行；</li></ol><p>②<strong>语法</strong></p><table><thead><tr><th>@Watch补充变量装饰器</th><th>说明</th></tr></thead><tbody><tr><td>装饰器参数(changedPropertyName? : string) =&gt; void</td><td>必填。常量字符串，字符串需要有引号。是(string) =&gt; void自定义成员函数的方法的引用。在多个状态变量绑定同一个@Watch的回调方法的时候，可以通过changedPropertyName进行不同的逻辑处理</td></tr><tr><td>可装饰的自定义组件变量</td><td>将属性名作为字符串输入参数，不返回任何内容。可监听所有装饰器装饰的状态变量。不允许监听常规变量。</td></tr><tr><td>装饰器的顺序</td><td>建议@State、@Prop、@Link等装饰器在@Watch装饰器之前。</td></tr></tbody></table><p>③<strong>示例</strong></p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token decorator"><span class="token at operator">@</span><span class="token function">Component</span></span>
struct TotalView <span class="token punctuation">{</span>
  <span class="token decorator"><span class="token at operator">@</span><span class="token function">Prop</span></span> <span class="token decorator"><span class="token at operator">@</span><span class="token function">Watch</span></span><span class="token punctuation">(</span><span class="token string">&#39;onCountUpdated&#39;</span><span class="token punctuation">)</span> count<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
  <span class="token decorator"><span class="token at operator">@</span><span class="token function">State</span></span> total<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token comment">// @Watch cb</span>
  <span class="token function">onCountUpdated</span><span class="token punctuation">(</span>propName<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>total <span class="token operator">+=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>count<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">Text</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Total: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>total<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token decorator"><span class="token at operator">@</span><span class="token function">Entry</span></span>
<span class="token decorator"><span class="token at operator">@</span><span class="token function">Component</span></span>
struct CountModifier <span class="token punctuation">{</span>
  <span class="token decorator"><span class="token at operator">@</span><span class="token function">State</span></span> count<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

  <span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">Column</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">Button</span><span class="token punctuation">(</span><span class="token string">&#39;add to basket&#39;</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">onClick</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
          <span class="token keyword">this</span><span class="token punctuation">.</span>count<span class="token operator">++</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
      <span class="token function">TotalView</span><span class="token punctuation">(</span><span class="token punctuation">{</span> count<span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>count <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>@Watch</code>和<code>@Link</code>联合使用</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">/*
BasketModifier组件的Button.onClick向BasketModifier shopBasket中添加条目；
@Link装饰的BasketViewer shopBasket值发生变化；
状态管理框架调用@Watch函数BasketViewer onBasketUpdated 更新BasketViewer TotalPurchase的值；
@Link shopBasket的改变，新增了数组项，ForEach组件会执行item Builder，渲染构建新的Item项；@State totalPurchase改变，对应的Text组件也重新渲染；重新渲染是异步发生的。
*/</span>
<span class="token keyword">class</span> <span class="token class-name">PurchaseItem</span> <span class="token punctuation">{</span>
  <span class="token keyword">static</span> NextId<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token keyword">public</span> id<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
  <span class="token keyword">public</span> price<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>

  <span class="token function">constructor</span><span class="token punctuation">(</span>price<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> PurchaseItem<span class="token punctuation">.</span>NextId<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>price <span class="token operator">=</span> price<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token decorator"><span class="token at operator">@</span><span class="token function">Component</span></span>
struct BasketViewer <span class="token punctuation">{</span>
  <span class="token decorator"><span class="token at operator">@</span><span class="token function">Link</span></span> <span class="token decorator"><span class="token at operator">@</span><span class="token function">Watch</span></span><span class="token punctuation">(</span><span class="token string">&#39;onBasketUpdated&#39;</span><span class="token punctuation">)</span> shopBasket<span class="token operator">:</span> PurchaseItem<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token decorator"><span class="token at operator">@</span><span class="token function">State</span></span> totalPurchase<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

  <span class="token function">updateTotal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> total <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>shopBasket<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span>sum<span class="token punctuation">,</span> i<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> sum <span class="token operator">+</span> i<span class="token punctuation">.</span>price<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 超过100欧元可享受折扣</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>total <span class="token operator">&gt;=</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      total <span class="token operator">=</span> <span class="token number">0.9</span> <span class="token operator">*</span> total<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> total<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// @Watch 回调</span>
  <span class="token function">onBasketUpdated</span><span class="token punctuation">(</span>propName<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>totalPurchase <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">updateTotal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">Column</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">ForEach</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>shopBasket<span class="token punctuation">,</span>
        <span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
          <span class="token function">Text</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Price: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>item<span class="token punctuation">.</span>price<span class="token punctuation">.</span><span class="token function">toFixed</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> €</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        item <span class="token operator">=&gt;</span> item<span class="token punctuation">.</span>id<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token punctuation">)</span>
      <span class="token function">Text</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Total: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>totalPurchase<span class="token punctuation">.</span><span class="token function">toFixed</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> €</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token decorator"><span class="token at operator">@</span><span class="token function">Entry</span></span>
<span class="token decorator"><span class="token at operator">@</span><span class="token function">Component</span></span>
struct BasketModifier <span class="token punctuation">{</span>
  <span class="token decorator"><span class="token at operator">@</span><span class="token function">State</span></span> shopBasket<span class="token operator">:</span> PurchaseItem<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">Column</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">Button</span><span class="token punctuation">(</span><span class="token string">&#39;Add to basket&#39;</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">onClick</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
          <span class="token keyword">this</span><span class="token punctuation">.</span>shopBasket<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">PurchaseItem</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">round</span><span class="token punctuation">(</span><span class="token number">100</span> <span class="token operator">*</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
      <span class="token function">BasketViewer</span><span class="token punctuation">(</span><span class="token punctuation">{</span> shopBasket<span class="token operator">:</span> $shopBasket <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="语法-内置组件双向同步" tabindex="-1"><a class="header-anchor" href="#语法-内置组件双向同步" aria-hidden="true">#</a> $$语法：内置组件双向同步</h5><p><code>$$</code>运算符为系统内置组件提供TS变量的引用，使得TS变量和系统内置组件的内部状态保持同步。</p>`,16),Js={href:"https://developer.harmonyos.com/cn/docs/documentation/doc-references-V3/ts-container-refresh-0000001478181429-V3",target:"_blank",rel:"noopener noreferrer"},Ks=n("p",null,[s("①"),n("strong",null,"语法规则")],-1),Ys=n("li",null,[s("当前"),n("code",null,"$$"),s("支持基础类型变量，以及@State、@Link和@Prop装饰的变量。")],-1),Qs=n("code",null,"$$",-1),Xs={href:"https://developer.harmonyos.com/cn/docs/documentation/doc-references-V3/ts-container-refresh-0000001478181429-V3",target:"_blank",rel:"noopener noreferrer"},na=n("li",null,[n("code",null,"$$"),s("绑定的变量变化时，会触发UI的同步刷新。")],-1),sa=p(`<p>②<strong>下拉刷新的示例</strong></p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// xxx.ets</span>
<span class="token decorator"><span class="token at operator">@</span><span class="token function">Entry</span></span>
<span class="token decorator"><span class="token at operator">@</span><span class="token function">Component</span></span>
struct RefreshExample <span class="token punctuation">{</span>
  <span class="token decorator"><span class="token at operator">@</span><span class="token function">State</span></span> isRefreshing<span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token operator">=</span> <span class="token boolean">false</span>
  <span class="token decorator"><span class="token at operator">@</span><span class="token function">State</span></span> counter<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> <span class="token number">0</span>

  <span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">Column</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">Text</span><span class="token punctuation">(</span><span class="token string">&#39;Pull Down and isRefreshing: &#39;</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>isRefreshing<span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">fontSize</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">margin</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>

      <span class="token function">Refresh</span><span class="token punctuation">(</span><span class="token punctuation">{</span> refreshing<span class="token operator">:</span> $$<span class="token keyword">this</span><span class="token punctuation">.</span>isRefreshing<span class="token punctuation">,</span> offset<span class="token operator">:</span> <span class="token number">120</span><span class="token punctuation">,</span> friction<span class="token operator">:</span> <span class="token number">100</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">Text</span><span class="token punctuation">(</span><span class="token string">&#39;Pull Down and refresh: &#39;</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>counter<span class="token punctuation">)</span>
          <span class="token punctuation">.</span><span class="token function">fontSize</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span>
          <span class="token punctuation">.</span><span class="token function">margin</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
      <span class="token punctuation">.</span><span class="token function">onStateChange</span><span class="token punctuation">(</span><span class="token punctuation">(</span>refreshStatus<span class="token operator">:</span> RefreshStatus<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&#39;Refresh onStatueChange state is &#39;</span> <span class="token operator">+</span> refreshStatus<span class="token punctuation">)</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="全局状态管理" tabindex="-1"><a class="header-anchor" href="#全局状态管理" aria-hidden="true">#</a> 全局状态管理</h4>`,3),aa={href:"https://developer.harmonyos.com/cn/docs/documentation/doc-guides-V3/arkts-localstorage-0000001524537149-V3",target:"_blank",rel:"noopener noreferrer"},ta={href:"https://developer.harmonyos.com/cn/docs/documentation/doc-references-V3/js-apis-app-ability-uiability-0000001493584184-V3",target:"_blank",rel:"noopener noreferrer"},pa={href:"https://developer.harmonyos.com/cn/docs/documentation/doc-guides-V3/arkts-appstorage-0000001524417209-V3",target:"_blank",rel:"noopener noreferrer"},ea={href:"https://developer.harmonyos.com/cn/docs/documentation/doc-guides-V3/arkts-persiststorage-0000001474017166-V3",target:"_blank",rel:"noopener noreferrer"},oa={href:"https://developer.harmonyos.com/cn/docs/documentation/doc-guides-V3/arkts-environment-0000001473537710-V3",target:"_blank",rel:"noopener noreferrer"},ca=n("h5",{id:"localstorage-页面级ui状态存储",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#localstorage-页面级ui状态存储","aria-hidden":"true"},"#"),s(" LocalStorage：页面级UI状态存储")],-1),ia=n("p",null,"LocalStorage是页面级的UI状态存储，通过@Entry装饰器接收的参数可以在页面内共享同一个LocalStorage实例。LocalStorage也可以在UIAbility内，页面间共享状态。",-1),la=n("p",null,[s("①"),n("strong",null,"概述")],-1),ua=n("li",null,"应用程序可以创建多个LocalStorage实例，LocalStorage实例可以在页面内共享，也可以通过GetShared接口，获取在UIAbility里创建的GetShared，实现跨页面、UIAbility内共享。",-1),ra=n("li",null,"组件树的根节点，即被@Entry装饰的@Component，可以被分配一个LocalStorage实例，此组件的所有子组件实例将自动获得对该LocalStorage实例的访问权限；",-1),ka={href:"https://developer.harmonyos.com/cn/docs/documentation/doc-guides-V3/arkts-appstorage-0000001524417209-V3",target:"_blank",rel:"noopener noreferrer"},da=n("li",null,"LocalStorage中的所有属性都是可变的。",-1),va=n("p",null,"LocalStorage根据与@Component装饰的组件的同步类型不同，提供了两个装饰器：",-1),ma={href:"https://developer.harmonyos.com/cn/docs/documentation/doc-guides-V3/arkts-localstorage-0000001524537149-V3#section14665991077",target:"_blank",rel:"noopener noreferrer"},ba={href:"https://developer.harmonyos.com/cn/docs/documentation/doc-guides-V3/arkts-localstorage-0000001524537149-V3#section20745122910311",target:"_blank",rel:"noopener noreferrer"},ga=n("p",null,[s("②"),n("strong",null,"限制条件")],-1),ha=n("li",null,"LocalStorage创建后，命名属性的类型不可更改。后续调用Set时必须使用相同类型的值。",-1),fa={href:"https://developer.huawei.com/consumer/cn/doc/development/harmonyos-references-V3/arkts-state-management-0000001504151156-V3#ZH-CN_TOPIC_0000001523808562__getshared9",target:"_blank",rel:"noopener noreferrer"},ya={href:"https://developer.huawei.com/consumer/cn/doc/development/harmonyos-references-V3/js-apis-window-0000001477981397-V3#ZH-CN_TOPIC_0000001573929313__loadcontent9",target:"_blank",rel:"noopener noreferrer"},_a={href:"https://developer.harmonyos.com/cn/docs/documentation/doc-guides-V3/arkts-localstorage-0000001524537149-V3#section13961833151713",target:"_blank",rel:"noopener noreferrer"},wa=n("thead",null,[n("tr",null,[n("th",null,"@LocalStorageProp变量装饰器"),n("th",null,"说明")])],-1),Sa=n("tr",null,[n("td",null,"装饰器参数"),n("td",null,"key：常量字符串，必填（字符串需要有引号）。")],-1),Ca=n("td",null,"允许装饰的变量类型",-1),Aa={href:"https://developer.harmonyos.com/cn/docs/documentation/doc-guides-V3/arkts-localstorage-0000001524537149-V3#section95308721319",target:"_blank",rel:"noopener noreferrer"},Pa=n("tr",null,[n("td",null,"同步类型"),n("td",null,"单向同步：从LocalStorage的对应属性到组件的状态变量。组件本地的修改是允许的，但是LocalStorage中给定的属性一旦发生变化，将覆盖本地的修改。")],-1),xa=n("tr",null,[n("td",null,"被装饰变量的初始值"),n("td",null,"必须指定，如果LocalStorage实例中不存在属性，则作为初始化默认值，并存入LocalStorage中。")],-1),Ia=n("thead",null,[n("tr",null,[n("th",null,"@LocalStorageLink变量装饰器"),n("th",null,"说明")])],-1),La=n("tr",null,[n("td",null,"装饰器参数"),n("td",null,"key：常量字符串，必填（字符串需要有引号）。")],-1),Va=n("td",null,"允许装饰的变量类型",-1),Ba={href:"https://developer.harmonyos.com/cn/docs/documentation/doc-guides-V3/arkts-localstorage-0000001524537149-V3#section0207123614516",target:"_blank",rel:"noopener noreferrer"},Ua=n("tr",null,[n("td",null,"同步类型"),n("td",null,"双向同步：从LocalStorage的对应属性到自定义组件，从自定义组件到LocalStorage对应属性。")],-1),Ta=n("tr",null,[n("td",null,"被装饰变量的初始值"),n("td",null,"必须指定，如果LocalStorage实例中不存在属性，则作为初始化默认值，并存入LocalStorage中。")],-1),Ea=p(`<p>③<strong>传递/访问规则</strong></p><table><thead><tr><th>@LocalStorageProp变量装饰器传递/访问</th><th>说明</th></tr></thead><tbody><tr><td>从父节点初始化和更新</td><td>禁止，@LocalStorageProp不支持从父节点初始化，只能从LocalStorage中key对应的属性初始化，如果没有对应key的话，将使用本地默认值初始化。</td></tr><tr><td>初始化子节点</td><td>支持，可用于初始化@State、@Link、@Prop、@Provide。</td></tr><tr><td>是否支持组件外访问</td><td>否。</td></tr></tbody></table><p>④<strong>原理</strong></p><p><code>@LocalStorageProp</code></p><ul><li>当@LocalStorageProp(key)装饰的数值改变被观察到时，修改不会被同步回LocalStorage对应属性键值key的属性中。</li><li>当前@LocalStorageProp(key)单向绑定的数据会被修改，即仅限于当前组件的私有成员变量改变，其他的绑定该key的数据不会同步改变。</li><li>当@LocalStorageProp(key)装饰的数据本身是状态变量，它的改变虽然不会同步回LocalStorage中，但是会引起所属的自定义组件的重新渲染。</li><li>当LocalStorage中key对应的属性发生改变时，会同步给所有@LocalStorageProp(key)装饰的数据，@LocalStorageProp(key)本地的修改将被覆盖。</li></ul><p><code>@LocalStorageLink</code></p><ul><li>当@LocalStorageLink(key)装饰的数值改变被观察到时，修改将被同步回LocalStorage对应属性键值key的属性中。</li><li>LocalStorage中属性键值key对应的数据一旦改变，属性键值key绑定的所有的数据（包括双向@LocalStorageLink和单向@LocalStorageProp）都将同步修改；</li><li>当@LocalStorageLink(key)装饰的数据本身是状态变量，它的改变不仅仅会同步回LocalStorage中，还会引起所属的自定义组件的重新渲染。</li></ul><table><thead><tr><th>@LocalStorageProp传递/访问</th><th>说明</th></tr></thead><tbody><tr><td>从父节点初始化和更新</td><td>禁止，@LocalStorageLink不支持从父节点初始化，只能从LocalStorage中key对应的属性初始化，如果没有对应key的话，将使用本地默认值初始化。</td></tr><tr><td>初始化子节点</td><td>支持，可用于初始化@State、@Link、@Prop、@Provide。</td></tr><tr><td>是否支持组件外访问</td><td>否。</td></tr></tbody></table><p>⑤<strong>使用方式</strong></p><p><strong>LocalStorageLink和LocalStorage双向同步的简单场景</strong></p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">let</span> storage <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LocalStorage</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token string-property property">&#39;PropA&#39;</span><span class="token operator">:</span> <span class="token number">47</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 创建新实例并使用给定对象初始化</span>
<span class="token keyword">let</span> propA <span class="token operator">=</span> storage<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;PropA&#39;</span><span class="token punctuation">)</span> <span class="token comment">// propA == 47</span>
<span class="token keyword">let</span> link1 <span class="token operator">=</span> storage<span class="token punctuation">.</span><span class="token function">link</span><span class="token punctuation">(</span><span class="token string">&#39;PropA&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// link1.get() == 47</span>
<span class="token keyword">let</span> link2 <span class="token operator">=</span> storage<span class="token punctuation">.</span><span class="token function">link</span><span class="token punctuation">(</span><span class="token string">&#39;PropA&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// link2.get() == 47</span>
<span class="token keyword">let</span> prop <span class="token operator">=</span> storage<span class="token punctuation">.</span><span class="token function">prop</span><span class="token punctuation">(</span><span class="token string">&#39;PropA&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// prop.get() = 47</span>
link1<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token number">48</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// two-way sync: link1.get() == link2.get() == prop.get() == 48</span>
prop<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// one-way sync: prop.get()=1; but link1.get() == link2.get() == 48</span>
link1<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token number">49</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// two-way sync: link1.get() == link2.get() == prop.get() == 49</span>

<span class="token comment">/*
使用构造函数创建LocalStorage实例storage；
使用@Entry装饰器将storage添加到CompA顶层组件中；
@LocalStorageLink绑定LocalStorage对给定的属性，建立双向数据同步。
*/</span>
<span class="token comment">// 创建新实例并使用给定对象初始化</span>
<span class="token keyword">let</span> storage <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LocalStorage</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token string-property property">&#39;PropA&#39;</span><span class="token operator">:</span> <span class="token number">47</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token decorator"><span class="token at operator">@</span><span class="token function">Component</span></span>
struct Child <span class="token punctuation">{</span>
  <span class="token comment">// @LocalStorageLink变量装饰器与LocalStorage中的&#39;PropA&#39;属性建立双向绑定</span>
  <span class="token decorator"><span class="token at operator">@</span><span class="token function">LocalStorageLink</span></span><span class="token punctuation">(</span><span class="token string">&#39;PropA&#39;</span><span class="token punctuation">)</span> storLink2<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>

  <span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">Button</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Child from LocalStorage </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>storLink2<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
      <span class="token comment">// 更改将同步至LocalStorage中的&#39;PropA&#39;以及Parent.storLink1</span>
      <span class="token punctuation">.</span><span class="token function">onClick</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>storLink2 <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">// 使LocalStorage可从@Component组件访问</span>
<span class="token decorator"><span class="token at operator">@</span><span class="token function">Entry</span></span><span class="token punctuation">(</span>storage<span class="token punctuation">)</span>
<span class="token decorator"><span class="token at operator">@</span><span class="token function">Component</span></span>
struct CompA <span class="token punctuation">{</span>
  <span class="token comment">// @LocalStorageLink变量装饰器与LocalStorage中的&#39;PropA&#39;属性建立双向绑定</span>
  <span class="token decorator"><span class="token at operator">@</span><span class="token function">LocalStorageLink</span></span><span class="token punctuation">(</span><span class="token string">&#39;PropA&#39;</span><span class="token punctuation">)</span> storLink1<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>

  <span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">Column</span><span class="token punctuation">(</span><span class="token punctuation">{</span> space<span class="token operator">:</span> <span class="token number">15</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">Button</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Parent from LocalStorage </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>storLink1<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span> <span class="token comment">// initial value from LocalStorage will be 47, because &#39;PropA&#39; initialized already</span>
        <span class="token punctuation">.</span><span class="token function">onClick</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>storLink1 <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">)</span>
              <span class="token comment">// 并不建议在组件内使用全局变量linkToPropA.get()，因为可能会有生命周期不同引起的错误。</span>
      <span class="token function">Text</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">@LocalStorageLink: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>storLink<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> - linkToPropA: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>linkToPropA<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
      <span class="token comment">// @Component子组件自动获得对CompA LocalStorage实例的访问权限。</span>
      <span class="token function">Child</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>@LocalStorageProp和LocalStorage单向同步的简单场景</strong></p><ul><li>CompA中对this.storProp1的修改，只会在CompA中生效，并没有同步回storage；</li><li>Child组件中，Text绑定的storProp2 依旧显示47。</li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// 创建新实例并使用给定对象初始化</span>
<span class="token keyword">let</span> storage <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LocalStorage</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token string-property property">&#39;PropA&#39;</span><span class="token operator">:</span> <span class="token number">47</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 使LocalStorage可从@Component组件访问</span>
<span class="token decorator"><span class="token at operator">@</span><span class="token function">Entry</span></span><span class="token punctuation">(</span>storage<span class="token punctuation">)</span>
<span class="token decorator"><span class="token at operator">@</span><span class="token function">Component</span></span>
struct CompA <span class="token punctuation">{</span>
  <span class="token comment">// @LocalStorageProp变量装饰器与LocalStorage中的&#39;PropA&#39;属性建立单向绑定</span>
  <span class="token decorator"><span class="token at operator">@</span><span class="token function">LocalStorageProp</span></span><span class="token punctuation">(</span><span class="token string">&#39;PropA&#39;</span><span class="token punctuation">)</span> storProp1<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>

  <span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">Column</span><span class="token punctuation">(</span><span class="token punctuation">{</span> space<span class="token operator">:</span> <span class="token number">15</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// 点击后从47开始加1，只改变当前组件显示的storProp1，不会同步到LocalStorage中</span>
      <span class="token function">Button</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Parent from LocalStorage </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>storProp1<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">onClick</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>storProp1 <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">)</span>
      <span class="token function">Child</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token decorator"><span class="token at operator">@</span><span class="token function">Component</span></span>
struct Child <span class="token punctuation">{</span>
  <span class="token comment">// @LocalStorageProp变量装饰器与LocalStorage中的&#39;PropA&#39;属性建立单向绑定</span>
  <span class="token decorator"><span class="token at operator">@</span><span class="token function">LocalStorageProp</span></span><span class="token punctuation">(</span><span class="token string">&#39;PropA&#39;</span><span class="token punctuation">)</span> storProp2<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>

  <span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">Column</span><span class="token punctuation">(</span><span class="token punctuation">{</span> space<span class="token operator">:</span> <span class="token number">15</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// 当CompA改变时，当前storProp2不会改变，显示47</span>
      <span class="token function">Text</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Parent from LocalStorage </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>storProp2<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>在多个视图中共享LocalStorage</strong></p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// EntryAbility.ts  </span>
<span class="token comment">// 可以在所属UIAbility中创建LocalStorage实例，并调用windowStage.loadContent。</span>
<span class="token keyword">import</span> UIAbility <span class="token keyword">from</span> <span class="token string">&#39;@ohos.app.ability.UIAbility&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> window <span class="token keyword">from</span> <span class="token string">&#39;@ohos.window&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">EntryAbility</span> <span class="token keyword">extends</span> <span class="token class-name">UIAbility</span> <span class="token punctuation">{</span>
  storage<span class="token operator">:</span> LocalStorage <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LocalStorage</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token string-property property">&#39;PropA&#39;</span><span class="token operator">:</span> <span class="token number">47</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">onWindowStageCreate</span><span class="token punctuation">(</span>windowStage<span class="token operator">:</span> window<span class="token punctuation">.</span>WindowStage<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    windowStage<span class="token punctuation">.</span><span class="token function">loadContent</span><span class="token punctuation">(</span><span class="token string">&#39;pages/Index&#39;</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>storage<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">//在UI页面通过GetShared接口获取在通过loadContent共享的LocalStorage实例。</span>
<span class="token keyword">let</span> storage <span class="token operator">=</span> LocalStorage<span class="token punctuation">.</span><span class="token function">GetShared</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token decorator"><span class="token at operator">@</span><span class="token function">Entry</span></span><span class="token punctuation">(</span>storage<span class="token punctuation">)</span>
<span class="token decorator"><span class="token at operator">@</span><span class="token function">Component</span></span>
struct CompA <span class="token punctuation">{</span>
  <span class="token comment">// can access LocalStorage instance using </span>
  <span class="token comment">// @LocalStorageLink/Prop decorated variables</span>
  <span class="token decorator"><span class="token at operator">@</span><span class="token function">LocalStorageLink</span></span><span class="token punctuation">(</span><span class="token string">&#39;PropA&#39;</span><span class="token punctuation">)</span> varA<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>

  <span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">Column</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">Text</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>varA<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fontSize</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="appstorage-应用全局的ui状态存储" tabindex="-1"><a class="header-anchor" href="#appstorage-应用全局的ui状态存储" aria-hidden="true">#</a> AppStorage：应用全局的UI状态存储</h5>`,17),Da=n("strong",null,"概念",-1),Fa={href:"https://developer.harmonyos.com/cn/docs/documentation/doc-guides-V3/arkts-appstorage-0000001524417209-V3#section676113134317",target:"_blank",rel:"noopener noreferrer"},Oa={href:"https://developer.harmonyos.com/cn/docs/documentation/doc-guides-V3/arkts-appstorage-0000001524417209-V3#section84115526424",target:"_blank",rel:"noopener noreferrer"},ja={href:"https://developer.huawei.com/consumer/cn/doc/development/harmonyos-guides-V3/arkts-persiststorage-0000001474017166-V3",target:"_blank",rel:"noopener noreferrer"},Ha={href:"https://developer.harmonyos.com/cn/docs/documentation/doc-guides-V3/arkts-appstorage-0000001524417209-V3#section676113134317",target:"_blank",rel:"noopener noreferrer"},Ra={href:"https://developer.harmonyos.com/cn/docs/documentation/doc-guides-V3/arkts-appstorage-0000001524417209-V3#section84115526424",target:"_blank",rel:"noopener noreferrer"},Wa=n("p",null,[s("②"),n("strong",null,[s("和"),n("code",null,"LocalStorage"),s("区别")])],-1),$a={href:"https://developer.huawei.com/consumer/cn/doc/development/harmonyos-guides-V3/arkts-persiststorage-0000001474017166-V3",target:"_blank",rel:"noopener noreferrer"},qa={href:"https://developer.huawei.com/consumer/cn/doc/development/harmonyos-guides-V3/arkts-environment-0000001473537710-V3",target:"_blank",rel:"noopener noreferrer"},Na={href:"https://developer.harmonyos.com/cn/docs/documentation/doc-guides-V3/arkts-appstorage-0000001524417209-V3#section676113134317",target:"_blank",rel:"noopener noreferrer"},Ma={href:"https://developer.harmonyos.com/cn/docs/documentation/doc-guides-V3/arkts-appstorage-0000001524417209-V3#section84115526424",target:"_blank",rel:"noopener noreferrer"},za=n("p",null,[n("code",null,"@StorageProp")],-1),Ga=n("ul",null,[n("li",null,"当@StorageProp(key)装饰的数值改变被观察到时，修改不会被同步回AppStorage对应属性键值key的属性中。"),n("li",null,"当前@StorageProp(key)单向绑定的数据会被修改，即仅限于当前组件的私有成员变量改变，其他的绑定该key的数据不会同步改变。"),n("li",null,"当@StorageProp(key)装饰的数据本身是状态变量，它的改变虽然不会同步回AppStorage中，但是会引起所属的自定义组件的重新渲染。"),n("li",null,"当AppStorage中key对应的属性发生改变时，会同步给所有@StorageProp(key)装饰的数据，@StorageProp(key)本地的修改将被覆盖。")],-1),Za=n("thead",null,[n("tr",null,[n("th",null,"@StorageProp变量装饰器"),n("th",null,"说明")])],-1),Ja=n("tr",null,[n("td",null,"装饰器参数"),n("td",null,"key：常量字符串，必填（字符串需要有引号）。")],-1),Ka=n("td",null,"允许装饰的变量类型",-1),Ya={href:"https://developer.harmonyos.com/cn/docs/documentation/doc-guides-V3/arkts-appstorage-0000001524417209-V3#section8970810185617",target:"_blank",rel:"noopener noreferrer"},Qa=n("tr",null,[n("td",null,"同步类型"),n("td",null,"单向同步：从AppStorage的对应属性到组件的状态变量。组件本地的修改是允许的，但是AppStorage中给定的属性一旦发生变化，将覆盖本地的修改。")],-1),Xa=n("tr",null,[n("td",null,"被装饰变量的初始值"),n("td",null,"必须指定，如果AppStorage实例中不存在属性，则作为初始化默认值，并存入AppStorage中。")],-1),nt=p("<table><thead><tr><th>@StorageProp变量装饰器传递/访问</th><th>说明</th></tr></thead><tbody><tr><td>从父节点初始化和更新</td><td>禁止，@StorageProp不支持从父节点初始化，只能AppStorage中key对应的属性初始化，如果没有对应key的话，将使用本地默认值初始化</td></tr><tr><td>初始化子节点</td><td>支持，可用于初始化@State、@Link、@Prop、@Provide。</td></tr><tr><td>是否支持组件外访问</td><td>否。</td></tr></tbody></table><p><code>@StorageLink(key)</code></p><ul><li>AppStorage中的修改发生后，该修改会被同步到所有绑定AppStorage对应key的属性上，包括单向（@StorageProp和通过Prop创建的单向绑定变量）、双向（@StorageLink和通过Link创建的双向绑定变量）变量和其他实例（比如PersistentStorage）。</li><li>当@StorageLink(key)装饰的数值改变被观察到时，修改将被同步回AppStorage对应属性键值key的属性中。</li><li>AppStorage中属性键值key对应的数据一旦改变，属性键值key绑定的所有的数据（包括双向@StorageLink和单向@StorageProp）都将同步修改；</li><li>当@StorageLink(key)装饰的数据本身是状态变量，它的改变不仅仅会同步回AppStorage中，<u>还会引起所属的自定义组件的重新渲染。</u></li></ul>",3),st=n("thead",null,[n("tr",null,[n("th",null,"@StorageLink变量装饰器"),n("th",null,"说明")])],-1),at=n("tr",null,[n("td",null,"装饰器参数"),n("td",null,"key：常量字符串，必填（字符串需要有引号）。")],-1),tt=n("td",null,"允许装饰的变量类型",-1),pt={href:"https://developer.harmonyos.com/cn/docs/documentation/doc-guides-V3/arkts-appstorage-0000001524417209-V3#section2040243611596",target:"_blank",rel:"noopener noreferrer"},et=n("tr",null,[n("td",null,"同步类型"),n("td",null,"双向同步：从AppStorage的对应属性到自定义组件，从自定义组件到AppStorage对应属性。")],-1),ot=n("tr",null,[n("td",null,"被装饰变量的初始值"),n("td",null,"必须指定，如果AppStorage实例中不存在属性，则作为初始化默认值，并存入AppStorage中。")],-1),ct=p(`<table><thead><tr><th>传递/访问</th><th>说明</th></tr></thead><tbody><tr><td>从父节点初始化和更新</td><td>禁止。</td></tr><tr><td>初始化子节点</td><td>支持，可用于初始化常规变量、@State、@Link、@Prop、@Provide。</td></tr><tr><td>是否支持组件外访问</td><td>否。</td></tr></tbody></table><p>③<strong>示例</strong></p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code>AppStorage<span class="token punctuation">.</span><span class="token function">SetOrCreate</span><span class="token punctuation">(</span><span class="token string">&#39;PropA&#39;</span><span class="token punctuation">,</span> <span class="token number">47</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">let</span> storage<span class="token operator">:</span> LocalStorage <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LocalStorage</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token string-property property">&#39;PropA&#39;</span><span class="token operator">:</span> <span class="token number">17</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> propA<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> AppStorage<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token string">&#39;PropA&#39;</span><span class="token punctuation">)</span> <span class="token comment">// propA in AppStorage == 47, propA in LocalStorage == 17</span>
<span class="token keyword">var</span> link1<span class="token operator">:</span> SubscribedAbstractProperty<span class="token operator">&lt;</span><span class="token builtin">number</span><span class="token operator">&gt;</span> <span class="token operator">=</span> AppStorage<span class="token punctuation">.</span><span class="token function">Link</span><span class="token punctuation">(</span><span class="token string">&#39;PropA&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// link1.get() == 47</span>
<span class="token keyword">var</span> link2<span class="token operator">:</span> SubscribedAbstractProperty<span class="token operator">&lt;</span><span class="token builtin">number</span><span class="token operator">&gt;</span> <span class="token operator">=</span> AppStorage<span class="token punctuation">.</span><span class="token function">Link</span><span class="token punctuation">(</span><span class="token string">&#39;PropA&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// link2.get() == 47</span>
<span class="token keyword">var</span> prop<span class="token operator">:</span> SubscribedAbstractProperty<span class="token operator">&lt;</span><span class="token builtin">number</span><span class="token operator">&gt;</span> <span class="token operator">=</span> AppStorage<span class="token punctuation">.</span><span class="token function">Prop</span><span class="token punctuation">(</span><span class="token string">&#39;PropA&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// prop.get() == 47</span>

link1<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token number">48</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// two-way sync: link1.get() == link2.get() == prop.get() == 48</span>
prop<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// one-way sync: prop.get() == 1; but link1.get() == link2.get() == 48</span>
link1<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token number">49</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// two-way sync: link1.get() == link2.get() == prop.get() == 49</span>

storage<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;PropA&#39;</span><span class="token punctuation">)</span> <span class="token comment">// == 17 </span>
storage<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&#39;PropA&#39;</span><span class="token punctuation">,</span> <span class="token number">101</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
storage<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;PropA&#39;</span><span class="token punctuation">)</span> <span class="token comment">// == 101</span>

AppStorage<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token string">&#39;PropA&#39;</span><span class="token punctuation">)</span> <span class="token comment">// == 49</span>
link1<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// == 49</span>
link2<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// == 49</span>
prop<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// == 49</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>@StorageLink变量装饰器与AppStorage配合使用，正如@LocalStorageLink与LocalStorage配合使用一样。此装饰器使用AppStorage中的属性创建双向数据同步。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code>AppStorage<span class="token punctuation">.</span><span class="token function">SetOrCreate</span><span class="token punctuation">(</span><span class="token string">&#39;PropA&#39;</span><span class="token punctuation">,</span> <span class="token number">47</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> storage <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LocalStorage</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token string-property property">&#39;PropA&#39;</span><span class="token operator">:</span> <span class="token number">48</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token decorator"><span class="token at operator">@</span><span class="token function">Entry</span></span><span class="token punctuation">(</span>storage<span class="token punctuation">)</span>
<span class="token decorator"><span class="token at operator">@</span><span class="token function">Component</span></span>
struct CompA <span class="token punctuation">{</span>
  <span class="token decorator"><span class="token at operator">@</span><span class="token function">StorageLink</span></span><span class="token punctuation">(</span><span class="token string">&#39;PropA&#39;</span><span class="token punctuation">)</span> storLink<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token decorator"><span class="token at operator">@</span><span class="token function">LocalStorageLink</span></span><span class="token punctuation">(</span><span class="token string">&#39;PropA&#39;</span><span class="token punctuation">)</span> localStorLink<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>

  <span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">Column</span><span class="token punctuation">(</span><span class="token punctuation">{</span> space<span class="token operator">:</span> <span class="token number">20</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">Text</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">From AppStorage </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>storLink<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">onClick</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>storLink <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">)</span>

      <span class="token function">Text</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">From LocalStorage </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>localStorLink<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">onClick</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>localStorLink <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>④<strong>持久化的限制</strong></p>`,6),it={href:"https://developer.huawei.com/consumer/cn/doc/development/harmonyos-guides-V3/arkts-persiststorage-0000001474017166-V3",target:"_blank",rel:"noopener noreferrer"},lt={href:"https://developer.huawei.com/consumer/cn/doc/development/harmonyos-guides-V3/arkts-environment-0000001473537710-V3",target:"_blank",rel:"noopener noreferrer"},ut={href:"https://developer.huawei.com/consumer/cn/doc/development/harmonyos-guides-V3/arkts-persiststorage-0000001474017166-V3#section15461219591",target:"_blank",rel:"noopener noreferrer"},rt=n("li",null,"如果在AppStorage中已经创建属性后，再调用Environment.EnvProp()创建同名的属性，会调用失败。因为AppStorage已经有同名属性，Environment环境变量不会再写入AppStorage中，所以建议AppStorage中属性不要使用Environment预置环境变量名。",-1),kt=p(`<div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">/*
该示例为反例。在调用PersistentStorage.PersistProp或者PersistProps之前使用接口访问AppStorage中的属性是错误的，因为这样的调用顺序会丢失上一次应用程序运行中的属性值：
应用在非首次运行时，先执行AppStorage.SetOrCreate(&#39;aProp&#39;, 47)：属性“aProp”在AppStorage中创建，其类型为number，其值设置为指定的默认值47。&#39;aProp&#39;是持久化的属性，所以会被写回PersistentStorage磁盘中，PersistentStorage存储的上次退出应用的值丢失。PersistentStorage.PersistProp(&#39;aProp&#39;, 48)：在PersistentStorage中查找到“aProp”，找到，值为47。
*/</span>
<span class="token keyword">let</span> aProp <span class="token operator">=</span> AppStorage<span class="token punctuation">.</span><span class="token function">SetOrCreate</span><span class="token punctuation">(</span><span class="token string">&#39;aProp&#39;</span><span class="token punctuation">,</span> <span class="token number">47</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
PersistentStorage<span class="token punctuation">.</span><span class="token function">PersistProp</span><span class="token punctuation">(</span><span class="token string">&#39;aProp&#39;</span><span class="token punctuation">,</span> <span class="token number">48</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="persistentstorage-持久化存储ui状态" tabindex="-1"><a class="header-anchor" href="#persistentstorage-持久化存储ui状态" aria-hidden="true">#</a> PersistentStorage：持久化存储UI状态</h5><p>①<strong>限制条件</strong></p><ul><li>类型限制:number, string, boolean, enum 等简单类型以及可以被<code>JSON.stringify()</code>和<code>JSON.parse()</code>重构的对象。例如Date, Map, Set等内置类型则不支持，以及对象的属性方法不支持持久化。不支持undefined 和 null 。</li><li>数据结构限制：不支持嵌套对象（对象数组，对象的属性是对象等）。因为目前框架无法检测AppStorage中嵌套对象（包括数组）值的变化，所以无法写回到PersistentStorage中。</li><li>体积限制（持久化数据是一个相对缓慢的操作，应用程序应避免以下情况：）：持久化大型数据集。持久化经常变化的变量。<strong>PersistentStorage的持久化变量最好是小于2kb的数据，不要大量的数据持久化，因为PersistentStorage写入磁盘的操作是同步的，大量的数据本地化读写会同步在UI线程中执行，影响UI渲染性能。如果开发者需要存储大量的数据，建议使用数据库api。</strong></li></ul><p>②<strong>示例</strong></p><p>下面代码执行流程</p><ol><li>调用<code>PersistProp</code>初始化<code>PersistentStorage</code>，首先查询在<code>PersistentStorage</code>本地文件中是否存在“aProp”，查询结果为不存在，因为应用是第一次安装。</li><li>接着查询属性“aProp”在AppStorage中是否存在，依旧不存在。</li><li>在AppStorge中创建名为“aProp”的number类型属性，属性初始值是定义的默认值47。</li><li>PersistentStorage将属性“aProp”和值47写入磁盘，AppStorage中“aProp”对应的值和其后续的更改将被持久化。</li><li>在Index组件中创建状态变量<code>@StorageLink(&#39;aProp&#39;) aProp</code>，和AppStorage中“aProp”双向绑定，在创建的过程中会在AppStorage中查找，成功找到“aProp”，所以使用其在AppStorage找到的值47。</li></ol><p>点击事件触发后</p><ol><li>状态变量@StorageLink(&#39;aProp&#39;) aProp改变，触发Text组件重新刷新。</li><li>@StorageLink装饰的变量是和AppStorage中建立双向同步的，所以@StorageLink(&#39;aProp&#39;) aProp的变化会被同步回AppStorage中。</li><li>AppStorage中“aProp”属性的改变会同步到所有绑定该“aProp”的单向或者双向变量，在本示例中没有其他的绑定“aProp”的变量。</li><li>因为“aProp”对应的属性已经被持久化，所以在AppStorage中“aProp”的改变会触发PersistentStorage将新的改变写入本地磁盘。</li></ol><p>后续启动应用</p><ul><li>执行PersistentStorage.PersistProp(&#39;aProp&#39;, 47)，在首先查询在PersistentStorage本地文件查询“aProp”属性，成功查询到。</li><li>将在PersistentStorage查询到的值写入AppStorage中。</li><li>在Index组件里，@StorageLink绑定的“aProp”为PersistentStorage写入AppStorage中的值，即为上一次退出引用存入的值。</li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">//初始化PersistentStorage：</span>
PersistentStorage<span class="token punctuation">.</span><span class="token function">PersistProp</span><span class="token punctuation">(</span><span class="token string">&#39;aProp&#39;</span><span class="token punctuation">,</span> <span class="token number">47</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//在AppStorage获取对应属性：</span>
AppStorage<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token string">&#39;aProp&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// returns 47</span>
<span class="token comment">//在组件内部定义：</span>
<span class="token decorator"><span class="token at operator">@</span><span class="token function">StorageLink</span></span><span class="token punctuation">(</span><span class="token string">&#39;aProp&#39;</span><span class="token punctuation">)</span> aProp<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> <span class="token number">48</span><span class="token punctuation">;</span>

<span class="token comment">// 例如</span>
PersistentStorage<span class="token punctuation">.</span><span class="token function">PersistProp</span><span class="token punctuation">(</span><span class="token string">&#39;aProp&#39;</span><span class="token punctuation">,</span> <span class="token number">47</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token decorator"><span class="token at operator">@</span><span class="token function">Entry</span></span>
<span class="token decorator"><span class="token at operator">@</span><span class="token function">Component</span></span>
struct Index <span class="token punctuation">{</span>
  <span class="token decorator"><span class="token at operator">@</span><span class="token function">State</span></span> message<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">&#39;Hello World&#39;</span>
  <span class="token decorator"><span class="token at operator">@</span><span class="token function">StorageLink</span></span><span class="token punctuation">(</span><span class="token string">&#39;aProp&#39;</span><span class="token punctuation">)</span> aProp<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> <span class="token number">48</span> 

  <span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">Row</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">Column</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">Text</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>message<span class="token punctuation">)</span>
        <span class="token comment">// 应用退出时会保存当前结果。重新启动后，会显示上一次的保存结果</span>
        <span class="token function">Text</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>aProp<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
          <span class="token punctuation">.</span><span class="token function">onClick</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>aProp <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>
          <span class="token punctuation">}</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="environment-设备环境查询" tabindex="-1"><a class="header-anchor" href="#environment-设备环境查询" aria-hidden="true">#</a> Environment：设备环境查询</h5><p>①<strong>使用场景</strong></p><p>开发者如果需要应用程序运行的设备的环境参数，以此来作出不同的场景判断，比如多语言，暗黑模式等，需要用到Environment设备环境查询。</p><p>②<strong>概念</strong></p><p>Environment是ArkUI框架在应用程序启动时创建的单例对象。它为AppStorage提供了一系列描述应用程序运行状态的属性。Environment的所有属性都是不可变的（即应用不可写入），所有的属性都是简单类型。</p><p>@StorageProp关联的环境参数可以在本地更改，但不能同步回AppStorage中，因为应用对环境变量参数是不可写的，只能在Environment中查询。</p><p>③示例</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// 将设备的语言code存入AppStorage，默认值为en</span>
Environment<span class="token punctuation">.</span><span class="token function">EnvProp</span><span class="token punctuation">(</span><span class="token string">&#39;languageCode&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;en&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//设备环境到Component的更新链：Environment --&gt; AppStorage --&gt;Component。</span>
<span class="token comment">// 将设备languageCode存入AppStorage中</span>
Environment<span class="token punctuation">.</span><span class="token function">EnvProp</span><span class="token punctuation">(</span><span class="token string">&#39;languageCode&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;en&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> enable <span class="token operator">=</span> AppStorage<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token string">&#39;languageCode&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token decorator"><span class="token at operator">@</span><span class="token function">Entry</span></span>
<span class="token decorator"><span class="token at operator">@</span><span class="token function">Component</span></span>
struct Index <span class="token punctuation">{</span>
  <span class="token decorator"><span class="token at operator">@</span><span class="token function">StorageProp</span></span><span class="token punctuation">(</span><span class="token string">&#39;languageCode&#39;</span><span class="token punctuation">)</span> languageCode<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">&#39;en&#39;</span><span class="token punctuation">;</span>

  <span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">Row</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">Column</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 输出当前设备的languageCode</span>
        <span class="token function">Text</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>languageCode<span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">//应用逻辑使用Environment-----------------------------------------</span>
<span class="token comment">// 使用Environment.EnvProp将设备运行languageCode存入AppStorage中；</span>
Environment<span class="token punctuation">.</span><span class="token function">EnvProp</span><span class="token punctuation">(</span><span class="token string">&#39;languageCode&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;en&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 从AppStorage获取单向绑定的languageCode的变量</span>
<span class="token keyword">const</span> lang<span class="token operator">:</span> SubscribedAbstractProperty<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">&gt;</span> <span class="token operator">=</span> AppStorage<span class="token punctuation">.</span><span class="token function">Prop</span><span class="token punctuation">(</span><span class="token string">&#39;languageCode&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span>lang<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">&#39;zh&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&#39;你好&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&#39;Hello!&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="渲染控制" tabindex="-1"><a class="header-anchor" href="#渲染控制" aria-hidden="true">#</a> 渲染控制</h3><h4 id="foreach循环渲染" tabindex="-1"><a class="header-anchor" href="#foreach循环渲染" aria-hidden="true">#</a> ForEach循环渲染</h4><p>①<strong>语法</strong></p><ul><li>第一个参数<code>arr</code>是渲染的数组</li><li>第二个参数<code>itemGenerator</code>是组件生成函数</li><li>第三个参数<code>keyGenerator</code>默认<code>(item: T, index: number) =&gt; { return index + &#39;__&#39; + JSON.stringify(index); }</code>。<strong>这个参数就是v-for的key</strong></li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token function">ForEach</span><span class="token punctuation">(</span>
  arr<span class="token operator">:</span> <span class="token builtin">Array</span><span class="token punctuation">,</span>
  <span class="token function-variable function">itemGenerator</span><span class="token operator">:</span> <span class="token punctuation">(</span>item<span class="token operator">:</span> <span class="token builtin">Array</span><span class="token punctuation">,</span> index<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token punctuation">,</span>
  keyGenerator<span class="token operator">?</span><span class="token operator">:</span> <span class="token punctuation">(</span>item<span class="token operator">:</span> <span class="token builtin">Array</span><span class="token punctuation">,</span> index<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=&gt;</span> <span class="token builtin">string</span>
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="lazyforeach-数据懒加载" tabindex="-1"><a class="header-anchor" href="#lazyforeach-数据懒加载" aria-hidden="true">#</a> LazyForEach：数据懒加载</h4><p>LazyForEach从提供的数据源中按需迭代数据，并在每次迭代过程中创建相应的组件。当LazyForEach在滚动容器中使用了，框架会根据滚动容器可视区域按需创建组件，当组件滑出可视区域外时，框架会进行组件销毁回收以降低内存占用。</p><p>①<strong>语法</strong></p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token function">LazyForEach</span><span class="token punctuation">(</span>
    dataSource<span class="token operator">:</span> IDataSource<span class="token punctuation">,</span>             <span class="token comment">// 需要进行数据迭代的数据源 </span>
    <span class="token function-variable function">itemGenerator</span><span class="token operator">:</span> <span class="token punctuation">(</span>item<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token punctuation">,</span>  <span class="token comment">// 子组件生成函数</span>
    keyGenerator<span class="token operator">?</span><span class="token operator">:</span> <span class="token punctuation">(</span>item<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">string</span> <span class="token comment">// (可选) .键值生成函数</span>
<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span>
<span class="token comment">//IDataSource类型说明</span>
<span class="token keyword">interface</span> <span class="token class-name">IDataSource</span> <span class="token punctuation">{</span>
    <span class="token function">totalCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span> <span class="token comment">// 获得数据总数</span>
    <span class="token function">getData</span><span class="token punctuation">(</span>index<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">;</span> <span class="token comment">// 获取索引值对应的数据</span>
    <span class="token function">registerDataChangeListener</span><span class="token punctuation">(</span>listener<span class="token operator">:</span> DataChangeListener<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span> <span class="token comment">// 注册数据改变的监听器</span>
    <span class="token function">unregisterDataChangeListener</span><span class="token punctuation">(</span>listener<span class="token operator">:</span> DataChangeListener<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span> <span class="token comment">// 注销数据改变的监听器</span>
<span class="token punctuation">}</span>
<span class="token comment">//DataChangeListener类型说明</span>
<span class="token keyword">interface</span> <span class="token class-name">DataChangeListener</span> <span class="token punctuation">{</span>
    <span class="token function">onDataReloaded</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span> <span class="token comment">// 重新加载数据时调用</span>
    <span class="token function">onDataAdded</span><span class="token punctuation">(</span>index<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span> <span class="token comment">// 添加数据时调用</span>
    <span class="token function">onDataMoved</span><span class="token punctuation">(</span>from<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> to<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span> <span class="token comment">// 数据移动起始位置与数据移动目标位置交换时调用</span>
    <span class="token function">onDataDeleted</span><span class="token punctuation">(</span>index<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span> <span class="token comment">// 删除数据时调用</span>
    <span class="token function">onDataChanged</span><span class="token punctuation">(</span>index<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span> <span class="token comment">// 改变数据时调用</span>
    <span class="token function">onDataAdd</span><span class="token punctuation">(</span>index<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span> <span class="token comment">// 添加数据时调用</span>
    <span class="token function">onDataMove</span><span class="token punctuation">(</span>from<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> to<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span> <span class="token comment">// 数据移动起始位置与数据移动目标位置交换时调用</span>
    <span class="token function">onDataDelete</span><span class="token punctuation">(</span>index<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span> <span class="token comment">// 删除数据时调用</span>
    <span class="token function">onDataChange</span><span class="token punctuation">(</span>index<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span> <span class="token comment">// 改变数据时调用</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>②<strong>使用限制</strong></p><ul><li>LazyForEach必须在容器组件内使用，<strong>仅有List、Grid以及Swiper组件支持数据懒加载</strong>（可配置cachedCount属性，即只加载可视部分以及其前后少量数据用于缓冲），其他组件仍然是一次性加载所有的数据。</li><li>LazyForEach在每次迭代中，必须创建且只允许创建一个子组件。生成的子组件必须是允许包含在LazyForEach父容器组件中的子组件。</li><li>允许LazyForEach包含在if/else条件渲染语句中，也允许LazyForEach中出现if/else条件渲染语句。</li><li>键值生成器要保证key唯一。</li><li>LazyForEach必须使用DataChangeListener对象来进行更新，<strong>第一个参数dataSource使用状态变量时，状态变量改变不会触发LazyForEach的UI刷新。</strong></li><li>为了高性能渲染，通过DataChangeListener对象的onDataChange方法来更新UI时，需要生成不同于原来的键值来触发组件刷新。</li><li>itemGenerator函数的调用顺序不一定和数据源中的数据项相同，在开发过程中不要假设itemGenerator和keyGenerator函数是否执行及其执行顺序。</li></ul><p>③<strong>示例</strong></p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">class</span> <span class="token class-name">BasicDataSource</span> <span class="token keyword">implements</span> <span class="token class-name">IDataSource</span> <span class="token punctuation">{</span>
  <span class="token keyword">private</span> listeners<span class="token operator">:</span> DataChangeListener<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

  <span class="token keyword">public</span> <span class="token function">totalCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">public</span> <span class="token function">getData</span><span class="token punctuation">(</span>index<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">any</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token function">registerDataChangeListener</span><span class="token punctuation">(</span>listener<span class="token operator">:</span> DataChangeListener<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>listeners<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>listener<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&#39;add listener&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>listeners<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>listener<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token function">unregisterDataChangeListener</span><span class="token punctuation">(</span>listener<span class="token operator">:</span> DataChangeListener<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> pos <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>listeners<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>listener<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>pos <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&#39;remove listener&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>listeners<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>pos<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token function">notifyDataReload</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>listeners<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>listener <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      listener<span class="token punctuation">.</span><span class="token function">onDataReloaded</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token function">notifyDataAdd</span><span class="token punctuation">(</span>index<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>listeners<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>listener <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      listener<span class="token punctuation">.</span><span class="token function">onDataAdd</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token function">notifyDataChange</span><span class="token punctuation">(</span>index<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>listeners<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>listener <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      listener<span class="token punctuation">.</span><span class="token function">onDataChange</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token function">notifyDataDelete</span><span class="token punctuation">(</span>index<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>listeners<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>listener <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      listener<span class="token punctuation">.</span><span class="token function">onDataDelete</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token function">notifyDataMove</span><span class="token punctuation">(</span>from<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> to<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>listeners<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>listener <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      listener<span class="token punctuation">.</span><span class="token function">onDataMove</span><span class="token punctuation">(</span>from<span class="token punctuation">,</span> to<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">MyDataSource</span> <span class="token keyword">extends</span> <span class="token class-name">BasicDataSource</span> <span class="token punctuation">{</span>
  <span class="token keyword">private</span> dataArray<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

  <span class="token keyword">public</span> <span class="token function">totalCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>dataArray<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">public</span> <span class="token function">getData</span><span class="token punctuation">(</span>index<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">any</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>dataArray<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">public</span> <span class="token function">addData</span><span class="token punctuation">(</span>index<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> data<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>dataArray<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">notifyDataAdd</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">public</span> <span class="token function">pushData</span><span class="token punctuation">(</span>data<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>dataArray<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">notifyDataAdd</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>dataArray<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token decorator"><span class="token at operator">@</span><span class="token function">Entry</span></span>
<span class="token decorator"><span class="token at operator">@</span><span class="token function">Component</span></span>
struct MyComponent <span class="token punctuation">{</span>
  <span class="token keyword">private</span> data<span class="token operator">:</span> MyDataSource <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
  <span class="token function">aboutToAppear</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span> i <span class="token operator">&gt;=</span> <span class="token number">80</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span><span class="token function">pushData</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Hello </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>i<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">List</span><span class="token punctuation">(</span><span class="token punctuation">{</span> space<span class="token operator">:</span> <span class="token number">3</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">LazyForEach</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">,</span> <span class="token punctuation">(</span>item<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token function">ListItem</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token function">Row</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">Text</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fontSize</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span>
              <span class="token punctuation">.</span><span class="token function">onAppear</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
                <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;appear:&quot;</span> <span class="token operator">+</span> item<span class="token punctuation">)</span>
              <span class="token punctuation">}</span><span class="token punctuation">)</span>
          <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">margin</span><span class="token punctuation">(</span><span class="token punctuation">{</span> left<span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span> right<span class="token operator">:</span> <span class="token number">10</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
        <span class="token punctuation">.</span><span class="token function">onClick</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
          <span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span><span class="token function">pushData</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Hello </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span><span class="token function">totalCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span> item <span class="token operator">=&gt;</span> item<span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">cachedCount</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="uiablitity组件" tabindex="-1"><a class="header-anchor" href="#uiablitity组件" aria-hidden="true">#</a> UIAblitity组件</h2><p>①<strong>概念</strong></p><p>UIAbility组件是一种包含UI界面的应用组件，主要用于和用户交互。</p><p><u>每一个UIAbility实例都对应一个最近任务列表的任务。</u></p><p><strong>交互方式</strong></p><ul><li>比如用户点击应用图标进入应用</li><li>最近应用列表中进入应用</li></ul><p>UIAbility组件是系统调度的基本单元，为应用提供绘制界面的窗口；一个UIAbility组件中可以通过多个页面来实现一个功能模块。每一个UIAbility组件实例，都对应于一个最近任务列表中的任务。</p><p>②<strong>配置</strong></p>`,41),dt={href:"https://developer.harmonyos.com/cn/docs/documentation/doc-guides-V3/module-configuration-file-0000001427744540-V3",target:"_blank",rel:"noopener noreferrer"},vt={href:"https://developer.harmonyos.com/cn/docs/documentation/doc-guides-V3/module-configuration-file-0000001427744540-V3#ZH-CN_TOPIC_0000001573929365__abilities%E6%A0%87%E7%AD%BE",target:"_blank",rel:"noopener noreferrer"},mt=p(`<div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token punctuation">{</span>
  <span class="token string-property property">&quot;module&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...</span>
    <span class="token string-property property">&quot;abilities&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
      <span class="token punctuation">{</span>
        <span class="token string-property property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;EntryAbility&quot;</span><span class="token punctuation">,</span> <span class="token comment">// UIAbility组件的名称</span>
        <span class="token string-property property">&quot;srcEntrance&quot;</span><span class="token operator">:</span> <span class="token string">&quot;./ets/entryability/EntryAbility.ts&quot;</span><span class="token punctuation">,</span> <span class="token comment">// UIAbility组件的代码路径</span>
        <span class="token string-property property">&quot;description&quot;</span><span class="token operator">:</span> <span class="token string">&quot;$string:EntryAbility_desc&quot;</span><span class="token punctuation">,</span> <span class="token comment">// UIAbility组件的描述信息</span>
        <span class="token string-property property">&quot;icon&quot;</span><span class="token operator">:</span> <span class="token string">&quot;$media:icon&quot;</span><span class="token punctuation">,</span> <span class="token comment">// UIAbility组件的图标</span>
        <span class="token string-property property">&quot;label&quot;</span><span class="token operator">:</span> <span class="token string">&quot;$string:EntryAbility_label&quot;</span><span class="token punctuation">,</span> <span class="token comment">// UIAbility组件的标签</span>
        <span class="token string-property property">&quot;startWindowIcon&quot;</span><span class="token operator">:</span> <span class="token string">&quot;$media:icon&quot;</span><span class="token punctuation">,</span> <span class="token comment">// UIAbility组件启动页面图标资源文件的索引</span>
        <span class="token string-property property">&quot;startWindowBackground&quot;</span><span class="token operator">:</span> <span class="token string">&quot;$color:start_window_background&quot;</span><span class="token punctuation">,</span> <span class="token comment">// UIAbility组件启动页面背景颜色资源文件的索引</span>
        <span class="token comment">// ...</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">]</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="uiability组件生命周期" tabindex="-1"><a class="header-anchor" href="#uiability组件生命周期" aria-hidden="true">#</a> UIAbility组件生命周期</h3><p>UIAbility的生命周期包括Create、Foreground、Background、Destroy四个状态，如下图所示。</p><p><img src="`+g+'" alt=""></p><p><img src="'+h+`" alt=""></p><p>①<strong>create</strong></p><p>Create状态为在应用加载过程中，UIAbility实例创建完成时触发，系统会调用onCreate()回调。可以在该回调中进行应用初始化操作，例如变量定义资源加载等，用于后续的UI界面展示。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> UIAbility <span class="token keyword">from</span> <span class="token string">&#39;@ohos.app.ability.UIAbility&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> Window <span class="token keyword">from</span> <span class="token string">&#39;@ohos.window&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">EntryAbility</span> <span class="token keyword">extends</span> <span class="token class-name">UIAbility</span> <span class="token punctuation">{</span>
    <span class="token function">onCreate</span><span class="token punctuation">(</span>want<span class="token punctuation">,</span> launchParam<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 应用初始化</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// ...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>②<strong>WindowStageCreate和WindowStageDestroy状态</strong></p><p>UIAbility实例创建完成之后，在进入Foreground之前，系统会创建一个WindowStage。WindowStage创建完成后会进入onWindowStageCreate()回调，可以在该回调中设置UI界面加载、设置WindowStage的事件订阅。</p>`,10),bt={href:"https://developer.harmonyos.com/cn/docs/documentation/doc-references-V3/js-apis-window-0000001477981397-V3#ZH-CN_TOPIC_0000001573929313__windowstageeventtype9",target:"_blank",rel:"noopener noreferrer"},gt=p(`<div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> UIAbility <span class="token keyword">from</span> <span class="token string">&#39;@ohos.app.ability.UIAbility&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> Window <span class="token keyword">from</span> <span class="token string">&#39;@ohos.window&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">EntryAbility</span> <span class="token keyword">extends</span> <span class="token class-name">UIAbility</span> <span class="token punctuation">{</span>
    <span class="token function">onWindowStageCreate</span><span class="token punctuation">(</span>windowStage<span class="token operator">:</span> Window<span class="token punctuation">.</span>WindowStage<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 设置WindowStage的事件订阅（获焦/失焦、可见/不可见）</span>

        <span class="token comment">// 设置UI界面加载</span>
        windowStage<span class="token punctuation">.</span><span class="token function">loadContent</span><span class="token punctuation">(</span><span class="token string">&#39;pages/Index&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>err<span class="token punctuation">,</span> data<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
            <span class="token comment">// ...</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对应于onWindowStageCreate()回调。在UIAbility实例销毁之前，则会先进入onWindowStageDestroy()回调，可以在该回调中释放UI界面资源。例如在onWindowStageDestroy()中注销获焦/失焦等WindowStage事件。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> UIAbility <span class="token keyword">from</span> <span class="token string">&#39;@ohos.app.ability.UIAbility&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> Window <span class="token keyword">from</span> <span class="token string">&#39;@ohos.window&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">EntryAbility</span> <span class="token keyword">extends</span> <span class="token class-name">UIAbility</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...</span>

    <span class="token function">onWindowStageDestroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 释放UI界面资源</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>③<strong>Foreground和Background状态</strong></p><p>Foreground和Background状态分别在UIAbility实例切换至前台和切换至后台时触发，对应于onForeground()回调和onBackground()回调。</p><p>onForeground()回调，在UIAbility的UI界面可见之前，如UIAbility切换至前台时触发。可以在onForeground()回调中申请系统需要的资源，或者重新申请在onBackground()中释放的资源。</p><p>onBackground()回调，在UIAbility的UI界面完全不可见之后，如UIAbility切换至后台时候触发。可以在onBackground()回调中释放UI界面不可见时无用的资源，或者在此回调中执行较为耗时的操作，例如状态保存等。</p><p>例如应用在使用过程中需要使用用户定位时，假设应用已获得用户的定位权限授权。在UI界面显示之前，可以在onForeground()回调中开启定位功能，从而获取到当前的位置信息。</p><p>当应用切换到后台状态，可以在onBackground()回调中停止定位功能，以节省系统的资源消耗。</p><p>④<strong>Destroy状态</strong></p><p>Destroy状态在UIAbility实例销毁时触发。可以在onDestroy()回调中进行系统资源的释放、数据的保存等操作。</p><p>例如调用terminateSelf()方法停止当前UIAbility实例，从而完成UIAbility实例的销毁；或者用户使用最近任务列表关闭该UIAbility实例，完成UIAbility的销毁。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> UIAbility <span class="token keyword">from</span> <span class="token string">&#39;@ohos.app.ability.UIAbility&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> Window <span class="token keyword">from</span> <span class="token string">&#39;@ohos.window&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">EntryAbility</span> <span class="token keyword">extends</span> <span class="token class-name">UIAbility</span> <span class="token punctuation">{</span>
    <span class="token function">onDestroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 系统资源的释放、数据的保存等</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="uiability组件启动模式" tabindex="-1"><a class="header-anchor" href="#uiability组件启动模式" aria-hidden="true">#</a> UIAbility组件启动模式</h3><p>UIAbility的启动模式是指UIAbility实例在启动时的不同呈现状态。针对不同的业务场景，系统提供了三种启动模式：</p>`,15),ht={href:"https://developer.harmonyos.com/cn/docs/documentation/doc-guides-V3/uiability-launch-type-0000001428061476-V3#ZH-CN_TOPIC_0000001523489150__singleton%E5%90%AF%E5%8A%A8%E6%A8%A1%E5%BC%8F",target:"_blank",rel:"noopener noreferrer"},ft={href:"https://developer.harmonyos.com/cn/docs/documentation/doc-guides-V3/uiability-launch-type-0000001428061476-V3#ZH-CN_TOPIC_0000001523489150__standard%E5%90%AF%E5%8A%A8%E6%A8%A1%E5%BC%8F",target:"_blank",rel:"noopener noreferrer"},yt={href:"https://developer.harmonyos.com/cn/docs/documentation/doc-guides-V3/uiability-launch-type-0000001428061476-V3#ZH-CN_TOPIC_0000001523489150__specified%E5%90%AF%E5%8A%A8%E6%A8%A1%E5%BC%8F",target:"_blank",rel:"noopener noreferrer"},_t={href:"https://developer.harmonyos.com/cn/docs/documentation/doc-guides-V3/module-configuration-file-0000001427744540-V3",target:"_blank",rel:"noopener noreferrer"},wt=n("code",null,'"launchType"',-1),St=p(`<div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token punctuation">{</span>
  <span class="token string-property property">&quot;module&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...</span>
    <span class="token string-property property">&quot;abilities&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
      <span class="token punctuation">{</span>
        <span class="token string-property property">&quot;launchType&quot;</span><span class="token operator">:</span> <span class="token string">&quot;singleton&quot;</span><span class="token punctuation">,</span>
        <span class="token comment">// ...</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">]</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>①<strong>singleton启动模式</strong></p><p>singleton启动模式为单实例模式，也是默认情况下的启动模式。每次调用startAbility()方法时，如果应用进程中该类型的UIAbility实例已经存在，则复用系统中的UIAbility实例。系统中只存在唯一一个该UIAbility实例，即在最近任务列表中只存在一个该类型的UIAbility实例。</p>`,3),Ct={class:"custom-container tip"},At=n("p",{class:"custom-container-title"},"TIP",-1),Pt={href:"https://developer.harmonyos.com/cn/docs/documentation/doc-references-V3/js-apis-app-ability-uiability-0000001493584184-V3#ZH-CN_TOPIC_0000001523808838__abilityonnewwant",target:"_blank",rel:"noopener noreferrer"},xt=p('<p><img src="https://alliance-communityfile-drcn.dbankcdn.com/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20231121183810.23050975485509524196505067887578:50001231000000:2800:AB1516C24A70A0C4176DBAB66DF8D651BD7583C67EEBF3811A177D26B1CD314D.png?needInitFileName=true?needInitFileName=true" alt=""></p><p>②<strong>standard启动模式</strong></p><p><img src="https://alliance-communityfile-drcn.dbankcdn.com/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20231121183810.48737174172672515689281644114082:50001231000000:2800:D291E6C7A2F54A954401B90DD335FB2A0F6AD8DD36376383ACBF525414728E85.png?needInitFileName=true?needInitFileName=true" alt=""></p><p>standard启动模式为标准实例模式，每次调用startAbility()方法时，都会在应用进程中创建一个新的该类型UIAbility实例。即在最近任务列表中可以看到有多个该类型的UIAbility实例。这种情况下可以将UIAbility配置为standard（标准实例模式）。</p><p>③<strong>specified启动模式</strong></p><p>specified启动模式为指定实例模式，针对一些特殊场景使用（例如文档应用中每次新建文档希望都能新建一个文档实例，重复打开一个已保存的文档希望打开的都是同一个文档实例）。</p><p>在UIAbility实例创建之前，允许开发者为该实例创建一个唯一的字符串Key，创建的UIAbility实例绑定Key之后，后续每次调用startAbility()方法时，都会询问应用使用哪个Key对应的UIAbility实例来响应startAbility()请求。运行时由UIAbility内部业务决定是否创建多实例，如果匹配有该UIAbility实例的Key，则直接拉起与之绑定的UIAbility实例，否则创建一个新的UIAbility实例。</p><p><img src="https://alliance-communityfile-drcn.dbankcdn.com/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20231121183810.01762924960314926456985029146411:50001231000000:2800:F262AA8A0559B6938C9223C7EA3979142760C228F21909E1C7BBE9ECC91050A8.png?needInitFileName=true?needInitFileName=true" alt=""></p><p>例如有两个UIAbility：EntryAbility和FuncAbility，FuncAbility配置为specified启动模式，需要从EntryAbility的页面中启动FuncAbility。</p>',9),It={href:"https://developer.harmonyos.com/cn/docs/documentation/doc-guides-V3/module-configuration-file-0000001427744540-V3",target:"_blank",rel:"noopener noreferrer"},Lt=p(`<div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;module&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...</span>
    <span class="token property">&quot;abilities&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
      <span class="token punctuation">{</span>
        <span class="token property">&quot;launchType&quot;</span><span class="token operator">:</span> <span class="token string">&quot;specified&quot;</span><span class="token punctuation">,</span>
        <span class="token comment">// ...</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">]</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),Vt=p(`<li><p>在EntryAbility中，调用startAbility()方法时，在want参数中，增加一个自定义参数来区别UIAbility实例，例如增加一个&quot;instanceKey&quot;自定义参数。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// 在启动指定实例模式的UIAbility时，给每一个UIAbility实例配置一个独立的Key标识</span>
<span class="token comment">// 例如在文档使用场景中，可以用文档路径作为Key标识</span>
<span class="token keyword">function</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...</span>
<span class="token punctuation">}</span>

<span class="token keyword">let</span> want <span class="token operator">=</span> <span class="token punctuation">{</span>
    deviceId<span class="token operator">:</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">,</span> <span class="token comment">// deviceId为空表示本设备</span>
    bundleName<span class="token operator">:</span> <span class="token string">&#39;com.example.myapplication&#39;</span><span class="token punctuation">,</span>
    abilityName<span class="token operator">:</span> <span class="token string">&#39;FuncAbility&#39;</span><span class="token punctuation">,</span>
    moduleName<span class="token operator">:</span> <span class="token string">&#39;module1&#39;</span><span class="token punctuation">,</span> <span class="token comment">// moduleName非必选</span>
    parameters<span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token comment">// 自定义信息</span>
        instanceKey<span class="token operator">:</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
<span class="token comment">// context为调用方UIAbility的AbilityContext</span>
<span class="token keyword">this</span><span class="token punctuation">.</span>context<span class="token punctuation">.</span><span class="token function">startAbility</span><span class="token punctuation">(</span>want<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li>`,1),Bt={href:"https://developer.harmonyos.com/cn/docs/documentation/doc-references-V3/js-apis-app-ability-abilitystage-0000001493424312-V3#ZH-CN_TOPIC_0000001574088265__abilitystageonacceptwant",target:"_blank",rel:"noopener noreferrer"},Ut={href:"https://developer.harmonyos.com/cn/docs/documentation/doc-references-V3/js-apis-app-ability-abilitystage-0000001493424312-V3#ZH-CN_TOPIC_0000001574088265__abilitystageonacceptwant",target:"_blank",rel:"noopener noreferrer"},Tt=p(`<div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> AbilityStage <span class="token keyword">from</span> <span class="token string">&#39;@ohos.app.ability.AbilityStage&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">MyAbilityStage</span> <span class="token keyword">extends</span> <span class="token class-name">AbilityStage</span> <span class="token punctuation">{</span>
    <span class="token function">onAcceptWant</span><span class="token punctuation">(</span>want<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>
        <span class="token comment">// 在被调用方的AbilityStage中，针对启动模式为specified的UIAbility返回一个UIAbility实例对应的一个Key值</span>
        <span class="token comment">// 当前示例指的是module1 Module的FuncAbility</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>want<span class="token punctuation">.</span>abilityName <span class="token operator">===</span> <span class="token string">&#39;FuncAbility&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 返回的字符串Key标识为自定义拼接的字符串内容</span>
            <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">ControlModule_EntryAbilityInstance_</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>want<span class="token punctuation">.</span>parameters<span class="token punctuation">.</span>instanceKey<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">return</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>例如在文档应用中，可以对不同的文档实例内容绑定不同的Key值。当每次新建文档的时候，可以传入不同的新Key值（如可以将文件的路径作为一个Key标识），此时AbilityStage中启动UIAbility时都会创建一个新的UIAbility实例；当新建的文档保存之后，回到桌面，或者新打开一个已保存的文档，回到桌面，此时再次打开该已保存的文档，此时AbilityStage中再次启动该UIAbility时，打开的仍然是之前原来已保存的文档界面。</p><p>以如下步骤所示进行举例说明。</p><ol><li>打开文件A，对应启动一个新的UIAbility实例，例如启动“UIAbility实例1”。</li><li>在最近任务列表中关闭文件A的进程，此时UIAbility实例1被销毁，回到桌面，再次打开文件A，此时对应启动一个新的UIAbility实例，例如启动“UIAbility实例2”。</li><li>回到桌面，打开文件B，此时对应启动一个新的UIAbility实例，例如启动“UIAbility实例3”。</li><li>回到桌面，再次打开文件A，此时对应启动的还是之前的“UIAbility实例2”。</li></ol>`,4),Et=n("h2",{id:"路由",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#路由","aria-hidden":"true"},"#"),s(" 路由")],-1),Dt=n("p",null,"在entry/configuration/module.json5文件下定义页面信息",-1),Ft=n("h3",{id:"页面跳转和传参",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#页面跳转和传参","aria-hidden":"true"},"#"),s(" 页面跳转和传参")],-1),Ot=n("p",null,[s("在使用页面路由Router相关功能之前，需要在代码中先导入Router模块。"),n("code",null,"import router from '@ohos.router';")],-1),jt={href:"https://developer.harmonyos.com/cn/docs/documentation/doc-references-V3/js-apis-router-0000001478061893-V3#ZH-CN_TOPIC_0000001523808578__routerpushurl9",target:"_blank",rel:"noopener noreferrer"},Ht={href:"https://developer.harmonyos.com/cn/docs/documentation/doc-references-V3/js-apis-router-0000001478061893-V3#ZH-CN_TOPIC_0000001523808578__routerreplaceurl9",target:"_blank",rel:"noopener noreferrer"},Rt={href:"https://developer.harmonyos.com/cn/docs/documentation/doc-references-V3/js-apis-router-0000001478061893-V3#ZH-CN_TOPIC_0000001523808578__routerback",target:"_blank",rel:"noopener noreferrer"},Wt=n("li",null,"router.replaceUrl()：目标页会替换当前页，并销毁当前页。这样可以释放当前页的资源，并且无法返回到当前页。",-1),$t={class:"custom-container tip"},qt=n("p",{class:"custom-container-title"},"TIP",-1),Nt={href:"https://developer.harmonyos.com/cn/docs/documentation/doc-references-V3/js-apis-router-0000001478061893-V3#ZH-CN_TOPIC_0000001523808578__routerclear",target:"_blank",rel:"noopener noreferrer"},Mt=p(`<p>②<strong>示例</strong></p><p>场景一：有一个主页（Home）和一个详情页（Detail），希望从主页点击一个商品，跳转到详情页。同时，需要保留主页在页面栈中，以便返回时恢复状态。这种场景下，可以使用pushUrl()方法，并且使用Standard实例模式（或者省略）。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// 在Home页面中</span>
<span class="token keyword">function</span> <span class="token function">onJumpClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>
  router<span class="token punctuation">.</span><span class="token function">pushUrl</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    url<span class="token operator">:</span> <span class="token string">&#39;pages/Detail&#39;</span> <span class="token comment">// 目标url</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> router<span class="token punctuation">.</span>RouterMode<span class="token punctuation">.</span>Standard<span class="token punctuation">,</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Invoke pushUrl failed, code is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>err<span class="token punctuation">.</span>code<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">, message is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>err<span class="token punctuation">.</span>message<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&#39;Invoke pushUrl succeeded.&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>场景二：有一个登录页（Login）和一个个人中心页（Profile），希望从登录页成功登录后，跳转到个人中心页。同时，销毁登录页，在返回时直接退出应用。这种场景下，可以使用replaceUrl()方法，并且使用Standard实例模式（或者省略）。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// 在Login页面中</span>
<span class="token keyword">function</span> <span class="token function">onJumpClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>
  router<span class="token punctuation">.</span><span class="token function">replaceUrl</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    url<span class="token operator">:</span> <span class="token string">&#39;pages/Profile&#39;</span> <span class="token comment">// 目标url</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> router<span class="token punctuation">.</span>RouterMode<span class="token punctuation">.</span>Standard<span class="token punctuation">,</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Invoke replaceUrl failed, code is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>err<span class="token punctuation">.</span>code<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">, message is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>err<span class="token punctuation">.</span>message<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&#39;Invoke replaceUrl succeeded.&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>场景三：有一个设置页（Setting）和一个主题切换页（Theme），希望从设置页点击主题选项，跳转到主题切换页。同时，需要保证每次只有一个主题切换页存在于页面栈中，在返回时直接回到设置页。这种场景下，可以使用pushUrl()方法，并且使用Single实例模式。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// 在Setting页面中</span>
<span class="token keyword">function</span> <span class="token function">onJumpClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>
  router<span class="token punctuation">.</span><span class="token function">pushUrl</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    url<span class="token operator">:</span> <span class="token string">&#39;pages/Theme&#39;</span> <span class="token comment">// 目标url</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> router<span class="token punctuation">.</span>RouterMode<span class="token punctuation">.</span>Single<span class="token punctuation">,</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Invoke pushUrl failed, code is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>err<span class="token punctuation">.</span>code<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">, message is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>err<span class="token punctuation">.</span>message<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&#39;Invoke pushUrl succeeded.&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>场景四：有一个搜索结果列表页（SearchResult）和一个搜索结果详情页（SearchDetail），希望从搜索结果列表页点击某一项结果，跳转到搜索结果详情页。同时，如果该结果已经被查看过，则不需要再新建一个详情页，而是直接跳转到已经存在的详情页。这种场景下，可以使用replaceUrl()方法，并且使用Single实例模式。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// 在SearchResult页面中</span>
<span class="token keyword">function</span> <span class="token function">onJumpClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>
  router<span class="token punctuation">.</span><span class="token function">replaceUrl</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    url<span class="token operator">:</span> <span class="token string">&#39;pages/SearchDetail&#39;</span> <span class="token comment">// 目标url</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> router<span class="token punctuation">.</span>RouterMode<span class="token punctuation">.</span>Single<span class="token punctuation">,</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Invoke replaceUrl failed, code is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>err<span class="token punctuation">.</span>code<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">, message is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>err<span class="token punctuation">.</span>message<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&#39;Invoke replaceUrl succeeded.&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>场景5，携带参数,如果需要在跳转时传递一些数据给目标页，则可以在调用Router模块的方法时，添加一个params属性，并指定一个对象作为参数</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">class</span> <span class="token class-name">DataModelInfo</span> <span class="token punctuation">{</span>
  age<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">DataModel</span> <span class="token punctuation">{</span>
  id<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
  info<span class="token operator">:</span> DataModelInfo<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">onJumpClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>
  <span class="token comment">// 在Home页面中</span>
  <span class="token keyword">let</span> paramsInfo<span class="token operator">:</span> DataModel <span class="token operator">=</span> <span class="token punctuation">{</span>
    id<span class="token operator">:</span> <span class="token number">123</span><span class="token punctuation">,</span>
    info<span class="token operator">:</span> <span class="token punctuation">{</span>
      age<span class="token operator">:</span> <span class="token number">20</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>

  router<span class="token punctuation">.</span><span class="token function">pushUrl</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    url<span class="token operator">:</span> <span class="token string">&#39;pages/Detail&#39;</span><span class="token punctuation">,</span> <span class="token comment">// 目标url</span>
    params<span class="token operator">:</span> paramsInfo <span class="token comment">// 添加params属性，传递自定义参数</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Invoke pushUrl failed, code is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>err<span class="token punctuation">.</span>code<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">, message is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>err<span class="token punctuation">.</span>message<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&#39;Invoke pushUrl succeeded.&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">//在目标页中，在需要获取参数的位置调用router.getParams()方法即可，例如在onPageShow()生命周期回调中：</span>
<span class="token function">onPageShow</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> params <span class="token operator">=</span> router<span class="token punctuation">.</span><span class="token function">getParams</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 获取传递过来的参数对象</span>
  <span class="token keyword">const</span> info <span class="token operator">=</span> params<span class="token punctuation">[</span><span class="token string">&#39;info&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 获取info属性的值</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="询问弹窗" tabindex="-1"><a class="header-anchor" href="#询问弹窗" aria-hidden="true">#</a> 询问弹窗</h3><p>在开发应用时，为了避免用户误操作或者丢失数据，有时候需要在用户从一个页面返回到另一个页面之前，弹出一个询问框，让用户确认是否要执行这个操作。</p><p><img src="https://alliance-communityfile-drcn.dbankcdn.com/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20231121183906.55033134735560264295205914009821:50001231000000:2800:53C6371D78ACF3FA5771C3FADB77105A997374E6982A4B6A6641E66A5E21B10A.gif?needInitFileName=true?needInitFileName=true" alt=""></p><p>①<strong>分类</strong></p>`,15),zt={href:"https://developer.harmonyos.com/cn/docs/documentation/doc-guides-V3/arkts-routing-0000001503325125-V3#ZH-CN_TOPIC_0000001523968678__%E7%B3%BB%E7%BB%9F%E9%BB%98%E8%AE%A4%E8%AF%A2%E9%97%AE%E6%A1%86",target:"_blank",rel:"noopener noreferrer"},Gt={href:"https://developer.harmonyos.com/cn/docs/documentation/doc-guides-V3/arkts-routing-0000001503325125-V3#ZH-CN_TOPIC_0000001523968678__%E8%87%AA%E5%AE%9A%E4%B9%89%E8%AF%A2%E9%97%AE%E6%A1%86",target:"_blank",rel:"noopener noreferrer"},Zt=n("p",null,[s("②"),n("strong",null,"系统默认询问弹窗")],-1),Jt={href:"https://developer.harmonyos.com/cn/docs/documentation/doc-references-V3/js-apis-router-0000001478061893-V3#ZH-CN_TOPIC_0000001523808578__routershowalertbeforebackpage9",target:"_blank",rel:"noopener noreferrer"},Kt={href:"https://developer.harmonyos.com/cn/docs/documentation/doc-references-V3/js-apis-router-0000001478061893-V3#ZH-CN_TOPIC_0000001523808578__routerback",target:"_blank",rel:"noopener noreferrer"},Yt={href:"https://developer.harmonyos.com/cn/docs/documentation/doc-references-V3/js-apis-router-0000001478061893-V3#ZH-CN_TOPIC_0000001523808578__routerback",target:"_blank",rel:"noopener noreferrer"},Qt={href:"https://developer.harmonyos.com/cn/docs/documentation/doc-references-V3/js-apis-router-0000001478061893-V3#ZH-CN_TOPIC_0000001523808578__routershowalertbeforebackpage9",target:"_blank",rel:"noopener noreferrer"},Xt=p(`<div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> router <span class="token keyword">from</span> <span class="token string">&#39;@ohos.router&#39;</span><span class="token punctuation">;</span>

<span class="token comment">// 定义一个返回按钮的点击事件处理函数</span>
<span class="token keyword">function</span> <span class="token function">onBackClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>
  <span class="token comment">// 调用router.showAlertBeforeBackPage()方法，设置返回询问框的信息</span>
  <span class="token keyword">try</span> <span class="token punctuation">{</span>
    router<span class="token punctuation">.</span><span class="token function">showAlertBeforeBackPage</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      message<span class="token operator">:</span> <span class="token string">&#39;您还没有完成支付，确定要返回吗？&#39;</span> <span class="token comment">// 设置询问框的内容</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">弹窗开启失败, code is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>err<span class="token punctuation">.</span>code<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">, message is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>err<span class="token punctuation">.</span>message<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// 调用router.back()方法，返回上一个页面</span>
  router<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>③<strong>自定义询问弹框</strong></p>`,2),np={href:"https://developer.harmonyos.com/cn/docs/documentation/doc-references-V3/js-apis-promptaction-0000001478341345-V3",target:"_blank",rel:"noopener noreferrer"},sp={href:"https://developer.harmonyos.com/cn/docs/documentation/doc-references-V3/ts-methods-custom-dialog-box-0000001477981237-V3",target:"_blank",rel:"noopener noreferrer"},ap={href:"https://developer.harmonyos.com/cn/docs/documentation/doc-references-V3/js-apis-promptaction-0000001478341345-V3#ZH-CN_TOPIC_0000001573929081__promptactionshowdialog",target:"_blank",rel:"noopener noreferrer"},tp=p(`<div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token decorator"><span class="token at operator">@</span><span class="token function">CustomDialog</span></span>
<span class="token keyword">export</span> struct  YuRouterDialogBuilder <span class="token punctuation">{</span>
  <span class="token decorator"><span class="token at operator">@</span><span class="token function">State</span></span> titleValue<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">&#39;弹窗&#39;</span>
  <span class="token decorator"><span class="token at operator">@</span><span class="token function">State</span></span> contentValue<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">&#39;确认吗&#39;</span>
  <span class="token decorator"><span class="token at operator">@</span><span class="token function">BuilderParam</span></span> <span class="token function-variable function">headLeft</span><span class="token operator">:</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token keyword">void</span>
  <span class="token decorator"><span class="token at operator">@</span><span class="token function">BuilderParam</span></span> <span class="token function-variable function">closer</span><span class="token operator">:</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token keyword">void</span>
  <span class="token decorator"><span class="token at operator">@</span><span class="token function">BuilderParam</span></span> <span class="token function-variable function">operations</span><span class="token operator">:</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token keyword">void</span>
  <span class="token comment">// 若尝试在CustomDialog中传入多个其他的Controller</span>
  <span class="token comment">// 以实现在CustomDialog中打开另一个或另一些CustomDialog</span>
  <span class="token comment">// 那么此处需要将指向自己的controller放在最后</span>
  controller<span class="token operator">:</span> CustomDialogController
  <span class="token function-variable function">cancel</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span>
  <span class="token function-variable function">confirm</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span>
  <span class="token decorator"><span class="token at operator">@</span><span class="token function">Builder</span></span> <span class="token function">dialogHeader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token function">Grid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token function">GridItem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
		<span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">headLeft</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
      <span class="token function">GridItem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token function">Text</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>titleValue&#39;<span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
      <span class="token function">GridItem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">closer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">columnsTemplate</span><span class="token punctuation">(</span><span class="token string">&#39;1fr 2fr 1fr&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">margin</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">width</span><span class="token punctuation">(</span><span class="token string">&#39;100%&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token decorator"><span class="token at operator">@</span><span class="token function">Builder</span></span> <span class="token function">dialogContent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token function">Grid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token function">GridItem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token function">Text</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>contentValue<span class="token punctuation">)</span>
          <span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string-property property">&quot;top&quot;</span><span class="token operator">:</span><span class="token string">&quot;0.00vp&quot;</span><span class="token punctuation">,</span><span class="token string-property property">&quot;right&quot;</span><span class="token operator">:</span><span class="token string">&quot;20&quot;</span><span class="token punctuation">,</span><span class="token string-property property">&quot;bottom&quot;</span><span class="token operator">:</span><span class="token string">&quot;0.00vp&quot;</span><span class="token punctuation">,</span><span class="token string-property property">&quot;left&quot;</span><span class="token operator">:</span><span class="token string">&quot;0.00vp&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">columnsTemplate</span><span class="token punctuation">(</span><span class="token string">&#39;1fr&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">width</span><span class="token punctuation">(</span><span class="token string">&#39;100%&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token decorator"><span class="token at operator">@</span><span class="token function">Builder</span></span> <span class="token function">dialogOpeartions</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>operations<span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">operations</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
      <span class="token function">Grid</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">GridItem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
          <span class="token function">Button</span><span class="token punctuation">(</span><span class="token string">&#39;取消&#39;</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">onClick</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
              <span class="token keyword">this</span><span class="token punctuation">.</span>controller<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
              <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">backgroundColor</span><span class="token punctuation">(</span><span class="token number">0xffffff</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fontColor</span><span class="token punctuation">(</span>Color<span class="token punctuation">.</span>Black<span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
        <span class="token function">GridItem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
          <span class="token function">Button</span><span class="token punctuation">(</span><span class="token string">&#39;确认&#39;</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">onClick</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
              <span class="token keyword">this</span><span class="token punctuation">.</span>controller<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
              <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">confirm</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">backgroundColor</span><span class="token punctuation">(</span><span class="token number">0xffffff</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fontColor</span><span class="token punctuation">(</span>Color<span class="token punctuation">.</span>Red<span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">columnsTemplate</span><span class="token punctuation">(</span><span class="token string">&#39;1fr 1fr&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">margin</span><span class="token punctuation">(</span><span class="token punctuation">{</span> bottom<span class="token operator">:</span> <span class="token number">10</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">width</span><span class="token punctuation">(</span><span class="token string">&#39;100%&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token function">Grid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token function">GridItem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">dialogHeader</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
      <span class="token function">GridItem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">dialogContent</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
      <span class="token function">GridItem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">dialogOpeartions</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token punctuation">.</span><span class="token function">rowsTemplate</span><span class="token punctuation">(</span><span class="token string">&#39;1fr 2fr 1fr&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">rowsGap</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">height</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用的时候</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> router <span class="token keyword">from</span> <span class="token string">&#39;@ohos.router&#39;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span>YuRouterDialogBuilder<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;../conponents/YuRouterDialog/index&#39;</span>
<span class="token decorator"><span class="token at operator">@</span><span class="token function">Entry</span></span>
<span class="token decorator"><span class="token at operator">@</span><span class="token function">Component</span></span>
struct Profile <span class="token punctuation">{</span>
  <span class="token decorator"><span class="token at operator">@</span><span class="token function">State</span></span> message<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">&#39;主页&#39;</span>
  dialogController<span class="token operator">:</span> CustomDialogController <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CustomDialogController</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    builder<span class="token operator">:</span><span class="token function">YuRouterDialogBuilder</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      confirm<span class="token operator">:</span><span class="token keyword">this</span><span class="token punctuation">.</span>cancel<span class="token punctuation">,</span>
      cancel<span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>confirm<span class="token punctuation">,</span>
      contentValue<span class="token operator">:</span><span class="token string">&#39;要返回上一级吗？撒打算的撒旦萨芬在下方风格外地人发改委广泛大使馆当时法国上帝发誓帝发丧风飒飒飞洒&#39;</span><span class="token punctuation">,</span>
      closer<span class="token operator">:</span><span class="token keyword">this</span><span class="token punctuation">.</span>closer<span class="token punctuation">,</span>
      operations<span class="token operator">:</span><span class="token keyword">this</span><span class="token punctuation">.</span>operations
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    cancel<span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>exitDialog<span class="token punctuation">,</span>
    autoCancel<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    alignment<span class="token operator">:</span> DialogAlignment<span class="token punctuation">.</span>Center<span class="token punctuation">,</span>
    offset<span class="token operator">:</span> <span class="token punctuation">{</span> dx<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span> dy<span class="token operator">:</span> <span class="token operator">-</span><span class="token number">20</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
    gridCount<span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">,</span>
    customStyle<span class="token operator">:</span> <span class="token boolean">false</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token decorator"><span class="token at operator">@</span><span class="token function">Builder</span></span> <span class="token function">closer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token function">Text</span><span class="token punctuation">(</span><span class="token string">&#39;❎&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">onClick</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token decorator"><span class="token at operator">@</span><span class="token function">Builder</span></span> <span class="token function">operations</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token function">Grid</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">GridItem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token function">Button</span><span class="token punctuation">(</span><span class="token string">&#39;跳转&#39;</span><span class="token punctuation">)</span>
          <span class="token punctuation">.</span><span class="token function">onClick</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>dialogController<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
          <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">backgroundColor</span><span class="token punctuation">(</span><span class="token number">0xffffff</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fontColor</span><span class="token punctuation">(</span>Color<span class="token punctuation">.</span>Black<span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">columnsTemplate</span><span class="token punctuation">(</span><span class="token string">&#39;1fr&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">margin</span><span class="token punctuation">(</span><span class="token punctuation">{</span> bottom<span class="token operator">:</span> <span class="token number">10</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">width</span><span class="token punctuation">(</span><span class="token string">&#39;100%&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// 在自定义组件即将析构销毁时将dialogControlle删除和置空</span>
  <span class="token function">aboutToDisappear</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">delete</span> <span class="token keyword">this</span><span class="token punctuation">.</span>dialogController<span class="token punctuation">,</span> <span class="token comment">// 删除dialogController</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>dialogController <span class="token operator">=</span> <span class="token keyword">undefined</span> <span class="token comment">// 将dialogController置空</span>
  <span class="token punctuation">}</span>
  <span class="token function">exitDialog</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&#39;点空白区域的回调&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token function">cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&#39;取消&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token function">confirm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    router<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">{</span>url<span class="token operator">:</span><span class="token string">&#39;pages/Index&#39;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>dialogController <span class="token operator">!=</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>dialogController<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">Row</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">Button</span><span class="token punctuation">(</span><span class="token string">&#39;返回上一页&#39;</span><span class="token punctuation">)</span>
          <span class="token punctuation">.</span><span class="token function">onClick</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
      <span class="token punctuation">.</span><span class="token function">width</span><span class="token punctuation">(</span><span class="token string">&#39;100%&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token punctuation">.</span><span class="token function">height</span><span class="token punctuation">(</span><span class="token string">&#39;100%&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="组件导航" tabindex="-1"><a class="header-anchor" href="#组件导航" aria-hidden="true">#</a> 组件导航</h3><h4 id="tabs" tabindex="-1"><a class="header-anchor" href="#tabs" aria-hidden="true">#</a> Tabs</h4>`,5),pp={href:"https://developer.harmonyos.com/cn/docs/documentation/doc-references-V3/ts-container-tabs-0000001478181433-V3",target:"_blank",rel:"noopener noreferrer"},ep=p(`<p><img src="https://alliance-communityfile-drcn.dbankcdn.com/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20231121183909.09645317291104927903475639870002:50001231000000:2800:926E0D51140EBF5D896A71F9582AD025065497A919134B89D2AC9952C38FC052.png?needInitFileName=true?needInitFileName=true" alt=""></p><p>tabs使用包括好包裹TabContent</p><p><img src="https://alliance-communityfile-drcn.dbankcdn.com/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20231121183909.27215743807801141194183176649256:50001231000000:2800:79B778F0C1AE125FAA2D77D806179460384A0DF69FC17AD00AC4A4563544B31C.png?needInitFileName=true?needInitFileName=true" alt=""></p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code>
<span class="token decorator"><span class="token at operator">@</span><span class="token function">Entry</span></span>
<span class="token decorator"><span class="token at operator">@</span><span class="token function">Component</span></span>
struct ComNav <span class="token punctuation">{</span>
  <span class="token keyword">private</span> arr<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token comment">//切换指定页签需要使用TabsController，</span>
  <span class="token comment">// TabsController是Tabs组件的控制器，</span>
  <span class="token comment">// 用于控制Tabs组件进行页签切换。</span>
  <span class="token comment">// 通过TabsController的changeIndex方法来实现跳转至指定索引值对应的TabContent内容。</span>
  <span class="token keyword">private</span> tabsController <span class="token operator">:</span> TabsController <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TabsController</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token decorator"><span class="token at operator">@</span><span class="token function">State</span></span> currentIndex<span class="token operator">:</span><span class="token builtin">number</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token decorator"><span class="token at operator">@</span><span class="token function">Builder</span></span> <span class="token function">TabBuilder</span><span class="token punctuation">(</span>title<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> targetIndex<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> selectedImg<span class="token operator">?</span><span class="token operator">:</span> Resource<span class="token punctuation">,</span> normalImg<span class="token operator">?</span><span class="token operator">:</span> Resource<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">Column</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// Image(this.currentIndex === targetIndex ? selectedImg : normalImg)</span>
      <span class="token comment">//   .size({ width: 25, height: 25 })</span>
      <span class="token function">Text</span><span class="token punctuation">(</span>title<span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">fontColor</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>currentIndex <span class="token operator">===</span> targetIndex <span class="token operator">?</span> <span class="token string">&#39;#1698CE&#39;</span> <span class="token operator">:</span> <span class="token string">&#39;#6B6B6B&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token punctuation">.</span><span class="token function">width</span><span class="token punctuation">(</span><span class="token string">&#39;100%&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">height</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">justifyContent</span><span class="token punctuation">(</span>FlexAlign<span class="token punctuation">.</span>Center<span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">onClick</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>currentIndex <span class="token operator">=</span> targetIndex<span class="token punctuation">;</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>tabsController<span class="token punctuation">.</span><span class="token function">changeIndex</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>currentIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">Tabs</span><span class="token punctuation">(</span><span class="token punctuation">{</span> barPosition<span class="token operator">:</span> BarPosition<span class="token punctuation">.</span>End<span class="token punctuation">,</span> controller<span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>tabsController <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">TabContent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token function">Text</span><span class="token punctuation">(</span><span class="token string">&#39;首页&#39;</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">tabBar</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">TabBuilder</span><span class="token punctuation">(</span><span class="token string">&#39;首页&#39;</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

      <span class="token function">TabContent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token function">Text</span><span class="token punctuation">(</span><span class="token string">&#39;发现&#39;</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">tabBar</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">TabBuilder</span><span class="token punctuation">(</span><span class="token string">&#39;发现&#39;</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

      <span class="token function">TabContent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
		<span class="token function">Text</span><span class="token punctuation">(</span><span class="token string">&#39;推荐&#39;</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">tabBar</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">TabBuilder</span><span class="token punctuation">(</span><span class="token string">&#39;推荐&#39;</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

      <span class="token function">TabContent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
		<span class="token function">Text</span><span class="token punctuation">(</span><span class="token string">&#39;我的&#39;</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
      <span class="token punctuation">.</span><span class="token function">tabBar</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">TabBuilder</span><span class="token punctuation">(</span><span class="token string">&#39;我的&#39;</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="性能优化" tabindex="-1"><a class="header-anchor" href="#性能优化" aria-hidden="true">#</a> 性能优化</h2><h3 id="尽量用row-column代替flex" tabindex="-1"><a class="header-anchor" href="#尽量用row-column代替flex" aria-hidden="true">#</a> 尽量用Row/Column代替flex</h3><p>①<strong>原因</strong></p><p>由于Flex容器组件默认情况下存在shrink导致二次布局，这会在一定程度上造成页面渲染上的性能劣化。</p><p>Flex容器组件中的shrink属性是指在空间不足时，容器内的项目是否可以收缩以适应剩余空间。默认情况下，项目会根据其默认的shrink值进行收缩。如果项目的shrink值为1，那么在空间不足时，项目将按比例收缩，以适应剩余空间。</p><p>当Flex容器中的项目过多或者项目的shrink值设置不合理时，就会出现二次布局的情况。二次布局指的是当项目收缩后，容器的尺寸可能会发生变化，导致浏览器需要重新计算和绘制布局。这种额外的计算和绘制过程会对页面渲染性能造成一定的劣化。</p><h3 id="数据懒加载" tabindex="-1"><a class="header-anchor" href="#数据懒加载" aria-hidden="true">#</a> 数据懒加载</h3><p>开发者在使用长列表时，如果直接采用循环渲染方式，如下所示，会一次性加载所有的列表元素，一方面会导致页面启动时间过长，影响用户体验，另一方面也会增加服务器的压力和流量，加重系统负担。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">class</span> <span class="token class-name">BasicDataSource</span> <span class="token keyword">implements</span> <span class="token class-name">IDataSource</span> <span class="token punctuation">{</span>
  <span class="token keyword">private</span> listeners<span class="token operator">:</span> DataChangeListener<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>

  <span class="token keyword">public</span> <span class="token function">totalCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token number">0</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">public</span> <span class="token function">getData</span><span class="token punctuation">(</span>index<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">any</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">undefined</span>
  <span class="token punctuation">}</span>

  <span class="token function">registerDataChangeListener</span><span class="token punctuation">(</span>listener<span class="token operator">:</span> DataChangeListener<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>listeners<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>listener<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&#39;add listener&#39;</span><span class="token punctuation">)</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>listeners<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>listener<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token function">unregisterDataChangeListener</span><span class="token punctuation">(</span>listener<span class="token operator">:</span> DataChangeListener<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> pos <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>listeners<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>listener<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>pos <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&#39;remove listener&#39;</span><span class="token punctuation">)</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>listeners<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>pos<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token function">notifyDataReload</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>listeners<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>listener <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      listener<span class="token punctuation">.</span><span class="token function">onDataReloaded</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token function">notifyDataAdd</span><span class="token punctuation">(</span>index<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>listeners<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>listener <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      listener<span class="token punctuation">.</span><span class="token function">onDataAdd</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token function">notifyDataChange</span><span class="token punctuation">(</span>index<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>listeners<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>listener <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      listener<span class="token punctuation">.</span><span class="token function">onDataChange</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token function">notifyDataDelete</span><span class="token punctuation">(</span>index<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>listeners<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>listener <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      listener<span class="token punctuation">.</span><span class="token function">onDataDelete</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token function">notifyDataMove</span><span class="token punctuation">(</span>from<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> to<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>listeners<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>listener <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      listener<span class="token punctuation">.</span><span class="token function">onDataMove</span><span class="token punctuation">(</span>from<span class="token punctuation">,</span> to<span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">MyDataSource</span> <span class="token keyword">extends</span> <span class="token class-name">BasicDataSource</span> <span class="token punctuation">{</span>
  <span class="token keyword">private</span> dataArray<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;item value: 0&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;item value: 1&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;item value: 2&#39;</span><span class="token punctuation">]</span>

  <span class="token keyword">public</span> <span class="token function">totalCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>dataArray<span class="token punctuation">.</span>length
  <span class="token punctuation">}</span>

  <span class="token keyword">public</span> <span class="token function">getData</span><span class="token punctuation">(</span>index<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">any</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>dataArray<span class="token punctuation">[</span>index<span class="token punctuation">]</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">public</span> <span class="token function">addData</span><span class="token punctuation">(</span>index<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> data<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>dataArray<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">notifyDataAdd</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">public</span> <span class="token function">pushData</span><span class="token punctuation">(</span>data<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>dataArray<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">notifyDataAdd</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>dataArray<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token decorator"><span class="token at operator">@</span><span class="token function">Entry</span></span>
<span class="token decorator"><span class="token at operator">@</span><span class="token function">Component</span></span>
struct MyComponent <span class="token punctuation">{</span>
  <span class="token keyword">private</span> data<span class="token operator">:</span> MyDataSource <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

  <span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">List</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">LazyForEach</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">,</span> <span class="token punctuation">(</span>item<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token function">ListItem</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token function">Row</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">Text</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fontSize</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">margin</span><span class="token punctuation">(</span><span class="token punctuation">{</span> left<span class="token operator">:</span> <span class="token number">10</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
          <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token punctuation">.</span><span class="token function">onClick</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
          <span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span><span class="token function">pushData</span><span class="token punctuation">(</span><span class="token string">&#39;item value: &#39;</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span><span class="token function">totalCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span> item <span class="token operator">=&gt;</span> item<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="设置list组件宽高" tabindex="-1"><a class="header-anchor" href="#设置list组件宽高" aria-hidden="true">#</a> 设置List组件宽高</h3><p>在使用Scroll容器组件嵌套List组件加载长列表时，若不指定List的宽高尺寸，则默认全部加载。</p>`,15),op=n("li",null,"List没有设置宽高，会布局List的所有子组件。",-1),cp=n("li",null,"List设置宽高，会布局List显示区域内的子组件。",-1),ip={href:"https://developer.harmonyos.com/cn/docs/documentation/doc-guides-V3/arkts-rendering-control-foreach-0000001524537153-V3",target:"_blank",rel:"noopener noreferrer"},lp={href:"https://developer.harmonyos.com/cn/docs/documentation/doc-guides-V3/arkts-rendering-control-lazyforeach-0000001524417213-V3",target:"_blank",rel:"noopener noreferrer"},up=p(`<h3 id="用条件渲染代替显示隐藏" tabindex="-1"><a class="header-anchor" href="#用条件渲染代替显示隐藏" aria-hidden="true">#</a> 用条件渲染代替显示隐藏</h3><p>在使用visibility通用属性控制组件的显隐状态时，仍存在组件的重新创建过程，造成性能上的损耗。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token decorator"><span class="token at operator">@</span><span class="token function">Entry</span></span>
<span class="token decorator"><span class="token at operator">@</span><span class="token function">Component</span></span>
struct MyComponent <span class="token punctuation">{</span>
  <span class="token decorator"><span class="token at operator">@</span><span class="token function">State</span></span> isVisible<span class="token operator">:</span> Visibility <span class="token operator">=</span> Visibility<span class="token punctuation">.</span>Visible<span class="token punctuation">;</span>

  <span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">Column</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">Button</span><span class="token punctuation">(</span><span class="token string">&quot;显隐切换&quot;</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">onClick</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
          <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>isVisible <span class="token operator">==</span> Visibility<span class="token punctuation">.</span>Visible<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>isVisible <span class="token operator">=</span> Visibility<span class="token punctuation">.</span>None
          <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>isVisible <span class="token operator">=</span> Visibility<span class="token punctuation">.</span>Visible
          <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
      <span class="token function">Row</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">visibility</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>isVisible<span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">width</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">height</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">backgroundColor</span><span class="token punctuation">(</span>Color<span class="token punctuation">.</span>Pink<span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">width</span><span class="token punctuation">(</span><span class="token string">&#39;100%&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">// 优化</span>
<span class="token decorator"><span class="token at operator">@</span><span class="token function">Entry</span></span>
<span class="token decorator"><span class="token at operator">@</span><span class="token function">Component</span></span>
struct MyComponent <span class="token punctuation">{</span>
  <span class="token decorator"><span class="token at operator">@</span><span class="token function">State</span></span> isVisible<span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>

  <span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">Column</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">Button</span><span class="token punctuation">(</span><span class="token string">&quot;显隐切换&quot;</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">onClick</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
          <span class="token keyword">this</span><span class="token punctuation">.</span>isVisible <span class="token operator">=</span> <span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>isVisible
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>isVisible<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">Row</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
          <span class="token punctuation">.</span><span class="token function">width</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">height</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">backgroundColor</span><span class="token punctuation">(</span>Color<span class="token punctuation">.</span>Pink<span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">width</span><span class="token punctuation">(</span><span class="token string">&#39;100%&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3);function rp(kp,dp){const t=e("ExternalLinkIcon"),o=e("CommentService");return i(),l("div",null,[y,_,w,n("ul",null,[n("li",null,[S,s(" HarmonyOS API 7开始支持的模型，已经不再主推。FA模型开发可见"),n("a",C,[s("FA模型开发概述"),a(t)]),s("。")]),n("li",null,[A,s(" HarmonyOS API 9开始新增的模型，是目前主推且会长期演进的模型。在该模型中，由于提供了AbilityStage、WindowStage等类作为应用组件和Window窗口的“舞台”，因此称这种应用模型为Stage模型。Stage模型开发可见"),n("a",P,[s("Stage模型开发概述"),a(t)]),s("。")])]),n("table",null,[x,n("tbody",null,[n("tr",null,[I,n("td",null,[s("1. 组件分类"),L,s(" - PageAbility组件：包含UI界面，提供展示UI的能力。详细介绍请参见"),n("a",V,[s("PageAbility组件概述"),a(t)]),s("。- ServiceAbility组件：提供后台服务的能力，无UI界面。详细介绍请参见"),n("a",B,[s("ServiceAbility组件概述"),a(t)]),s("。- DataAbility组件：提供数据分享的能力，无UI界面。详细介绍请参见"),n("a",U,[s("DataAbility组件概述"),a(t)]),s("。2. 开发方式通过导出匿名对象、固定入口文件的方式指定应用组件。开发者无法进行派生，不利于扩展能力。")]),n("td",null,[s("1. 组件分类"),T,s(" - UIAbility组件：包含UI界面，提供展示UI的能力，主要用于和用户交互。详细介绍请参见"),n("a",E,[s("UIAbility组件概述"),a(t)]),s("。- ExtensionAbility组件：提供特定场景（如卡片、输入法）的扩展能力，满足更多的使用场景。详细介绍请参见"),n("a",D,[s("ExtensionAbility组件"),a(t)]),s("。2. 开发方式采用面向对象的方式，将应用组件以类接口的形式开放给开发者，可以进行派生，利于扩展能力。")])]),n("tr",null,[F,n("td",null,[s("有两类进程：1. 主进程2. 渲染进程详细介绍请参见"),n("a",O,[s("进程模型"),a(t)]),s("。")]),n("td",null,[s("有三类进程：1. 主进程2. ExtensionAbility进程3. 渲染进程详细介绍请参见"),n("a",j,[s("进程模型"),a(t)]),s("。")])]),n("tr",null,[H,n("td",null,[s("1. ArkTS引擎实例的创建一个进程可以运行多个应用组件实例，每个应用组件实例运行在一个单独的ArkTS引擎实例中。2. 线程模型每个ArkTS引擎实例都在一个单独线程（非主线程）上创建，主线程没有ArkTS引擎实例。3. 进程内对象共享：不支持。详细介绍请参见"),n("a",R,[s("线程模型"),a(t)]),s("。")]),n("td",null,[s("1. ArkTS引擎实例的创建一个进程可以运行多个应用组件实例，所有应用组件实例共享一个ArkTS引擎实例。2. 线程模型ArkTS引擎实例在主线程上创建。3. 进程内对象共享：支持。详细介绍请参见"),n("a",W,[s("线程模型"),a(t)]),s("。")])]),n("tr",null,[$,n("td",null,[s("使用config.json描述应用信息、HAP信息和应用组件信息。详细介绍请参见"),n("a",q,[s("应用配置文件概述（FA模型）"),a(t)]),s("。")]),n("td",null,[s("使用app.json5描述应用信息，module.json5描述HAP信息、应用组件信息。详细介绍请参见"),n("a",N,[s("应用配置文件概述（Stage模型）"),a(t)]),s("。")])])])]),n("p",null,[n("a",M,[s("应用/组件配置"),a(t)])]),z,n("ul",null,[n("li",null,[s("装饰器： 用于装饰类、结构、方法以及变量，并赋予其特殊的含义。如上述示例中@Entry、@Component和@State都是装饰器，"),n("a",G,[s("@Component"),a(t)]),s("表示自定义组件，"),n("a",Z,[s("@Entry"),a(t)]),s("表示该自定义组件为入口组件，"),n("a",J,[s("@State"),a(t)]),s("表示组件中的状态变量，状态变量变化会触发UI刷新。")]),n("li",null,[n("a",K,[s("UI描述"),a(t)]),s("：以声明式的方式来描述UI的结构，例如build()方法中的代码块。")]),n("li",null,[n("a",Y,[s("自定义组件"),a(t)]),s("：可复用的UI单元，可组合其他组件，如上述被@Component装饰的struct Hello。")]),Q,X,nn,n("li",null,[s("系统组件、属性方法、事件方法具体使用可参考"),n("a",sn,[s("基于ArkTS的声明式开发范式"),a(t)]),s("。")])]),an,n("p",null,[tn,s("：@Entry装饰的自定义组件将作为UI页面的入口。在单个UI页面中，最多可以使用@Entry装饰一个自定义组件。@Entry可以接受一个可选的"),n("a",pn,[s("LocalStorage"),a(t)]),s("的参数。"),en]),on,n("ul",null,[cn,ln,n("li",null,[s("自定义组件的成员变量本地初始化有些是可选的，有些是必选的。具体是否需要本地初始化，是否需要从父组件通过参数传递初始化子组件的成员变量，请参考"),n("a",un,[s("状态管理"),a(t)]),s("。")])]),rn,n("ol",null,[kn,n("li",null,[s("自定义组件和它的变量将被删除，如果其有同步的变量，比如"),n("a",dn,[s("@Link"),a(t)]),s("、"),n("a",vn,[s("@Prop"),a(t)]),s("、"),n("a",mn,[s("@StorageLink"),a(t)]),s("，将从"),n("a",bn,[s("同步源"),a(t)]),s("上取消注册。")])]),gn,n("ul",null,[n("li",null,[n("a",hn,[s("aboutToAppear"),a(t)]),s("：组件即将出现时回调该接口，具体时机为在创建自定义组件的新实例后，在执行其build()函数之前执行。(类似Vue beforeMounted)")]),n("li",null,[n("a",fn,[s("aboutToDisappear"),a(t)]),s("：在自定义组件即将析构销毁时执行。(类似Vue beforeDestory)")])]),yn,n("p",null,[s("自定义构建函数的参数传递有"),n("a",_n,[s("按值传递"),a(t)]),s("和"),n("a",wn,[s("按引用传递"),a(t)]),s("两种，均需遵守以下规则：")]),n("ul",null,[Sn,n("li",null,[s("在自定义构建函数内部，不允许改变参数值。如果需要改变参数值，且同步回调用点，建议使用"),n("a",Cn,[s("@Link"),a(t)]),s("。")]),n("li",null,[s("@Builder内UI语法遵循"),n("a",An,[s("UI语法规则"),a(t)]),s("。")])]),Pn,n("p",null,[s("调用@Builder装饰的函数默认按值传递。当传递的参数为状态变量时，状态变量的改变不会引起@Builder方法内的UI刷新。所以当使用状态变量的时候，推荐使用"),n("a",xn,[s("按引用传递"),a(t)]),s("。")]),In,n("ul",null,[n("li",null,[n("p",null,[s("当前@Styles仅支持"),n("a",Ln,[s("通用属性"),a(t)]),s("和"),n("a",Vn,[s("通用事件"),a(t)]),s("。")])]),Bn]),Un,Tn,n("ul",null,[En,n("li",null,[n("p",null,[s("@Extend的参数可以为"),n("a",Dn,[s("状态变量"),a(t)]),s("，当状态变量改变时，UI可以正常的被刷新渲染。")]),Fn])]),On,n("p",null,[s("图示如下，具体装饰器的介绍，可详见"),n("a",jn,[s("管理组件拥有的状态"),a(t)]),s("和"),n("a",Hn,[s("管理应用拥有的状态"),a(t)]),s("。开发者可以灵活地利用这些能力来实现数据和UI的联动。")]),Rn,Wn,n("p",null,[n("a",$n,[s("管理组件拥有的状态"),a(t)]),s("，即图中Components级别的状态管理：")]),n("ul",null,[qn,n("li",null,[n("p",null,[s("AppStorage是应用程序中的一个特殊的单例LocalStorage对象，是应用级的数据库，和进程绑定，通过"),n("a",Nn,[s("@StorageProp"),a(t)]),s("和"),n("a",Mn,[s("@StorageLink"),a(t)]),s("装饰器可以和组件联动。")])]),zn,n("li",null,[n("p",null,[s("框架还提供了LocalStorage，AppStorage是LocalStorage特殊的单例。LocalStorage是应用程序声明的应用状态的内存“数据库”，通常用于页面级的状态共享，通过"),n("a",Gn,[s("@LocalStorageProp"),a(t)]),s("和"),n("a",Zn,[s("@LocalStorageLink"),a(t)]),s("装饰器可以和UI联动。")])])]),Jn,n("table",null,[Kn,n("tbody",null,[Yn,Qn,n("tr",null,[Xn,n("td",null,[s("Object、class、string、number、boolean、enum类型，以及这些类型的数组。嵌套类型的场景请参考"),n("a",ns,[s("观察变化"),a(t)]),s("。类型必须被指定。不支持any，不支持简单类型和复杂类型的联合类型，不允许使用undefined和null。说明："),ss])]),as])]),ts,n("table",null,[ps,n("tbody",null,[es,os,n("tr",null,[cs,n("td",null,[s("string、number、boolean、enum类型。不支持any，不允许使用undefined和null。必须指定类型。在父组件中，传递给@Prop装饰的值不能为undefined或者null，反例如下所示。"),is,s("@Prop和"),n("a",ls,[s("数据源"),a(t)]),s("类型需要相同，有以下三种情况（数据源以@State为例）：@Prop装饰的变量和父组件状态变量类型相同，即@Prop : S和@State : S，示例请参考"),n("a",us,[s("父组件@State到子组件@Prop简单数据类型同步"),a(t)]),s("。当父组件的状态变量为数组时，@Prop装饰的变量和父组件状态变量的数组项类型相同，即@Prop : S和"),rs,s("，示例请参考"),n("a",ks,[s("父组件@State数组中的项到子组件@Prop简单数据类型同步"),a(t)]),s("；当父组件状态变量为Object或者class时，@Prop装饰的变量和父组件状态变量的属性类型相同，即@Prop : S和"),ds,s("，示例请参考"),n("a",vs,[s("从父组件中的@State类对象属性到@Prop简单类型的同步"),a(t)]),s("。")])]),ms])]),bs,n("table",null,[gs,n("tbody",null,[hs,fs,n("tr",null,[ys,n("td",null,[s("Object、class、string、number、boolean、enum类型，以及这些类型的数组。嵌套类型的场景请参考"),n("a",_s,[s("观察变化"),a(t)]),s("。类型必须被指定，且和双向绑定状态变量的类型相同。不支持any，不支持简单类型和复杂类型的联合类型，不允许使用undefined和null。说明不支持Length、ResourceStr、ResourceColor类型，Length、ResourceStr、ResourceColor为简单类型和复杂类型的联合类型。")])]),ws])]),Ss,n("table",null,[Cs,n("tbody",null,[As,Ps,n("tr",null,[xs,n("td",null,[s("Object、class、string、number、boolean、enum类型，以及这些类型的数组。嵌套类型的场景请参考"),n("a",Is,[s("观察变化"),a(t)]),s("。不支持any，不支持简单类型和复杂类型的联合类型，不允许使用undefined和null。必须指定类型。@Provide变量的@Consume变量的类型必须相同。说明不支持Length、ResourceStr、ResourceColor类型，Length、ResourceStr、ResourceColor为简单类型和复杂类型的联合类型。")])]),Ls])]),n("table",null,[Vs,n("tbody",null,[Bs,Us,n("tr",null,[Ts,n("td",null,[s("Object、class、string、number、boolean、enum类型，以及这些类型的数组。嵌套类型的场景请参考"),n("a",Es,[s("观察变化"),a(t)]),s("。不支持any，不允许使用undefined和null。必须指定类型。@Provide变量的@Consume变量的类型必须相同。说明@Consume装饰的变量，在其父节点或者祖先节点上，必须有对应的属性和别名的@Provide装饰的变量。")])]),Ds])]),Fs,n("div",Os,[js,n("p",null,[s("@ObjectLink装饰的变量不能被赋值，如果要使用赋值操作，请使用"),n("a",Hs,[s("@Prop"),a(t)]),s("。")]),Rs]),Ws,n("table",null,[$s,n("tbody",null,[n("tr",null,[qs,n("td",null,[s("必须指定。初始化@ObjectLink装饰的变量必须同时满足以下场景：类型必须是@Observed装饰的class。初始化的数值需要是数组项，或者class的属性。同步源的class或者数组必须是@State，@Link，@Provide，@Consume或者@ObjectLink装饰的数据。同步源是数组项的示例请参考"),n("a",Ns,[s("对象数组"),a(t)]),s("。初始化的class的示例请参考"),n("a",Ms,[s("嵌套对象"),a(t)]),s("。")])]),zs,Gs])]),Zs,n("p",null,[s("内部状态具体指什么取决于组件。例如，"),n("a",Js,[s("Refresh"),a(t)]),s("组件的refreshing参数。")]),Ks,n("ul",null,[Ys,n("li",null,[s("当前"),Qs,s("仅支持"),n("a",Xs,[s("Refresh"),a(t)]),s("组件的refreshing参数。")]),na]),sa,n("ul",null,[n("li",null,[n("a",aa,[s("LocalStorage"),a(t)]),s("：页面级UI状态存储，通常用于"),n("a",ta,[s("UIAbility"),a(t)]),s("内、页面间的状态共享。")]),n("li",null,[n("a",pa,[s("AppStorage"),a(t)]),s("：特殊的单例LocalStorage对象，由UI框架在应用程序启动时创建，为应用程序UI状态属性提供中央存储；")]),n("li",null,[n("a",ea,[s("PersistentStorage"),a(t)]),s("：持久化存储UI状态，通常和AppStorage配合使用，选择AppStorage存储的数据写入磁盘，以确保这些属性在应用程序重新启动时的值与应用程序关闭时的值相同；")]),n("li",null,[n("a",oa,[s("Environment"),a(t)]),s("：应用程序运行的设备的环境参数，环境参数会同步到AppStorage中，可以和AppStorage搭配使用。")])]),ca,ia,la,n("ul",null,[ua,ra,n("li",null,[s("被@Component装饰的组件最多可以访问一个LocalStorage实例和"),n("a",ka,[s("AppStorage"),a(t)]),s("，未被@Entry装饰的组件不可被独立分配LocalStorage实例，只能接受父组件通过@Entry传递来的LocalStorage实例。一个LocalStorage实例在组件树上可以被分配给多个组件。")]),da]),va,n("ul",null,[n("li",null,[n("a",ma,[s("@LocalStorageProp"),a(t)]),s("：@LocalStorageProp装饰的变量和与LocalStorage中给定属性建立单向同步关系。")]),n("li",null,[n("a",ba,[s("@LocalStorageLink"),a(t)]),s("：@LocalStorageLink装饰的变量和在@Component中创建与LocalStorage中给定属性建立双向同步关系")])]),ga,n("ul",null,[ha,n("li",null,[s("LocalStorage是页面级存储，"),n("a",fa,[s("GetShared"),a(t)]),s("接口仅能获取当前Stage通过"),n("a",ya,[s("windowStage.loadContent"),a(t)]),s("传入的LocalStorage实例，否则返回undefined。例子可见"),n("a",_a,[s("将LocalStorage实例从UIAbility共享到一个或多个视图"),a(t)]),s("。")])]),n("table",null,[wa,n("tbody",null,[Sa,n("tr",null,[Ca,n("td",null,[s("Object、class、string、number、boolean、enum类型，以及这些类型的数组。嵌套类型的场景请参考"),n("a",Aa,[s("观察变化和行为表现"),a(t)]),s("。类型必须被指定，且必须和LocalStorage中对应属性相同。不支持any，不允许使用undefined和null。")])]),Pa,xa])]),n("table",null,[Ia,n("tbody",null,[La,n("tr",null,[Va,n("td",null,[s("Object、class、string、number、boolean、enum类型，以及这些类型的数组。嵌套类型的场景请参考"),n("a",Ba,[s("观察变化和行为表现"),a(t)]),s("。类型必须被指定，且必须和LocalStorage中对应属性相同。不支持any，不允许使用undefined和null。")])]),Ua,Ta])]),Ea,n("p",null,[s("①"),Da,s("（在不需要持久化场景下，需要用到"),n("a",Fa,[s("@StorageProp"),a(t)]),s("和"),n("a",Oa,[s("@StorageLink"),a(t)]),s("。）")]),n("p",null,[s("AppStorage是应用全局的UI状态存储，是和应用的进程绑定的，由UI框架在应用程序启动时创建，为应用程序UI状态属性提供中央存储。AppStorage中的属性可以被双向同步，数据可以是存在于本地或远程设备上，并具有不同的功能，比如数据持久化（详见"),n("a",ja,[s("PersistentStorage"),a(t)]),s("）。这些数据是通过业务逻辑中实现，与UI解耦，如果希望这些数据在UI中使用，需要用到"),n("a",Ha,[s("@StorageProp"),a(t)]),s("和"),n("a",Ra,[s("@StorageLink"),a(t)]),s("。")]),Wa,n("p",null,[s("和AppStorage不同的是，LocalStorage是页面级的，通常应用于页面内的数据共享。而AppStorage是应用级的全局状态共享，还相当于整个应用的“中枢”，"),n("a",$a,[s("持久化数据PersistentStorage"),a(t)]),s("和"),n("a",qa,[s("环境变量Environment"),a(t)]),s("都是通过和AppStorage中转，才可以和UI交互。")]),n("p",null,[s("③**"),n("a",Na,[s("@StorageProp"),a(t)]),s("和"),n("a",Ma,[s("@StorageLink"),a(t)]),s("。**")]),za,Ga,n("table",null,[Za,n("tbody",null,[Ja,n("tr",null,[Ka,n("td",null,[s("Object class、string、number、boolean、enum类型，以及这些类型的数组。嵌套类型的场景请参考"),n("a",Ya,[s("观察变化和行为表现"),a(t)]),s("。类型必须被指定，且必须和LocalStorage中对应属性相同。不支持any，不允许使用undefined和null。")])]),Qa,Xa])]),nt,n("table",null,[st,n("tbody",null,[at,n("tr",null,[tt,n("td",null,[s("Object、class、string、number、boolean、enum类型，以及这些类型的数组。嵌套类型的场景请参考"),n("a",pt,[s("观察变化和行为表现"),a(t)]),s("。类型必须被指定，且必须和AppStorage中对应属性相同。不支持any，不允许使用undefined和null。")])]),et,ot])]),ct,n("p",null,[s("AppStorage与"),n("a",it,[s("PersistentStorage"),a(t)]),s("以及"),n("a",lt,[s("Environment"),a(t)]),s("配合使用时，需要注意以下几点：限制：")]),n("ul",null,[n("li",null,[s("在AppStorage中创建属性后，调用PersistentStorage.PersistProp()接口时，会使用在AppStorage中已经存在的值，并覆盖PersistentStorage中的同名属性，所以建议要使用相反的调用顺序，反例可见"),n("a",ut,[s("在PersistentStorage之前访问AppStorage中的属性"),a(t)]),s("；")]),rt]),kt,n("p",null,[s("为使应用能够正常使用UIAbility，需要在"),n("a",dt,[s("module.json5配置文件"),a(t)]),s("的"),n("a",vt,[s("abilities标签"),a(t)]),s("中声明UIAbility的名称、入口、标签等相关信息。")]),mt,n("p",null,[s("在onWindowStageCreate()回调中通过loadContent()方法设置应用要加载的页面并根据需要订阅WindowStage的"),n("a",bt,[s("事件"),a(t)]),s("（获焦/失焦、可见/不可见）。")]),gt,n("ul",null,[n("li",null,[n("a",ht,[s("singleton（单实例模式）"),a(t)])]),n("li",null,[n("a",ft,[s("standard（标准实例模式）"),a(t)])]),n("li",null,[n("a",yt,[s("specified（指定实例模式）"),a(t)])])]),n("p",null,[s("如果需要使用启动模式，在"),n("a",_t,[s("module.json5配置文件"),a(t)]),s("中的"),wt,s("字段配置即可。")]),St,n("div",Ct,[At,n("p",null,[s("应用的UIAbility实例已创建，该UIAbility配置为单实例模式，再次调用startAbility()方法启动该UIAbility实例，此时只会进入该UIAbility的"),n("a",Pt,[s("onNewWant()"),a(t)]),s("回调，不会进入其onCreate()和onWindowStageCreate()生命周期回调。")])]),xt,n("ol",null,[n("li",null,[n("p",null,[s("在FuncAbility中，将"),n("a",It,[s("module.json5配置文件"),a(t)]),s('的"launchType"字段配置为"specified"。')]),Lt]),Vt,n("li",null,[n("p",null,[s("由于FuncAbility的启动模式配置为了指定实例启动模式，在FuncAbility启动之前，会先进入其对应的AbilityStage的"),n("a",Bt,[s("onAcceptWant()"),a(t)]),s('生命周期回调中，解析传入的want参数，获取"instanceKey"自定义参数。根据业务需要通过AbilityStage的'),n("a",Ut,[s("onAcceptWant()"),a(t)]),s("生命周期回调返回一个字符串Key标识。如果返回的Key对应一个已启动的UIAbility，则会将之前的UIAbility拉回前台并获焦，而不创建新的实例，否则创建新的实例并启动。")]),Tt])]),Et,Dt,Ft,Ot,n("p",null,[s("Router模块提供了两种跳转模式，分别是"),n("a",jt,[s("router.pushUrl()"),a(t)]),s("和"),n("a",Ht,[s("router.replaceUrl()"),a(t)]),s("。这两种模式决定了目标页是否会替换当前页。")]),n("ul",null,[n("li",null,[s("router.pushUrl()：目标页不会替换当前页，而是压入页面栈。这样可以保留当前页的状态，并且可以通过返回键或者调用"),n("a",Rt,[s("router.back()"),a(t)]),s("方法返回到当前页。")]),Wt]),n("div",$t,[qt,n("p",null,[s("页面栈的最大容量为32个页面。如果超过这个限制，可以调用"),n("a",Nt,[s("router.clear()"),a(t)]),s("方法清空历史页面栈，释放内存空间。")])]),Mt,n("p",null,[s("询问弹窗分两类，"),n("a",zt,[s("系统默认询问框"),a(t)]),s("和"),n("a",Gt,[s("自定义询问框"),a(t)]),s("。")]),Zt,n("p",null,[s("可以使用页面路由Router模块提供的两个方法："),n("a",Jt,[s("router.showAlertBeforeBackPage()"),a(t)]),s("和"),n("a",Kt,[s("router.back()"),a(t)]),s("来实现这个功能。如果想要在目标界面开启页面返回询问框，需要在调用"),n("a",Yt,[s("router.back()"),a(t)]),s("方法之前，通过调用"),n("a",Qt,[s("router.showAlertBeforeBackPage()"),a(t)]),s("方法设置返回询问框的信息。例如，在支付页面中定义一个返回按钮的点击事件处理函数：")]),Xt,n("p",null,[s("自定义询问框的方式，可以使用"),n("a",np,[s("弹窗"),a(t)]),s("或者"),n("a",sp,[s("自定义弹窗"),a(t)]),s("实现。这样可以让应用界面与系统默认询问框有所区别，提高应用的用户体验度。在事件回调中，调用弹窗的"),n("a",ap,[s("promptAction.showDialog()"),a(t)]),s("方法：")]),tp,n("p",null,[s("当页面信息较多时，为了让用户能够聚焦于当前显示的内容，需要对页面内容进行分类，提高页面空间利用率。"),n("a",pp,[s("Tabs"),a(t)]),s("组件可以在一个页面内快速实现视图内容的切换，一方面提升查找信息的效率，另一方面精简用户单次获取到的信息量。")]),ep,n("ul",null,[op,cp,n("li",null,[s("List使用"),n("a",ip,[s("ForEach"),a(t)]),s("加载子组件时，无论是否设置List的宽高，都会加载所有子组件。")]),n("li",null,[s("List使用"),n("a",lp,[s("LazyForEach"),a(t)]),s("加载子组件时，没有设置List的宽高，会加载所有子组件，设置了List的宽高，会加载List显示区域内的子组件。")])]),up,a(o)])}const mp=c(f,[["render",rp],["__file","鸿蒙.html.vue"]]);export{mp as default};
