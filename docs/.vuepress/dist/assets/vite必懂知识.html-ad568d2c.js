import{_ as c,M as e,p as i,q as l,R as s,t as n,N as a,a1 as t}from"./framework-a97ca956.js";const u="/Vite/life.png",r="/Vite/vite_structure.png",d="/Vite/vite.png",k="/Vite/vite2.png",v="/Vite/vite3.png",m="/Vite/vite4.png",b={},g=t('<h1 id="vite必懂知识" tabindex="-1"><a class="header-anchor" href="#vite必懂知识" aria-hidden="true">#</a> vite必懂知识</h1><p>https://cn.vitejs.dev/guide/文档地址</p><h2 id="vite生命周期" tabindex="-1"><a class="header-anchor" href="#vite生命周期" aria-hidden="true">#</a> Vite生命周期</h2><p><img src="'+u+'" alt=""></p><p><img src="'+r+'" alt=""></p><p>生产环境不用esbuild原因是 esbuild不支持类型检查（因此Vite在生产构建要调用一次tsc），语法降级无法降级到es5</p><h2 id="_1-vite的优势" tabindex="-1"><a class="header-anchor" href="#_1-vite的优势" aria-hidden="true">#</a> 1.Vite的优势</h2><p>相对于webpack来说，当冷启动开发服务器时，基于打包器的方式启动必须优先抓取并构建你的整个应用，然后才能提供服务。<strong>也就是说打包器要先构建整个应用然后在通过devserver将构建后的js、css、html提供给浏览器</strong>。</p><p>Vite 通过在一开始将应用中的模块区分为 <strong>依赖</strong> 和 <strong>源码</strong> 两类，改进了开发服务器启动时间。</p>',9),h={href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Modules",target:"_blank",rel:"noopener noreferrer"},y=s("code",null,"Webpack",-1),f=s("code",null,"Dev Server",-1),_=s("code",null,"bundle",-1),w=s("code",null,"bundle",-1),x=s("code",null,"Vite",-1),q=s("code",null,"ESM",-1),S=s("code",null,"import",-1),V=s("code",null,"route",-1),j=t('<p><img src="'+d+`" alt=""></p><h3 id="vite快在哪" tabindex="-1"><a class="header-anchor" href="#vite快在哪" aria-hidden="true">#</a> Vite快在哪</h3><p>Vite利用服务器原生支持ESM在服务端按需编译提供代码。</p><p>1.快速的冷启动: <code>No Bundle</code> + <code>esbuild</code> 预构建 dev server\`</p><p>2.即时的模块热更新: 基于<code>ESM</code>的<code>HMR</code>，同时利用浏览器缓存策略提升速度 <code>HMR</code></p><p>3.真正的按需加载: 利用浏览器<code>ESM</code>支持，实现真正的按需加载</p><p>接下来解释几个概念</p><div class="custom-container tip"><p class="custom-container-title">TIP</p><p><code>ESM</code>的执行可以分为三个步骤：</p><ul><li><p>构建: 确定从哪里下载该模块文件、下载并将所有的文件解析为模块记录</p></li><li><p>实例化: 将模块记录转换为一个模块实例，为所有的模块分配内存空间，依照导出、导入语句把模块指向对应的内存地址。</p></li><li><p>运行：运行代码，将内存空间填充</p></li></ul></div><div class="custom-container tip"><p class="custom-container-title">TIP</p><p><code>Esbuild</code>是一个<code>JavaScript\`\` Bundler </code>打包和压缩工具，它提供了与<code>Webpack</code>、<code>Rollup</code>等工具相似的资源打包能力。可以将<code>JavaScript</code> 和<code>TypeScript</code>代码打包分发在网页上运行。但其打包速度却是其他工具的10～100倍。它提供了一些API：<code>Transform、build、context</code>https://esbuild.github.io/api/#overview详情看官方文档</p></div><p><code>Vite</code>其核心原理是利用浏览器现在已经支持<code>ES6</code>的<code>import</code>,碰见<code>import</code>就会发送一个<code>HTTP</code>请求去加载文件，<code>Vite</code>启动一个 <code>koa</code> 服务器拦截这些请求，并在后端进行相应的处理将项目中使用的文件通过简单的分解与整合，然后再以<code>ESM</code>格式返回返回给浏览器。<code>Vite</code>整个过程中没有对文件进行打包编译，做到了真正的按需加载，所以其运行速度比原始的<code>webpack</code>开发编译速度快出许多！同时，<code>Vite</code> 还利用<code>HTTP</code>加速整个页面的重新加载。设置响应头使得依赖模块(<code>dependency module</code>)进行强缓存，而源码文件通过设置 <code>304 Not Modified</code> 而变成可依据条件而进行更新。</p><h2 id="_2-hmr热更新" tabindex="-1"><a class="header-anchor" href="#_2-hmr热更新" aria-hidden="true">#</a> 2.HMR热更新</h2><p>为什么需要HMR?HMR是什么？对于开发体验来说，我们在开发时修改了代码中的某处，如果我们要想看到效果怎么办？是不是要刷新以下浏览器？这样有什么后果？我们之前的状态全部被初始化。而热更新能够做到在不刷新浏览器的情况下，保持浏览器使用的是我们最新的代码，让开发者可以立即看到所做的更改在浏览器中的反应。</p><p>目前所有的打包工具实现热更新的思路都大同小异：主要是通过<code>WebSocket</code>创建浏览器和服务器的通信监听文件的改变，当文件被修改时，服务端发送消息通知客户端修改相应的代码，客户端对应不同的文件进行不同的操作的更新。</p><p><code>Vite</code>整个热更新过程可以分成五步</p><ol><li>修改代码，vite server 监听到代码被修改</li><li>vite 计算出热更新的边界（即受到影响，需要进行更新的模块）</li><li>vite server 通过 websocket 告诉 vite client 需要进行热更新</li><li>浏览器拉取修改后的模块</li><li>执行热更新的代码</li></ol><h3 id="_2-1、vite-client客户端" tabindex="-1"><a class="header-anchor" href="#_2-1、vite-client客户端" aria-hidden="true">#</a> 2.1、vite-client客户端</h3><p>主要涉及两个api <code>hot.dispose</code> 和 <code>hot.accept</code></p><p>当我们修改内容的时候accept回调就会执行，并重新执行render函数来更新页面</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">import</span><span class="token punctuation">.</span>meta<span class="token punctuation">.</span>hot<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 调用的时候，调用的是老的模块的 accept 回调</span>
  <span class="token keyword">import</span><span class="token punctuation">.</span>meta<span class="token punctuation">.</span>hot<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">mod</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// 老的模块的 accept 回调拿到的是新的模块</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;mod&#39;</span><span class="token punctuation">,</span> mod<span class="token punctuation">)</span><span class="token punctuation">;</span>
    mod<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>dispose</code>主要是做善后工作，老模块的定时器清理。</p><p>vite开发服务器会在index.html注入一个@vite/client的脚本，当访问index.html时就会拉取该脚本，该脚本会创建<code>websocket</code></p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>en<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
+  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>module<span class="token punctuation">&quot;</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>/@vite/client<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>UTF-8<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>app<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>module<span class="token punctuation">&quot;</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>./index.ts<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//监听服务端的消息</span>
socket<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;message&#39;</span><span class="token punctuation">,</span> <span class="token keyword">async</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span>data<span class="token punctuation">}</span></span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
        <span class="token function">handleMessage</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">handleMessage</span><span class="token punctuation">(</span><span class="token parameter">payload</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">switch</span> <span class="token punctuation">(</span>payload<span class="token punctuation">.</span>type<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">case</span> <span class="token string">&#39;connected&#39;</span><span class="token operator">:</span>
        console<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">[vite] connected.</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">sendMessageBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// proxy(nginx, docker) hmr ws maybe caused timeout,</span>
        <span class="token comment">// so send ping package let ws keep alive.</span>
        <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
            <span class="token comment">// 每30秒进行一次心跳检测</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>socket<span class="token punctuation">.</span>readyState <span class="token operator">===</span> socket<span class="token punctuation">.</span><span class="token constant">OPEN</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                socket<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">&#39;{&quot;type&quot;:&quot;ping&quot;}&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token punctuation">,</span> <span class="token number">30000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> <span class="token string">&#39;update&#39;</span><span class="token operator">:</span>
        <span class="token function">notifyListeners</span><span class="token punctuation">(</span><span class="token string">&#39;vite:beforeUpdate&#39;</span><span class="token punctuation">,</span> payload<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 如果这是第一次更新，并且已经有一个错误覆盖，它意味着页面打开了现有的服务器编译错误，整个模块脚本加载失败(因为其中一个嵌套导入是500)。在这种情况下，正常的更新将不起作用，需要完全重新加载。</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>isFirstUpdate <span class="token operator">&amp;&amp;</span> <span class="token function">hasErrorOverlay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            window<span class="token punctuation">.</span>location<span class="token punctuation">.</span><span class="token function">reload</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token function">clearErrorOverlay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            isFirstUpdate <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">await</span> Promise<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span>payload<span class="token punctuation">.</span>updates<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">async</span><span class="token punctuation">(</span><span class="token parameter">update</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>update<span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token string">&#39;js-update&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> <span class="token function">queueUpdate</span><span class="token punctuation">(</span><span class="token function">fetchUpdate</span><span class="token punctuation">(</span>update<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token comment">// css-update</span>
            <span class="token comment">// 这只会在&lt;link&gt;引用的CSS文件更新时发送</span>
            <span class="token keyword">const</span> <span class="token punctuation">{</span>path<span class="token punctuation">,</span> timestamp<span class="token punctuation">}</span> <span class="token operator">=</span> update<span class="token punctuation">;</span>
            <span class="token keyword">const</span> searchUrl <span class="token operator">=</span> <span class="token function">cleanUrl</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 这里不能使用带有&#39; [href*=] &#39;的querySelector，因为链接可能使用相对路径，所以我们需要使用link。href获取包含检查的完整URL。</span>
            <span class="token keyword">const</span> el <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">&#39;link&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token operator">!</span>outdatedLinkTags<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">cleanUrl</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>href<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>searchUrl<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>el<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">const</span> newPath <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>base<span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>searchUrl<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>searchUrl<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">&#39;?&#39;</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token string">&#39;&amp;&#39;</span> <span class="token operator">:</span> <span class="token string">&#39;?&#39;</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">t=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>timestamp<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>
            <span class="token comment">// 我们将创建一个新的链接标记，而不是在现有标记上交换href。一旦加载了新的样式表，我们将删除现有的link标签。这就消除了在直接交换标签href时可能出现的Flash Of Unstyled Content（页面在加载时，由于CSS文件的延迟加载或下载速度缓慢，导致页面先以无样式的状态呈现（即未经过CSS修饰的原始状态），然后在CSS文件下载完成后，再重新渲染页面，出现样式突然改变的短暂闪烁效果。），因为新的样式表还没有加载。</span>
            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
                <span class="token keyword">const</span> newLinkTag <span class="token operator">=</span> el<span class="token punctuation">.</span><span class="token function">cloneNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                newLinkTag<span class="token punctuation">.</span>href <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URL</span><span class="token punctuation">(</span>newPath<span class="token punctuation">,</span>el<span class="token punctuation">.</span>href<span class="token punctuation">)</span><span class="token punctuation">.</span>href<span class="token punctuation">;</span>
                <span class="token keyword">const</span> <span class="token function-variable function">removeOldEl</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
                    el<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    console<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">[vite] css hot updated: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>searchUrl<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token punctuation">;</span>
                newLinkTag<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;load&#39;</span><span class="token punctuation">,</span> removeOldEl<span class="token punctuation">)</span><span class="token punctuation">;</span>
                newLinkTag<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;error&#39;</span><span class="token punctuation">,</span> removeOldEl<span class="token punctuation">)</span><span class="token punctuation">;</span>
                outdatedLinkTags<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>el<span class="token punctuation">)</span><span class="token punctuation">;</span>
                el<span class="token punctuation">.</span><span class="token function">after</span><span class="token punctuation">(</span>newLinkTag<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">notifyListeners</span><span class="token punctuation">(</span><span class="token string">&#39;vite:afterUpdate&#39;</span><span class="token punctuation">,</span> payload<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> <span class="token string">&#39;custom&#39;</span><span class="token operator">:</span>
        <span class="token punctuation">{</span>
            <span class="token function">notifyListeners</span><span class="token punctuation">(</span>payload<span class="token punctuation">.</span>event<span class="token punctuation">,</span> payload<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token keyword">case</span> <span class="token string">&#39;full-reload&#39;</span><span class="token operator">:</span>
        <span class="token function">notifyListeners</span><span class="token punctuation">(</span><span class="token string">&#39;vite:beforeFullReload&#39;</span><span class="token punctuation">,</span> payload<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>payload<span class="token punctuation">.</span>path <span class="token operator">&amp;&amp;</span> payload<span class="token punctuation">.</span>path<span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">&#39;.html&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 如果编辑了HTML文件，只有当浏览器当前在该页面上时才重新加载该页。</span>
            <span class="token keyword">const</span> pagePath <span class="token operator">=</span> <span class="token function">decodeURI</span><span class="token punctuation">(</span>location<span class="token punctuation">.</span>pathname<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">const</span> payloadPath <span class="token operator">=</span> base <span class="token operator">+</span> payload<span class="token punctuation">.</span>path<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>pagePath <span class="token operator">===</span> payloadPath <span class="token operator">||</span> payload<span class="token punctuation">.</span>path <span class="token operator">===</span> <span class="token string">&#39;/index.html&#39;</span> <span class="token operator">||</span> <span class="token punctuation">(</span>pagePath<span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">&#39;/&#39;</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> pagePath <span class="token operator">+</span> <span class="token string">&#39;index.html&#39;</span> <span class="token operator">===</span> payloadPath<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                location<span class="token punctuation">.</span><span class="token function">reload</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            location<span class="token punctuation">.</span><span class="token function">reload</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> <span class="token string">&#39;prune&#39;</span><span class="token operator">:</span>
        <span class="token function">notifyListeners</span><span class="token punctuation">(</span><span class="token string">&#39;vite:beforePrune&#39;</span><span class="token punctuation">,</span> payload<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 利用dispose清除旧模块的副作用例如定时器</span>
        payload<span class="token punctuation">.</span>paths<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">path</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
            <span class="token keyword">const</span> fn <span class="token operator">=</span> pruneMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>fn<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token function">fn</span><span class="token punctuation">(</span>dataMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> <span class="token string">&#39;error&#39;</span><span class="token operator">:</span>
        <span class="token punctuation">{</span>
            <span class="token function">notifyListeners</span><span class="token punctuation">(</span><span class="token string">&#39;vite:error&#39;</span><span class="token punctuation">,</span> payload<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">const</span> err <span class="token operator">=</span> payload<span class="token punctuation">.</span>err<span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>enableOverlay<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token function">createErrorOverlay</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">[vite] Internal Server Error\\n </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>err<span class="token punctuation">.</span>message<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">\\n </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>err<span class="token punctuation">.</span>stack<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token keyword">default</span><span class="token operator">:</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">const</span> check <span class="token operator">=</span> payload<span class="token punctuation">;</span>
            <span class="token keyword">return</span> check<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-2、热更新边界" tabindex="-1"><a class="header-anchor" href="#_2-2、热更新边界" aria-hidden="true">#</a> 2.2、热更新边界</h3><p>即一个文件被修改，vite会沿着依赖树向上找最近的一个可以热更新模块作为热更新边界，然后对其进行热更新。而对于没有上层可热更新的模块就会刷新页面，例如在vue项目中main.ts文件。当我改了vue中的style代码后浏览器拉取的结果</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> createHotContext <span class="token keyword">as</span> __vite__createHotContext <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;/@vite/client&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span><span class="token punctuation">.</span>meta<span class="token punctuation">.</span>hot <span class="token operator">=</span> <span class="token function">__vite__createHotContext</span><span class="token punctuation">(</span><span class="token string">&quot;/src/components/VirtualList.vue?vue&amp;type=style&amp;index=0&amp;scoped=101d0ae3&amp;lang.scss&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> updateStyle <span class="token keyword">as</span> __vite__updateStyle<span class="token punctuation">,</span> removeStyle <span class="token keyword">as</span> __vite__removeStyle <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;/@vite/client&quot;</span>
<span class="token keyword">const</span> __vite__id <span class="token operator">=</span> <span class="token string">&quot;这个id是绝对路径&quot;</span>
<span class="token keyword">const</span> __vite__css <span class="token operator">=</span> <span class="token string">&quot;@charset \\&quot;UTF-8\\&quot;;\\n.container[data-v-101d0ae3] {\\n  width: var(--101d0ae3-props\\\\.style\\\\.width);\\n  height: var(--101d0ae3-props\\\\.style\\\\.height);\\n  background: var(--101d0ae3-props\\\\.style\\\\.background);\\n}\\n.container .scroll_container[data-v-101d0ae3]::-webkit-scrollbar {\\n  width: 10px; /* 滚动条的宽度 */\\n  background-color: #f5f5f5; /* 滚动条的背景颜色 */\\n}\\n.container .scroll_container[data-v-101d0ae3]::-webkit-scrollbar-thumb {\\n  background-color: greenyellow; /* 滚动条拖动块的颜色 */\\n}\\n.container .scroll_container[data-v-101d0ae3] {\\n  position: relative;\\n  overflow: auto;\\n  -webkit-overflow-scrolling: touch;\\n  width: 100%;\\n  height: 100%;\\n}\\n.container .scroll_container .pillar[data-v-101d0ae3] {\\n  position: absolute;\\n  right: 0;\\n  left: 0;\\n  top: 0;\\n  z-index: -1;\\n  height: var(--101d0ae3-scroll_height);\\n}\\n.container .scroll_container .items[data-v-101d0ae3] {\\n  height: 100%;\\n  z-index: 10;\\n  top: 0;\\n  left: 0;\\n  right: 2px;\\n  position: absolute;\\n  box-sizing: border-box;\\n}\\n.container .scroll_container .items .item[data-v-101d0ae3] {\\n  width: 100%;\\n  line-height: calc(var(--101d0ae3-props\\\\.item_height) * 1px);\\n  height: calc(var(--101d0ae3-props\\\\.item_height) * 1px);\\n  box-sizing: border-box;\\n}&quot;</span>
<span class="token function">__vite__updateStyle</span><span class="token punctuation">(</span>__vite__id<span class="token punctuation">,</span> __vite__css<span class="token punctuation">)</span>
<span class="token keyword">import</span><span class="token punctuation">.</span>meta<span class="token punctuation">.</span>hot<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> __vite__css
<span class="token keyword">import</span><span class="token punctuation">.</span>meta<span class="token punctuation">.</span>hot<span class="token punctuation">.</span><span class="token function">prune</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">__vite__removeStyle</span><span class="token punctuation">(</span>__vite__id<span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-预构建" tabindex="-1"><a class="header-anchor" href="#_3-预构建" aria-hidden="true">#</a> 3.预构建</h2><p>Vite使用esbuild进行预构建。Vite将预编译后的文件缓存到<code>node_modules/.vite</code>文件夹下（一般是第三方依赖），由于预编译的文件已经被打包和优化过了，这样浏览器再加载这些文件的时候不需要再构建直接将预构建的文件给浏览器。</p><h3 id="_3-1预构建的意义" tabindex="-1"><a class="header-anchor" href="#_3-1预构建的意义" aria-hidden="true">#</a> 3.1预构建的意义</h3><ol><li>为了兼容<code>commenJS</code>，我们知道Vite使用<code>ESM</code>，那么Vite必须将使用commenJS或UMD规范的依赖转成ESM</li><li>模块之间有众多依赖关系，Vite将依赖关系转成单个模块来提高后续加载性能，说白了为了减少模块和请求数量。什么意思？例如，<code>lodsh-es</code>,当我们执行 <code>import { debounce } from &#39;lodash-es&#39;</code> 时，浏览器同时发出 600 多个 HTTP 请求！尽管服务器在处理这些请求时没有问题，但大量的请求会在浏览器端造成网络拥塞，导致页面的加载速度相当慢。通过预构建 <code>lodash-es</code> 成为一个模块，我们就只需要一个 HTTP 请求了。</li></ol><h3 id="_3-2如何进行预构建" tabindex="-1"><a class="header-anchor" href="#_3-2如何进行预构建" aria-hidden="true">#</a> 3.2如何进行预构建</h3><p><strong>①依赖扫描</strong>：找出第三方依赖，并进行键值对形式存储。然后将这些第三方依赖先进行构建。</p><p>vite从入口的 HTML 文件开始，根据模块的 import 依赖关系，可以连接成一颗模块依赖树。要扫描出所有的 bare import，就需要遍历整个依赖树，这就涉及到了<strong>树的深度遍历</strong>，我们只需要深度遍历所有树节点，<strong>找出所有 import 语句，把 import 的模块记录下来</strong>即可，对于第三方依赖会被记录，对于开发者的模块会继续进行遍历。</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
<span class="token property">&quot;vue&quot;</span><span class="token operator">:</span><span class="token string">&quot;vite/node_modules/.pnpm/vue@3.2.37/node_modules/vue/dist/vue.runtime.esm-bundler.js&quot;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>②打包依赖</strong>：依赖扫描已经拿到了所有需要预构建的依赖信息，那接下来直接使用 esbuild 进行打包即可。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> build <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;esbuild&#39;</span>

<span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">absWorkingDir</span><span class="token operator">:</span> process<span class="token punctuation">.</span><span class="token function">cwd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token literal-property property">entryPoints</span><span class="token operator">:</span> <span class="token punctuation">[</span> <span class="token string">&#39;vue&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;lodash-es&#39;</span> <span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token literal-property property">bundle</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token literal-property property">format</span><span class="token operator">:</span> <span class="token string">&#39;esm&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">target</span><span class="token operator">:</span> <span class="token punctuation">[</span>
        <span class="token string">&quot;es2020&quot;</span><span class="token punctuation">,</span>
        <span class="token string">&quot;edge88&quot;</span><span class="token punctuation">,</span>
        <span class="token string">&quot;firefox78&quot;</span><span class="token punctuation">,</span>
        <span class="token string">&quot;chrome87&quot;</span><span class="token punctuation">,</span>
        <span class="token string">&quot;safari13&quot;</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token literal-property property">splitting</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token comment">// 该参数会自动进行代码分割，在多个 entry 入口之间共享的代码，会被分成单独共享文件（chunk 文件）</span>
    <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span> <span class="token comment">/* some plugin */</span> <span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token comment">// 省略其他配置</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+k+'" alt=""></p><h3 id="_3-3路径替换" tabindex="-1"><a class="header-anchor" href="#_3-3路径替换" aria-hidden="true">#</a> 3.3路径替换</h3><p>我们的裸模块使用的是Nodejs的模块查找方法（去node_modules中查找），而浏览器不理解，因此需要把<code>import vue</code>转成<code>import “/node_modules/.vite/deps/vue.js”</code>,这样浏览器在处理到import时会给vite服务器发送请求，请求该文件，然后vite服务器中间件处理后将模块给浏览器。</p><h2 id="_4-vite如何处理页面资源" tabindex="-1"><a class="header-anchor" href="#_4-vite如何处理页面资源" aria-hidden="true">#</a> 4.vite如何处理页面资源</h2><p>所有的类 JS 模块（包括 Vue），CSS 模块，都会在 <code>transfrom</code> 中间件中进行处理</p>',41),T=s("code",null,"resolveId",-1),E=s("code",null,"load",-1),M=s("code",null,"transform",-1),C={href:"https://link.juejin.cn?target=https%3A%2F%2Fcn.vitejs.dev%2Fguide%2Fapi-plugin.html%23universal-hooks",target:"_blank",rel:"noopener noreferrer"},L=t('<ul><li><code>html</code> 处理中间件，通过调用插件的 <code>transformIndexHtml</code> 对 <code>html</code> 页面进行处理。</li><li><code>TS</code> 处理中间件，通过调用插件的 <code>resolveId</code>、<code>load</code>、<code>transform</code> 这三个钩子，对代码进行处理的</li></ul><h2 id="_4-缓存机制" tabindex="-1"><a class="header-anchor" href="#_4-缓存机制" aria-hidden="true">#</a> 4.缓存机制</h2><p>Vite并使用 HTTP 304 Not Modified 状态码来指示浏览器使用缓存的资源。这样可以避免不必要的资源下载和带宽消耗。</p><p>当浏览器请求一个静态资源时，Vite会在服务器端检查该资源是否已被缓存。如果该资源已被缓存，Vite会在响应头中设置 Last-Modified 和 <code>ETag</code> 两个字段，并使用 <code>HTTP 304 Not Modified</code> 状态码返回响应。这告诉浏览器可以使用缓存的资源，而无需重新下载该资源。.</p><p>在后续的请求中，浏览器会将 Last-Modified 和 ETag 字段的值与服务器端缓存的值进行比较，以判断资源是否已被修改。如果资源未被修改，Vite会返回 HTTP 304 Not Modified 状态码，告诉浏览器可以使用缓存的资源。如果资源已被修改，Vite会返回新的资源内容和响应码200 OK。</p><p><img src="'+v+'" alt=""></p><p>当修改文件后</p><p><img src="'+m+`" alt=""></p><h2 id="_5-总结" tabindex="-1"><a class="header-anchor" href="#_5-总结" aria-hidden="true">#</a> 5.总结</h2><ol><li>Vite开发环境利用esbuild进行预构建。（这也是Vite首屏加载慢的原因）</li><li>Vite利用浏览器原生esm，实现按需加载，在加载资源时用中间件拦截然后处理</li><li>Vite将静态资源进行缓存，并使用热更新。</li></ol><h2 id="_6-vite性能优化" tabindex="-1"><a class="header-anchor" href="#_6-vite性能优化" aria-hidden="true">#</a> 6.Vite性能优化</h2><p>构建分析</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// npm install rollup-plugin-visualizer -D</span>
<span class="token comment">// vite.config.js</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> defineConfig <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vite&#39;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> visualizer <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;rollup-plugin-visualizer&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineConfig</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token comment">// 将 visualizer 插件放到最后</span>
    <span class="token function">visualizer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">]</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>①分包 这里包括路由懒加载</p><p>②Treeshaking</p><p>③gzip压缩</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// npm i vite-plugin-compression -D</span>
<span class="token comment">// vite.config.js</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> defineConfig <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vite&#39;</span>
<span class="token keyword">import</span> viteCompression <span class="token keyword">from</span> <span class="token string">&#39;vite-plugin-compression&#39;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineConfig</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token function">viteCompression</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>④CDN</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// npm i vite-plugin-cdn-import -D</span>
<span class="token comment">// vite.config.js</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> defineConfig <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vite&#39;</span>
<span class="token keyword">import</span> viteCDNPlugin <span class="token keyword">from</span> <span class="token string">&#39;vite-plugin-cdn-import&#39;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineConfig</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token function">viteCDNPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      <span class="token comment">// 需要 CDN 加速的模块</span>
      <span class="token literal-property property">modules</span><span class="token operator">:</span> <span class="token punctuation">[</span>
        <span class="token punctuation">{</span>
          <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;lodash&#39;</span><span class="token punctuation">,</span>
          <span class="token keyword">var</span><span class="token operator">:</span> <span class="token string">&#39;_&#39;</span><span class="token punctuation">,</span>
          <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">https://cdn.jsdelivr.net/npm/lodash@4.17.21/lodash.min.js</span><span class="token template-punctuation string">\`</span></span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">]</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">]</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>⑤图片压缩</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// npm i vite-plugin-imagemin -D</span>
<span class="token comment">// vite.config.js</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> defineConfig <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vite&#39;</span>
<span class="token keyword">import</span> viteImagemin <span class="token keyword">from</span> <span class="token string">&#39;vite-plugin-imagemin&#39;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineConfig</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token function">viteImagemin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      <span class="token literal-property property">gifsicle</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">optimizationLevel</span><span class="token operator">:</span> <span class="token number">7</span><span class="token punctuation">,</span>
        <span class="token literal-property property">interlaced</span><span class="token operator">:</span> <span class="token boolean">false</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token literal-property property">optipng</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">optimizationLevel</span><span class="token operator">:</span> <span class="token number">7</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token literal-property property">mozjpeg</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">quality</span><span class="token operator">:</span> <span class="token number">20</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token literal-property property">pngquant</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">quality</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">0.8</span><span class="token punctuation">,</span> <span class="token number">0.9</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
        <span class="token literal-property property">speed</span><span class="token operator">:</span> <span class="token number">4</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token literal-property property">svgo</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>
          <span class="token punctuation">{</span>
            <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;removeViewBox&#39;</span>
          <span class="token punctuation">}</span><span class="token punctuation">,</span>
          <span class="token punctuation">{</span>
            <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;removeEmptyAttrs&#39;</span><span class="token punctuation">,</span>
            <span class="token literal-property property">active</span><span class="token operator">:</span> <span class="token boolean">false</span>
          <span class="token punctuation">}</span>
        <span class="token punctuation">]</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">]</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,21);function P(U,H){const p=e("ExternalLinkIcon"),o=e("CommentService");return i(),l("div",null,[g,s("p",null,[n("Vite 以 "),s("a",h,[n("原生 ESM"),a(p)]),n(" 方式提供源码。这实际上是让浏览器接管了打包程序的部分工作：Vite 只需要在浏览器请求源码时进行转换并按需提供源码。根据情景动态导入代码，即只在当前屏幕上实际使用时才会被处理。借用官方的图,我们可以看到Vite是按需加载，传统的打包工具如"),y,n("是先解析依赖、打包构建再启动开发服务器，"),f,n(" 必须等待所有模块构建完成，当我们修改了 "),_,n("模块中的一个子模块， 整个 "),w,n(" 文件都会重新打包然后输出。项目应用越大，启动时间越长。而"),x,n("利用浏览器对"),q,n("的支持，当 "),S,n(" 模块时，浏览器就会下载被导入的模块。先启动开发服务器，当代码执行到模块加载时再请求对应模块的文件,本质上实现了动态加载。灰色部分是暂时没有用到的路由，所有这部分不会参与构建过程。随着项目里的应用越来越多，增加"),V,n("，也不会影响其构建速度。")]),j,s("p",null,[n("每个模块都会经过 "),T,n("、"),E,n("、"),M,n(" 三个流程，这三个流程，可以通过 "),s("a",C,[n("Vite 插件"),a(p)]),n("去扩展，可以在这三个过程中做一些特殊处理")]),L,a(o)])}const z=c(b,[["render",P],["__file","vite必懂知识.html.vue"]]);export{z as default};
