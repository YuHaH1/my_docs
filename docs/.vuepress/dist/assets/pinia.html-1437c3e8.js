import{_ as c,M as e,p as i,q as l,R as n,t as s,N as a,a1 as t}from"./framework-f7ec573f.js";const u="/Vue/pinia.png",r={},k=t(`<h1 id="pinia" tabindex="-1"><a class="header-anchor" href="#pinia" aria-hidden="true">#</a> pinia</h1><h2 id="为什么vue3放弃vuex4" tabindex="-1"><a class="header-anchor" href="#为什么vue3放弃vuex4" aria-hidden="true">#</a> 为什么vue3放弃vuex4</h2><ol><li>pinia比较轻量，只有1kb左右</li><li>良好的TS支持</li><li>使用更简单方便，不需要像Vuex一样，如果数据过多通常分模块管理。而pinia每个store都是独立的</li><li>pinia支持插件扩展自身功能</li><li>pinia放弃mutation，action支持同步和异步</li><li>服务器端渲染支持</li><li>开发工具支持 <ul><li>跟踪动作、突变的时间表</li><li>商店出现在使用它们的组件中</li><li>时间旅行和更容易的调试</li></ul></li><li>热模块更换 <ul><li>在不重新加载页面的情况下修改您的商店</li><li>在开发时保持任何现有状态</li></ul></li></ol><h2 id="_1-定义一个模块商店" tabindex="-1"><a class="header-anchor" href="#_1-定义一个模块商店" aria-hidden="true">#</a> 1.定义一个模块商店</h2><p>https://pinia.vuejs.org/core-concepts/</p><h3 id="_1-1、对象方式定义商店" tabindex="-1"><a class="header-anchor" href="#_1-1、对象方式定义商店" aria-hidden="true">#</a> 1.1、对象方式定义商店</h3><p>在深入研究核心概念之前，我们需要知道存储是使用定义的<code>defineStore()</code>，并且它需要一个<strong>唯一的</strong>名称，作为第一个参数传递：</p><p>这个<em>名称</em>，也称为<em>id</em>，是必要的，Pania 使用它来将商店连接到 devtools。将返回的函数命名为*use...*是可组合项之间的约定，以使其使用习惯。</p><p>与 Vue 的 Options API 类似，也可以传递带有<code>state</code>、<code>actions</code>和<code>getters</code>属性的 Options 对象。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">const</span> useCounterStore <span class="token operator">=</span> <span class="token function">defineStore</span><span class="token punctuation">(</span><span class="token string">&#39;counter&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token function-variable function">state</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">count</span><span class="token operator">:</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token literal-property property">getters</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token function-variable function">double</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">state</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> state<span class="token punctuation">.</span>count <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">actions</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>count<span class="token operator">++</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>==如果解构使用商店定义的属性会失去响应式，因为state是用reactive，因此解构会导致失去响应式==</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> storeToRefs <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;pinia&#39;</span><span class="token comment">//可以使用这个api来保持响应式</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineComponent</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token function">useStore</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token comment">// ❌ 解构会破坏响应式</span>
    <span class="token keyword">const</span> <span class="token punctuation">{</span> name<span class="token punctuation">,</span> doubleCount <span class="token punctuation">}</span> <span class="token operator">=</span> store
    <span class="token comment">//保持响应式</span>
    <span class="token keyword">const</span> <span class="token punctuation">{</span> name<span class="token punctuation">,</span> doubleCount <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">storeToRefs</span><span class="token punctuation">(</span>store<span class="token punctuation">)</span>

    name <span class="token comment">// &quot;eduardo&quot;</span>
    doubleCount <span class="token comment">// 2</span>

    <span class="token keyword">return</span> <span class="token punctuation">{</span>
      <span class="token comment">// will always be &quot;eduardo&quot;</span>
      name<span class="token punctuation">,</span>
      <span class="token comment">// will always be 2</span>
      doubleCount<span class="token punctuation">,</span>
      <span class="token comment">// this one will be reactive</span>
      <span class="token literal-property property">doubleValue</span><span class="token operator">:</span> <span class="token function">computed</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> store<span class="token punctuation">.</span>doubleCount<span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-2、函数的方式定义商店" tabindex="-1"><a class="header-anchor" href="#_1-2、函数的方式定义商店" aria-hidden="true">#</a> 1.2、函数的方式定义商店</h3>`,13),d={href:"https://vuejs.org/api/composition-api-setup.html",target:"_blank",rel:"noopener noreferrer"},v=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> ref <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> useCounterStore <span class="token operator">=</span> <span class="token function">defineStore</span><span class="token punctuation">(</span><span class="token string">&#39;counter&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> count <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
  <span class="token keyword">function</span> <span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    count<span class="token punctuation">.</span>value<span class="token operator">++</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">return</span> <span class="token punctuation">{</span> count<span class="token punctuation">,</span> increment <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在<em>设置商店</em>中：</p><ul><li><code>ref()</code>s 成为<code>state</code>属性</li><li><code>computed()</code>变成<code>getters</code></li><li><code>function()</code>变成<code>actions</code></li></ul><h3 id="_2-状态" tabindex="-1"><a class="header-anchor" href="#_2-状态" aria-hidden="true">#</a> 2.状态</h3><p>在 Pinia 中，状态被定义为返回初始状态的函数。这允许 Pinia 在服务器端和客户端工作。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> defineStore <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;pinia&#39;</span>

<span class="token keyword">const</span> useStore <span class="token operator">=</span> <span class="token function">defineStore</span><span class="token punctuation">(</span><span class="token string">&#39;storeId&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token comment">// arrow function recommended for full type inference</span>
  <span class="token function-variable function">state</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
      <span class="token comment">// all these properties will have their type inferred automatically</span>
      <span class="token literal-property property">counter</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
      <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;Eduardo&#39;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">isAdmin</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><h1 id="关于state状态操作" tabindex="-1"><a class="header-anchor" href="#关于state状态操作" aria-hidden="true">#</a> 关于state状态操作</h1><ol><li>重置状态</li></ol><ul><li><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token function">useStore</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
store<span class="token punctuation">.</span><span class="token function">$reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></blockquote><h3 id="_2-1、修改状态的多种方式" tabindex="-1"><a class="header-anchor" href="#_2-1、修改状态的多种方式" aria-hidden="true">#</a> 2.1、修改状态的多种方式</h3><blockquote><h1 id="直接修改" tabindex="-1"><a class="header-anchor" href="#直接修改" aria-hidden="true">#</a> 直接修改</h1><p>默认情况下，您可以通过<code>store</code>实例访问状态来直接读取和写入状态：</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token function">useStore</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
store<span class="token punctuation">.</span>counter<span class="token operator">++</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><h1 id="通过-patch方法。state它允许您对部分对象同时应用多个更改" tabindex="-1"><a class="header-anchor" href="#通过-patch方法。state它允许您对部分对象同时应用多个更改" aria-hidden="true">#</a> 通过<code>$patch</code>方法。<code>state</code>它允许您对部分对象同时应用多个更改：</h1></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>store<span class="token punctuation">.</span><span class="token function">$patch</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">counter</span><span class="token operator">:</span> store<span class="token punctuation">.</span>counter <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>
  <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">120</span><span class="token punctuation">,</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;DIO&#39;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>但是，使用这种语法应用某些突变确实很难或代价高昂：任何集合修改（例如，从数组中推送、删除、拼接元素）都需要您创建一个新集合。正因为如此，该<code>$patch</code>方法还接受一个函数来对这种难以用补丁对象应用的突变进行分组：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>cartStore.$patch((state) =&gt; {
  state.items.push({ name: &#39;shoes&#39;, quantity: 1 })
  state.hasChanged = true
})
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-2、订阅状态" tabindex="-1"><a class="header-anchor" href="#_2-2、订阅状态" aria-hidden="true">#</a> 2.2、订阅状态</h3><p>用来监测数据变化</p>`,16),m=n("code",null,"$subscribe()",-1),b={href:"https://vuex.vuejs.org/api/#subscribe",target:"_blank",rel:"noopener noreferrer"},g=n("code",null,"$subscribe()",-1),f=n("code",null,"watch()",-1),h=n("em",null,"订阅",-1),y=n("em",null,"补丁",-1),w=t(`<p>默认情况下，<em>状态订阅</em>绑定到添加它们的组件（如果存储在组件的内部<code>setup()</code>）。意思是，<strong>当组件被卸载时，它们将被自动删除</strong>。如果要在组件卸载后保留它们，请<code>{ detached: true }</code>作为第二个参数传递以从当前组件中<em>分离**状态订阅：</em></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> someStore <span class="token operator">=</span> <span class="token function">useSomeStore</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token comment">// this subscription will be kept after the component is unmounted</span>
    someStore<span class="token punctuation">.</span><span class="token function">$subscribe</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">mutation<span class="token punctuation">,</span>state</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
    	
    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">detached</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>

    <span class="token comment">// ...</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
<span class="token comment">//参数mutation</span>
<span class="token punctuation">{</span><span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;patch function&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">storeId</span><span class="token operator">:</span> <span class="token string">&#39;count&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">events</span><span class="token operator">:</span> <span class="token function">Array</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">}</span>
<span class="token literal-property property">events</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>…<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>…<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>…<span class="token punctuation">}</span><span class="token punctuation">]</span>
<span class="token literal-property property">storeId</span><span class="token operator">:</span> <span class="token string">&quot;count&quot;</span>
<span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&quot;patch function&quot;</span> <span class="token comment">//如果是直接修改state中内容，type就是direct ，如果是$patch对象式就是&#39;patch object&#39; 如果是$patch函数式&#39;patch function&#39;</span>
<span class="token punctuation">[</span><span class="token punctuation">[</span>Prototype<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">:</span> Object
<span class="token comment">//events是修改的数据对象</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>类似于watch</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">watch</span><span class="token punctuation">(</span>
  pinia<span class="token punctuation">.</span>state<span class="token punctuation">,</span>
  <span class="token punctuation">(</span><span class="token parameter">state</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// persist the whole state to the local storage whenever it changes</span>
    localStorage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span><span class="token string">&#39;piniaState&#39;</span><span class="token punctuation">,</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span> <span class="token literal-property property">deep</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span>
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-getters" tabindex="-1"><a class="header-anchor" href="#_3-getters" aria-hidden="true">#</a> 3.getters</h2><p>大多数时候，getter 只会依赖状态，但是，他们可能需要使用其他 getter。因此，我们可以在定义常规函数时访问整个*store 实例，<em><strong>但需要定义返回类型的类型（在 TypeScript 中）</strong>。这是由于 TypeScript 中的一个已知限制，<strong>不会影响使用箭头函数定义的 getter，也不会影响不使用的 getter</strong>：<code>this</code></em><em><code>this</code></em>*</p><div class="language-tsx line-numbers-mode" data-ext="tsx"><pre class="language-tsx"><code><span class="token keyword">export</span> <span class="token keyword">const</span> useStore <span class="token operator">=</span> <span class="token function">defineStore</span><span class="token punctuation">(</span><span class="token string">&#39;main&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token function-variable function">state</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>
    counter<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  getters<span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token comment">// automatically infers the return type as a number</span>
    <span class="token function">doubleCount</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> state<span class="token punctuation">.</span>counter <span class="token operator">*</span> <span class="token number">2</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token comment">// the return type **must** be explicitly set</span>
    <span class="token function">doublePlusOne</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span> <span class="token punctuation">{</span>
      <span class="token comment">// autocompletion and typings for the whole store ✨</span>
      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>doubleCount <span class="token operator">+</span> <span class="token number">1</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-1、访问getters内部其他计算属性" tabindex="-1"><a class="header-anchor" href="#_3-1、访问getters内部其他计算属性" aria-hidden="true">#</a> 3.1、访问getters内部其他计算属性</h3>`,8),S=n("code",null,"this",-1),_={href:"https://jsdoc.app/tags-returns.html",target:"_blank",rel:"noopener noreferrer"},x=t(`<div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">const</span> useStore <span class="token operator">=</span> <span class="token function">defineStore</span><span class="token punctuation">(</span><span class="token string">&#39;main&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token function-variable function">state</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>
    counter<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  getters<span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token comment">// 类型是自动推断出来的，因为我们没有使用&quot; this &quot; </span>
    <span class="token function-variable function">doubleCount</span><span class="token operator">:</span> <span class="token punctuation">(</span>state<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> state<span class="token punctuation">.</span>counter <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">,</span>
    <span class="token comment">// here we need to add the type ourselves (using JSDoc in JS). We can also</span>
    <span class="token comment">// use this to document the getter</span>
    <span class="token doc-comment comment">/**
     * Returns the counter value times two plus one.
     *
     * <span class="token keyword">@returns</span> <span class="token punctuation">{</span>number<span class="token punctuation">}</span>
     */</span>
    <span class="token function">doubleCountPlusOne</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// autocompletion ✨</span>
      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>doubleCount <span class="token operator">+</span> <span class="token number">1</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-2、将参数传递给" tabindex="-1"><a class="header-anchor" href="#_3-2、将参数传递给" aria-hidden="true">#</a> 3.2、将参数传递给</h3><p>==请注意，执行此操作时，<strong>getter 不再缓存</strong>，它们只是您调用的函数。但是，您可以在 getter 本身内部缓存一些结果，这并不常见，但应该证明性能更高：==</p><p><em>Getter</em>只是在幕后<em>计算</em>的属性，因此不可能将任何参数传递给它们。但是，您可以从<em>getter</em>返回一个函数以接受任何参数：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">const</span> useStore <span class="token operator">=</span> <span class="token function">defineStore</span><span class="token punctuation">(</span><span class="token string">&#39;main&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
  getters<span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token function-variable function">getUserById</span><span class="token operator">:</span> <span class="token punctuation">(</span>state<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token punctuation">(</span>userId<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> state<span class="token punctuation">.</span>users<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> user<span class="token punctuation">.</span>id <span class="token operator">===</span> userId<span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token function">useStore</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span> <span class="token literal-property property">getUserById</span><span class="token operator">:</span> store<span class="token punctuation">.</span>getUserById <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>User 2: {{ getUserById(2) }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们可以在函数内部自己做缓存来提高性能</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">const</span> useStore <span class="token operator">=</span> <span class="token function">defineStore</span><span class="token punctuation">(</span><span class="token string">&#39;main&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
  getters<span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token function">getActiveUserById</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> activeUsers <span class="token operator">=</span> state<span class="token punctuation">.</span>users<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> user<span class="token punctuation">.</span>active<span class="token punctuation">)</span>
      <span class="token keyword">return</span> <span class="token punctuation">(</span>userId<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> activeUsers<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> user<span class="token punctuation">.</span>id <span class="token operator">===</span> userId<span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-3、访问其他商店的getters" tabindex="-1"><a class="header-anchor" href="#_3-3、访问其他商店的getters" aria-hidden="true">#</a> 3.3、访问其他商店的getters</h3><p>要使用其他存储 getter，您可以直接在<em>getter</em>内部<em>使用它</em>：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> useOtherStore <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./other-store&#39;</span>

<span class="token keyword">export</span> <span class="token keyword">const</span> useStore <span class="token operator">=</span> <span class="token function">defineStore</span><span class="token punctuation">(</span><span class="token string">&#39;main&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token function-variable function">state</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token comment">// ...</span>
      localData
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  getters<span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token function">otherGetter</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> otherStore <span class="token operator">=</span> <span class="token function">useOtherStore</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token keyword">return</span> state<span class="token punctuation">.</span>localData <span class="token operator">+</span> otherStore<span class="token punctuation">.</span>data
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4-actions" tabindex="-1"><a class="header-anchor" href="#_4-actions" aria-hidden="true">#</a> 4.actions</h2><h3 id="_4-1、访问其他商店操作" tabindex="-1"><a class="header-anchor" href="#_4-1、访问其他商店操作" aria-hidden="true">#</a> 4.1、访问其他商店操作</h3><p>要使用另一个商店，您可以直接在<em>action</em>内部<em>使用它</em>：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>import { useAuthStore } from &#39;./auth-store&#39;

export const useSettingsStore = defineStore(&#39;settings&#39;, {
  state: () =&gt; ({
    preferences: null,
    // ...
  }),
  actions: {
    async fetchUserPreferences() {
      const auth = useAuthStore()
      if (auth.isAuthenticated) {
        this.preferences = await fetchPreferences()
      } else {
        throw new Error(&#39;User must be authenticated&#39;)
      }
    },
  },
})
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-2、用法与setup" tabindex="-1"><a class="header-anchor" href="#_4-2、用法与setup" aria-hidden="true">#</a> 4.2、用法与setup()</h3><p>您可以直接调用任何操作作为 store 的方法：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>export default {
  setup() {
    const store = useStore()

    store.randomizeCounter()
  },
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-3、订阅行为" tabindex="-1"><a class="header-anchor" href="#_4-3、订阅行为" aria-hidden="true">#</a> 4.3、订阅行为</h3>`,19),$=n("code",null,"store.$onAction()",-1),j=n("code",null,"after",-1),I=n("code",null,"onError",-1),E={href:"https://v3.vuejs.org/guide/tooling/deployment.html#tracking-runtime-errors",target:"_blank",rel:"noopener noreferrer"},O=t(`<p>这是一个在运行操作之前和它们解决/拒绝之后记录的示例。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> unsubscribe <span class="token operator">=</span> someStore<span class="token punctuation">.</span><span class="token function">$onAction</span><span class="token punctuation">(</span>
  <span class="token punctuation">(</span><span class="token punctuation">{</span>
    name<span class="token punctuation">,</span> <span class="token comment">// name of the action</span>
    store<span class="token punctuation">,</span> <span class="token comment">// store instance, same as \`someStore\`</span>
    args<span class="token punctuation">,</span> <span class="token comment">// array of parameters passed to the action</span>
    after<span class="token punctuation">,</span> <span class="token comment">// hook after the action returns or resolves</span>
    onError<span class="token punctuation">,</span> <span class="token comment">// hook if the action throws or rejects</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// a shared variable for this specific action call</span>
    <span class="token keyword">const</span> startTime <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token comment">// this will trigger before an action on \`store\` is executed</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Start &quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot; with params [</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>args<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;, &#39;</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">].</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>

    <span class="token comment">// this will trigger if the action succeeds and after it has fully run.</span>
    <span class="token comment">// it waits for any returned promised</span>
    <span class="token function">after</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">result</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>
        <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Finished &quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot; after </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>
          Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> startTime
        <span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">ms.\\nResult: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>result<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">.</span><span class="token template-punctuation string">\`</span></span>
      <span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>

    <span class="token comment">// this will trigger if the action throws or returns a promise that rejects</span>
    <span class="token function">onError</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span>
        <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Failed &quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot; after </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> startTime<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">ms.\\nError: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>error<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">.</span><span class="token template-punctuation string">\`</span></span>
      <span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">)</span>

<span class="token comment">// manually remove the listener</span>
<span class="token function">unsubscribe</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span>script setup<span class="token operator">&gt;</span>
	<span class="token keyword">import</span> <span class="token punctuation">{</span> useUsers <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;...&#39;</span>
	<span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token function">useUsers</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	store<span class="token punctuation">.</span><span class="token function">registerUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//可以直接调用</span>

<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-4、订阅-onaction" tabindex="-1"><a class="header-anchor" href="#_4-4、订阅-onaction" aria-hidden="true">#</a> 4.4、订阅$onAction</h3><p>订阅操作默认情况下绑定到添加他的组件。这就意味着当组件卸载，订阅会自动被删除，但如果第二个参数传递为true则会将该订阅与组件分离。（即组件卸载该订阅依然存在）</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//新建一个测试仓库</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> defineStore <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;pinia&#39;</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> testStore <span class="token operator">=</span> <span class="token function">defineStore</span><span class="token punctuation">(</span><span class="token string">&#39;test&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
    <span class="token function">state</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token punctuation">{</span>
            <span class="token literal-property property">count</span><span class="token operator">:</span><span class="token number">1</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token literal-property property">actions</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token function">testOnAction</span><span class="token punctuation">(</span><span class="token parameter">id</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>count<span class="token operator">++</span>
            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>count<span class="token punctuation">)</span>
            <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">&#39;这是testOnAction返回的值&#39;</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token function">testOnAction2</span><span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span>
            <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span><span class="token string">&#39;这是testOnAction222错误返回的值&#39;</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>

    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token comment">//在setup的语法糖里	</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> testStore <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;../../pinia/modules/test&#39;</span>
<span class="token keyword">const</span> myTestStore <span class="token operator">=</span> <span class="token function">testStore</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

store<span class="token punctuation">.</span><span class="token function">$onAction</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span>
  name<span class="token punctuation">,</span>
  store<span class="token punctuation">,</span>
  args<span class="token punctuation">,</span>
  after<span class="token punctuation">,</span>
  onError
<span class="token punctuation">}</span></span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
	<span class="token keyword">if</span><span class="token punctuation">(</span>name<span class="token operator">===</span><span class="token string">&#39;testOnAction&#39;</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
		<span class="token function">after</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">reject</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
			<span class="token comment">//这里可以执行一些操作</span>
		<span class="token punctuation">}</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	<span class="token comment">//onError钩子类似一个错误级中间件，当函数抛出promise的失败状态就会调用</span>
  <span class="token function">onError</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
store<span class="token punctuation">.</span><span class="token function">testOnAction</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
store<span class="token punctuation">.</span><span class="token function">testOnAction2</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">45</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>({ name,store, args,after, onError }） <img src="`+u+'" alt="在这里插入图片描述">$onAction函数接受一个回调函数，<strong>该回调函数内部的代码会先于actions函数调用前执行</strong>，以下是$onAction中回调函数的参数介绍。 name当该仓库中的某个actions函数被调用，name是被调用函数的名字。 store是当前仓库实例,就是myTestStore args是actions中某个被调用函数接受的实参，是个数组类型 after是个钩子函数，内部接受要给回调函数，该回调函数接受一个参数result，当actions中的函数返回了一个promise成功的返回值，result可以接受到，如果actions里的函数没有返回值则result则为undefined。<strong>after钩子函数会在actions中的函数被调用后执行</strong> onError是个钩子函数，如果做过服务端的小伙伴肯定知道错误级中间件，onError同样接受一个回调函数，该回调函数接受一个error参数，该参数是actions内部函数中返回promise失败传的参数。<strong>如果actions内部函数返回了promise失败状态onError就会执行</strong></p><h2 id="_5-插件" tabindex="-1"><a class="header-anchor" href="#_5-插件" aria-hidden="true">#</a> 5.插件</h2><p>由于低级 API，Pania 商店可以完全扩展。以下是您可以执行的操作列表：</p>',9),A=n("li",null,"向商店添加新属性",-1),P=n("li",null,"定义商店时添加新选项",-1),C=n("li",null,"向商店添加新方法",-1),D=n("li",null,"包装现有方法",-1),L=n("li",null,"更改甚至取消操作",-1),T={href:"https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage",target:"_blank",rel:"noopener noreferrer"},V=n("li",null,[n("strong",null,"仅适用"),s("于特定商店")],-1),R=t(`<p>插件被添加到 pinia 实例中<code>pinia.use()</code>。最简单的例子是通过返回一个对象为所有商店添加一个静态属性：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> createPinia <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;pinia&#39;</span>
<span class="token comment">// add a property named \`secret\` to every store that is created after this plugin is installed</span>
<span class="token comment">// this could be in a different file</span>
<span class="token keyword">function</span> <span class="token function">SecretPiniaPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span> <span class="token literal-property property">secret</span><span class="token operator">:</span> <span class="token string">&#39;the cake is a lie&#39;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> pinia <span class="token operator">=</span> <span class="token function">createPinia</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment">// give the plugin to pinia</span>
pinia<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>SecretPiniaPlugin<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="pinia的实现原理" tabindex="-1"><a class="header-anchor" href="#pinia的实现原理" aria-hidden="true">#</a> pinia的实现原理</h2><h3 id="学前知识" tabindex="-1"><a class="header-anchor" href="#学前知识" aria-hidden="true">#</a> 学前知识</h3><h4 id="effectscope" tabindex="-1"><a class="header-anchor" href="#effectscope" aria-hidden="true">#</a> effectScope</h4><p>上来先总结一下：<strong><code>effectScope</code>是为了解决副作用在组件外使用不会被自动处理的问题。<code>effectScope</code>会创建一个副作用作用域范围，让用户能够一键清楚内部所有副作用，避免了内存泄漏问题。</strong></p><p><code>effectScope</code>创建一个 effect 作用域，可以捕获其中所创建的响应式副作用 (即计算属性和侦听器)，这样捕获到的副作用可以一起处理。</p><p>在Vue的componentsetup()中，效果将被收集并绑定到当前实例。当实例被卸载时，效果将被自动处理。这是一个方便和直观的特性。然而，当我们在组件之外或作为独立包使用它们时，Vue不会自动的去处理什么时候取消掉副作用，而手动管理很容易忘记，容易出现内存泄漏和意外行为，例如：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> disposables <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>

<span class="token keyword">const</span> counter <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> doubled <span class="token operator">=</span> <span class="token function">computed</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> counter<span class="token punctuation">.</span>value <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span>

disposables<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">stop</span><span class="token punctuation">(</span>doubled<span class="token punctuation">.</span>effect<span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token keyword">const</span> stopWatch1 <span class="token operator">=</span> <span class="token function">watchEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">counter: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>counter<span class="token punctuation">.</span>value<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

disposables<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>stopWatch1<span class="token punctuation">)</span>

<span class="token keyword">const</span> stopWatch2 <span class="token operator">=</span> <span class="token function">watch</span><span class="token punctuation">(</span>doubled<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>doubled<span class="token punctuation">.</span>value<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

disposables<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>stopWatch2<span class="token punctuation">)</span>
<span class="token comment">// 当需要停止副作用函数时，我们需要手动停止（如果忘记或者停止逻辑不正确可能出现内存泄露）</span>
disposables<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
disposables <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>而这个API会自动收集内部的副作用，并调用<code>stop</code>可以直接关掉内部的所以副作用。使用方式如下（作用域可以运行一个函数，并捕获在函数同步执行期间创建的所有效果，包括任何在内部创建效果的API，例如computed, watch和watchEffect:）：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> scope <span class="token operator">=</span> <span class="token function">effectScope</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//创建副作用作用域</span>

scope<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> doubled <span class="token operator">=</span> <span class="token function">computed</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> counter<span class="token punctuation">.</span>value <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span>

  <span class="token function">watch</span><span class="token punctuation">(</span>doubled<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>doubled<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span>

  <span class="token function">watchEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Count: &#39;</span><span class="token punctuation">,</span> doubled<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">//同一个作用域可以运行多次</span>
scope<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> 
  <span class="token function">watch</span><span class="token punctuation">(</span>counter<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">/*...*/</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
scope<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token comment">//run方法会转发被执行函数的返回值:</span>
scope<span class="token punctuation">.</span><span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//当调用scope.stop()时，它将递归地停止所有捕获的效果和嵌套的范围。</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>嵌套作用域会是什么效果呢？</p><p>嵌套范围嵌套作用域也应该由它们的父作用域收集。当父作用域被处置时，它的所有后代作用域也将停止。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> scope <span class="token operator">=</span> <span class="token function">effectScope</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

scope<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> doubled <span class="token operator">=</span> <span class="token function">computed</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> counter<span class="token punctuation">.</span>value <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span>
  
  <span class="token comment">// not need to get the stop handler, it will be collected by the outer scope</span>
  <span class="token function">effectScope</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token function">watch</span><span class="token punctuation">(</span>doubled<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>doubled<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>

  <span class="token function">watchEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Count: &#39;</span><span class="token punctuation">,</span> doubled<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">// dispose all effects, including those in the nested scopes</span>
scope<span class="token punctuation">.</span><span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果嵌套的内部作用域不希望被父级作用域管理。则需要分离作用于，effectScope接受在“分离”模式下创建的参数。分离的作用域不会被它的父作用域收集。这也使得像“延迟初始化”这样的用法成为可能。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">let</span> nestedScope

<span class="token keyword">const</span> parentScope <span class="token operator">=</span> <span class="token function">effectScope</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

parentScope<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> doubled <span class="token operator">=</span> <span class="token function">computed</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> counter<span class="token punctuation">.</span>value <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span>

  <span class="token comment">//使用检测到的标志;</span>
  <span class="token comment">//作用域不会被外部作用域收集和处理。nested = effectScope(true /* detached */)</span>
  nestedScope <span class="token operator">=</span> <span class="token function">effectScope</span><span class="token punctuation">(</span><span class="token boolean">true</span> <span class="token comment">/* detached */</span><span class="token punctuation">)</span>
  nestedScope<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token function">watch</span><span class="token punctuation">(</span>doubled<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>doubled<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
    
  <span class="token function">watchEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Count: &#39;</span><span class="token punctuation">,</span> doubled<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">//处理所有效果，但不处理嵌套的内部作用域</span>
parentScope<span class="token punctuation">.</span><span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment">// 停止嵌套的作用域</span>
nestedScope<span class="token punctuation">.</span><span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>作用域停止钩子<code>onScopeDispose</code></strong></p><p>全局钩子onScopeDispose()提供与onUnmounted()类似的功能，但它适用于当前作用域，而不是组件实例。这有利于可组合函数清除其副作用及其作用域。因为setup()也为组件创建了一个作用域，所以当没有创建显式的效果作用域时，它将等同于onUnmounted()。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> onScopeDispose <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span>

<span class="token keyword">const</span> scope <span class="token operator">=</span> <span class="token function">effectScope</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

scope<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token function">onScopeDispose</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;cleaned!&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

scope<span class="token punctuation">.</span><span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// logs &#39;cleaned!&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="创建pinia对象createpinia" tabindex="-1"><a class="header-anchor" href="#创建pinia对象createpinia" aria-hidden="true">#</a> 创建pinia对象createPinia</h3><ol><li>创建副作用作用域</li><li>将pinia单例对象注入</li><li>收集插件</li></ol><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">createPinia</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Pinia <span class="token punctuation">{</span>
  <span class="token keyword">const</span> scope <span class="token operator">=</span> <span class="token function">effectScope</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token comment">//创建一个 effect 作用域，可以捕获其中所创建的响应式副作用 (即计算属性和侦听器)，这样捕获到的副作用可以一起处理。</span>
  <span class="token keyword">const</span> state <span class="token operator">=</span> scope<span class="token punctuation">.</span><span class="token generic-function"><span class="token function">run</span><span class="token generic class-name"><span class="token operator">&lt;</span>Ref<span class="token operator">&lt;</span>Record<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token punctuation">,</span> StateTree<span class="token operator">&gt;&gt;&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
    <span class="token generic-function"><span class="token function">ref</span><span class="token generic class-name"><span class="token operator">&lt;</span>Record<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token punctuation">,</span> StateTree<span class="token operator">&gt;&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">)</span><span class="token operator">!</span>
 
  <span class="token keyword">let</span> _p<span class="token operator">:</span> Pinia<span class="token punctuation">[</span><span class="token string">&#39;_p&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token comment">//存放差距</span>
  <span class="token comment">//插件列表调用app.use之前会push插件</span>
  <span class="token keyword">let</span> toBeInstalled<span class="token operator">:</span> PiniaPlugin<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>

  <span class="token keyword">const</span> pinia<span class="token operator">:</span> Pinia <span class="token operator">=</span> <span class="token function">markRaw</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token comment">//markRaw将一个对象标记为不可被转为代理。返回该对象本身。</span>
    <span class="token function">install</span><span class="token punctuation">(</span>app<span class="token operator">:</span> App<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	 <span class="token comment">//这允许在组件设置之外调用useStore</span>
      <span class="token function">setActivePinia</span><span class="token punctuation">(</span>pinia<span class="token punctuation">)</span><span class="token comment">//该函数执行-》activePinia = pinia</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>isVue2<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        pinia<span class="token punctuation">.</span>_a <span class="token operator">=</span> app <span class="token comment">// 保存app实例</span>
        app<span class="token punctuation">.</span><span class="token function">provide</span><span class="token punctuation">(</span>piniaSymbol<span class="token punctuation">,</span> pinia<span class="token punctuation">)</span>
        app<span class="token punctuation">.</span>config<span class="token punctuation">.</span>globalProperties<span class="token punctuation">.</span>$pinia <span class="token operator">=</span> pinia
         
        toBeInstalled<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>plugin<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> _p<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>plugin<span class="token punctuation">)</span><span class="token punctuation">)</span>
        toBeInstalled <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>

    <span class="token function">use</span><span class="token punctuation">(</span>plugin<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>_a <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>isVue2<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        toBeInstalled<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>plugin<span class="token punctuation">)</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        _p<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>plugin<span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">return</span> <span class="token keyword">this</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>

    _p<span class="token punctuation">,</span>
    _a<span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
    _e<span class="token operator">:</span> scope<span class="token punctuation">,</span>
    _s<span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">Map<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token punctuation">,</span> StoreGeneric<span class="token operator">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    state<span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token keyword">return</span> pinia
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="停止副作用disposepinia" tabindex="-1"><a class="header-anchor" href="#停止副作用disposepinia" aria-hidden="true">#</a> 停止副作用disposePinia</h2><p>通过停止它的effectScope、删除状态、插件和商店来处理一个Pinia实例。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">disposePinia</span><span class="token punctuation">(</span>pinia<span class="token operator">:</span> Pinia<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  pinia<span class="token punctuation">.</span>_e<span class="token punctuation">.</span><span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  pinia<span class="token punctuation">.</span>_s<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  pinia<span class="token punctuation">.</span>_p<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
  pinia<span class="token punctuation">.</span>state<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
  <span class="token comment">// @ts-expect-error: non valid</span>
  pinia<span class="token punctuation">.</span>_a <span class="token operator">=</span> <span class="token keyword">null</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="定义仓库definestore" tabindex="-1"><a class="header-anchor" href="#定义仓库definestore" aria-hidden="true">#</a> 定义仓库defineStore</h2><p>定义store有两种方式：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code>①选项式 
<span class="token keyword">export</span> <span class="token keyword">const</span> useCounterStore <span class="token operator">=</span> <span class="token function">defineStore</span><span class="token punctuation">(</span><span class="token string">&#39;counter&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token function-variable function">state</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> count<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span> name<span class="token operator">:</span> <span class="token string">&#39;Eduardo&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  getters<span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token function-variable function">doubleCount</span><span class="token operator">:</span> <span class="token punctuation">(</span>state<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> state<span class="token punctuation">.</span>count <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  actions<span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>count<span class="token operator">++</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
②setup语法糖
<span class="token keyword">export</span> <span class="token keyword">const</span> useCounterStore <span class="token operator">=</span> <span class="token function">defineStore</span><span class="token punctuation">(</span><span class="token string">&#39;counter&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> count <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
  <span class="token keyword">const</span> name <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token string">&#39;Eduardo&#39;</span><span class="token punctuation">)</span>
  <span class="token keyword">const</span> doubleCount <span class="token operator">=</span> <span class="token function">computed</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> count<span class="token punctuation">.</span>value <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span>
  <span class="token keyword">function</span> <span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    count<span class="token punctuation">.</span>value<span class="token operator">++</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span> count<span class="token punctuation">,</span> name<span class="token punctuation">,</span> doubleCount<span class="token punctuation">,</span> increment <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>实现原理</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">defineStore</span><span class="token punctuation">(</span>idOrOptions<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">,</span>setup<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">,</span>setupOptions<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span><span class="token operator">:</span> StoreDefinition <span class="token punctuation">{</span>
  <span class="token keyword">let</span> id<span class="token operator">:</span> <span class="token builtin">string</span>
  <span class="token keyword">let</span> options
  <span class="token comment">// 如果第二个参数是函数则是setup语法糖</span>
  <span class="token keyword">const</span> isSetupStore <span class="token operator">=</span> <span class="token keyword">typeof</span> setup <span class="token operator">===</span> <span class="token string">&#39;function&#39;</span>
  <span class="token comment">//如果第一个参数是string则作为仓库的名字id，如果不是则认为直接传的是选项式</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> idOrOptions <span class="token operator">===</span> <span class="token string">&#39;string&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    id <span class="token operator">=</span> idOrOptions
    <span class="token comment">// the option store setup will contain the actual options in this case</span>
    options <span class="token operator">=</span> isSetupStore <span class="token operator">?</span> setupOptions <span class="token operator">:</span> setup
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    options <span class="token operator">=</span> idOrOptions
    id <span class="token operator">=</span> idOrOptions<span class="token punctuation">.</span>id
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">function</span> <span class="token function">useStore</span><span class="token punctuation">(</span>pinia<span class="token operator">?</span><span class="token operator">:</span> Pinia <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">,</span> hot<span class="token operator">?</span><span class="token operator">:</span> StoreGeneric<span class="token punctuation">)</span><span class="token operator">:</span> StoreGeneric <span class="token punctuation">{</span>
    <span class="token keyword">const</span> hasContext <span class="token operator">=</span> <span class="token function">hasInjectionContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    pinia <span class="token operator">=</span>
      <span class="token comment">// in test mode, ignore the argument provided as we can always retrieve a</span>
      <span class="token comment">// pinia instance with getActivePinia()</span>
      <span class="token punctuation">(</span>__TEST__ <span class="token operator">&amp;&amp;</span> activePinia <span class="token operator">&amp;&amp;</span> activePinia<span class="token punctuation">.</span>_testing <span class="token operator">?</span> <span class="token keyword">null</span> <span class="token operator">:</span> pinia<span class="token punctuation">)</span> <span class="token operator">||</span>
      <span class="token punctuation">(</span>hasContext <span class="token operator">?</span> <span class="token function">inject</span><span class="token punctuation">(</span>piniaSymbol<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>pinia<span class="token punctuation">)</span> <span class="token function">setActivePinia</span><span class="token punctuation">(</span>pinia<span class="token punctuation">)</span>
	<span class="token comment">//从全局变量中取出pinia对象</span>
    pinia <span class="token operator">=</span> activePinia<span class="token operator">!</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>pinia<span class="token punctuation">.</span>_s<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// 将创建的商店注册到\`pinia._s\`</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>isSetupStore<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">createSetupStore</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> setup<span class="token punctuation">,</span> options<span class="token punctuation">,</span> pinia<span class="token punctuation">)</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token function">createOptionsStore</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> options <span class="token keyword">as</span> <span class="token builtin">any</span><span class="token punctuation">,</span> pinia<span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

     <span class="token keyword">const</span> store<span class="token operator">:</span> StoreGeneric <span class="token operator">=</span> pinia<span class="token punctuation">.</span>_s<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token operator">!</span>
      <span class="token comment">//从缓存中清除状态</span>
      <span class="token keyword">delete</span> pinia<span class="token punctuation">.</span>state<span class="token punctuation">.</span>value<span class="token punctuation">[</span>hotId<span class="token punctuation">]</span>
      pinia<span class="token punctuation">.</span>_s<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>hotId<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>__DEV__ <span class="token operator">&amp;&amp;</span> <span class="token constant">IS_CLIENT</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> currentInstance <span class="token operator">=</span> <span class="token function">getCurrentInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token comment">// save stores in instances to access them devtools</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>
        currentInstance <span class="token operator">&amp;&amp;</span>
        currentInstance<span class="token punctuation">.</span>proxy <span class="token operator">&amp;&amp;</span>
        <span class="token comment">// avoid adding stores that are just built for hot module replacement</span>
        <span class="token operator">!</span>hot
      <span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> vm <span class="token operator">=</span> currentInstance<span class="token punctuation">.</span>proxy
        <span class="token keyword">const</span> cache <span class="token operator">=</span> <span class="token string">&#39;_pStores&#39;</span> <span class="token keyword">in</span> vm <span class="token operator">?</span> vm<span class="token punctuation">.</span>_pStores<span class="token operator">!</span> <span class="token operator">:</span> <span class="token punctuation">(</span>vm<span class="token punctuation">.</span>_pStores <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
        cache<span class="token punctuation">[</span>id<span class="token punctuation">]</span> <span class="token operator">=</span> store
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// StoreGeneric cannot be casted towards Store</span>
    <span class="token keyword">return</span> store <span class="token keyword">as</span> <span class="token builtin">any</span>
  <span class="token punctuation">}</span>

  useStore<span class="token punctuation">.</span>$id <span class="token operator">=</span> id

  <span class="token keyword">return</span> useStore
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="createsetupstore语法糖store" tabindex="-1"><a class="header-anchor" href="#createsetupstore语法糖store" aria-hidden="true">#</a> createSetupStore语法糖store</h3><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// createSetupStore(id, setup, options, pinia)</span>
<span class="token keyword">function</span> <span class="token generic-function"><span class="token function">createSetupStore</span><span class="token generic class-name"><span class="token operator">&lt;</span>
  Id <span class="token keyword">extends</span> <span class="token builtin">string</span><span class="token punctuation">,</span>
  <span class="token constant">SS</span> <span class="token keyword">extends</span> Record<span class="token operator">&lt;</span><span class="token builtin">any</span><span class="token punctuation">,</span> <span class="token builtin">unknown</span><span class="token operator">&gt;</span><span class="token punctuation">,</span>
  <span class="token constant">S</span> <span class="token keyword">extends</span> StateTree<span class="token punctuation">,</span>
  <span class="token constant">G</span> <span class="token keyword">extends</span> Record<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token punctuation">,</span> _Method<span class="token operator">&gt;</span><span class="token punctuation">,</span>
  <span class="token constant">A</span> <span class="token keyword">extends</span> _ActionsTree
<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>
  $id<span class="token operator">:</span> Id<span class="token punctuation">,</span>
  <span class="token function-variable function">setup</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token constant">SS</span><span class="token punctuation">,</span>
  options<span class="token operator">:</span>
    <span class="token operator">|</span> DefineSetupStoreOptions<span class="token operator">&lt;</span>Id<span class="token punctuation">,</span> <span class="token constant">S</span><span class="token punctuation">,</span> <span class="token constant">G</span><span class="token punctuation">,</span> <span class="token constant">A</span><span class="token operator">&gt;</span>
    <span class="token operator">|</span> DefineStoreOptions<span class="token operator">&lt;</span>Id<span class="token punctuation">,</span> <span class="token constant">S</span><span class="token punctuation">,</span> <span class="token constant">G</span><span class="token punctuation">,</span> <span class="token constant">A</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
  pinia<span class="token operator">:</span> Pinia<span class="token punctuation">,</span>
  hot<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">,</span>
  isOptionsStore<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">boolean</span>
<span class="token punctuation">)</span><span class="token operator">:</span> Store<span class="token operator">&lt;</span>Id<span class="token punctuation">,</span> <span class="token constant">S</span><span class="token punctuation">,</span> <span class="token constant">G</span><span class="token punctuation">,</span> <span class="token constant">A</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> scope<span class="token operator">!</span><span class="token operator">:</span> EffectScope
	<span class="token comment">//合并选项</span>
  <span class="token keyword">const</span> optionsForPlugin<span class="token operator">:</span> DefineStoreOptionsInPlugin<span class="token operator">&lt;</span>Id<span class="token punctuation">,</span> <span class="token constant">S</span><span class="token punctuation">,</span> <span class="token constant">G</span><span class="token punctuation">,</span> <span class="token constant">A</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token function">assign</span><span class="token punctuation">(</span>
    <span class="token punctuation">{</span> actions<span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token keyword">as</span> <span class="token constant">A</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
    options
  <span class="token punctuation">)</span>
  <span class="token comment">//  $subscribe的watcher选项</span>
  <span class="token keyword">const</span> $subscribeOptions<span class="token operator">:</span> WatchOptions <span class="token operator">=</span> <span class="token punctuation">{</span>
    deep<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token comment">// flush: &#39;post&#39;,</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// internal state</span>
  <span class="token keyword">let</span> isListening<span class="token operator">:</span> <span class="token builtin">boolean</span> 
  <span class="token keyword">let</span> isSyncListening<span class="token operator">:</span> <span class="token builtin">boolean</span> 
  <span class="token keyword">let</span> subscriptions<span class="token operator">:</span> SubscriptionCallback<span class="token operator">&lt;</span><span class="token constant">S</span><span class="token operator">&gt;</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
  <span class="token keyword">let</span> actionSubscriptions<span class="token operator">:</span> StoreOnActionListener<span class="token operator">&lt;</span>Id<span class="token punctuation">,</span> <span class="token constant">S</span><span class="token punctuation">,</span> <span class="token constant">G</span><span class="token punctuation">,</span> <span class="token constant">A</span><span class="token operator">&gt;</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
  <span class="token keyword">let</span> debuggerEvents<span class="token operator">:</span> DebuggerEvent<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">|</span> DebuggerEvent
  <span class="token keyword">const</span> initialState <span class="token operator">=</span> pinia<span class="token punctuation">.</span>state<span class="token punctuation">.</span>value<span class="token punctuation">[</span>$id<span class="token punctuation">]</span> <span class="token keyword">as</span> UnwrapRef<span class="token operator">&lt;</span><span class="token constant">S</span><span class="token operator">&gt;</span> <span class="token operator">|</span> <span class="token keyword">undefined</span>
  <span class="token keyword">const</span> hotState <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token keyword">as</span> <span class="token constant">S</span><span class="token punctuation">)</span>

  <span class="token comment">// /避免触发太多的listeners</span>
  <span class="token keyword">let</span> activeListener<span class="token operator">:</span> Symbol <span class="token operator">|</span> <span class="token keyword">undefined</span>
  <span class="token doc-comment comment">/**
  *	修改的两种参数方式，store.$patch(<span class="token punctuation">{</span>count: store.count + 1,age: 120<span class="token punctuation">}</span>)
  * store.$patch((state) =&gt; <span class="token punctuation">{</span>state.count = store.count + 1<span class="token punctuation">}</span>)
  */</span>
  <span class="token keyword">function</span> <span class="token function">$patch</span><span class="token punctuation">(</span>partialStateOrMutator<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> subscriptionMutation<span class="token operator">:</span> SubscriptionCallbackMutation<span class="token operator">&lt;</span><span class="token constant">S</span><span class="token operator">&gt;</span>
    isListening <span class="token operator">=</span> isSyncListening <span class="token operator">=</span> <span class="token boolean">false</span>
	<span class="token comment">//如果是函数</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> partialStateOrMutator <span class="token operator">===</span> <span class="token string">&#39;function&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//将该id的state传进去</span>
      <span class="token function">partialStateOrMutator</span><span class="token punctuation">(</span>pinia<span class="token punctuation">.</span>state<span class="token punctuation">.</span>value<span class="token punctuation">[</span>$id<span class="token punctuation">]</span> <span class="token keyword">as</span> UnwrapRef<span class="token operator">&lt;</span><span class="token constant">S</span><span class="token operator">&gt;</span><span class="token punctuation">)</span>
      subscriptionMutation <span class="token operator">=</span> <span class="token punctuation">{</span>
        type<span class="token operator">:</span> MutationType<span class="token punctuation">.</span>patchFunction<span class="token punctuation">,</span><span class="token comment">// &#39;patch function&#39;</span>
        storeId<span class="token operator">:</span> $id<span class="token punctuation">,</span>
        events<span class="token operator">:</span> debuggerEvents <span class="token keyword">as</span> DebuggerEvent<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token function">mergeReactiveObjects</span><span class="token punctuation">(</span>pinia<span class="token punctuation">.</span>state<span class="token punctuation">.</span>value<span class="token punctuation">[</span>$id<span class="token punctuation">]</span><span class="token punctuation">,</span> partialStateOrMutator<span class="token punctuation">)</span>
      subscriptionMutation <span class="token operator">=</span> <span class="token punctuation">{</span>
        type<span class="token operator">:</span> MutationType<span class="token punctuation">.</span>patchObject<span class="token punctuation">,</span><span class="token comment">// &#39;patch object&#39;</span>
        payload<span class="token operator">:</span> partialStateOrMutator<span class="token punctuation">,</span>
        storeId<span class="token operator">:</span> $id<span class="token punctuation">,</span>
        events<span class="token operator">:</span> debuggerEvents <span class="token keyword">as</span> DebuggerEvent<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">const</span> myListenerId <span class="token operator">=</span> <span class="token punctuation">(</span>activeListener <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token function">nextTick</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>activeListener <span class="token operator">===</span> myListenerId<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        isListening <span class="token operator">=</span> <span class="token boolean">true</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
    isSyncListening <span class="token operator">=</span> <span class="token boolean">true</span>
    <span class="token comment">// 因为我们暂停了watcher，所以需要手动调用订阅</span>
    <span class="token comment">//subscriptions(subscriptionMutation,  pinia.state.value[$id])</span>
    <span class="token function">triggerSubscriptions</span><span class="token punctuation">(</span>
      subscriptions<span class="token punctuation">,</span>
      subscriptionMutation<span class="token punctuation">,</span>
      pinia<span class="token punctuation">.</span>state<span class="token punctuation">.</span>value<span class="token punctuation">[</span>$id<span class="token punctuation">]</span> <span class="token keyword">as</span> UnwrapRef<span class="token operator">&lt;</span><span class="token constant">S</span><span class="token operator">&gt;</span>
    <span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">const</span> $reset <span class="token operator">=</span> isOptionsStore
    <span class="token operator">?</span> <span class="token keyword">function</span> <span class="token function">$reset</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">:</span> _StoreWithState<span class="token operator">&lt;</span>Id<span class="token punctuation">,</span> <span class="token constant">S</span><span class="token punctuation">,</span> <span class="token constant">G</span><span class="token punctuation">,</span> <span class="token constant">A</span><span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> <span class="token punctuation">{</span> state <span class="token punctuation">}</span> <span class="token operator">=</span> options <span class="token keyword">as</span> DefineStoreOptions<span class="token operator">&lt;</span>Id<span class="token punctuation">,</span> <span class="token constant">S</span><span class="token punctuation">,</span> <span class="token constant">G</span><span class="token punctuation">,</span> <span class="token constant">A</span><span class="token operator">&gt;</span>
        <span class="token keyword">const</span> newState <span class="token operator">=</span> state <span class="token operator">?</span> <span class="token function">state</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
        <span class="token comment">// we use a patch to group all changes into one single subscription</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$patch</span><span class="token punctuation">(</span><span class="token punctuation">(</span>$state<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> 
          <span class="token function">assign</span><span class="token punctuation">(</span>$state<span class="token punctuation">,</span> newState<span class="token punctuation">)</span><span class="token comment">//assign(pinia.state.value[$id],newState)</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
    <span class="token operator">:</span>  __DEV__ <span class="token operator">?</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&#39;.....&#39;</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

  <span class="token keyword">function</span> <span class="token function">$dispose</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    scope<span class="token punctuation">.</span><span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    subscriptions <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    actionSubscriptions <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    pinia<span class="token punctuation">.</span>_s<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>$id<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">function</span> <span class="token function">wrapAction</span><span class="token punctuation">(</span>name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> action<span class="token operator">:</span> _Method<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">setActivePinia</span><span class="token punctuation">(</span>pinia<span class="token punctuation">)</span>
      <span class="token keyword">const</span> args <span class="token operator">=</span> <span class="token builtin">Array</span><span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span>

      <span class="token keyword">const</span> afterCallbackList<span class="token operator">:</span> <span class="token builtin">Array</span><span class="token operator">&lt;</span><span class="token punctuation">(</span>resolvedReturn<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">any</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
      <span class="token keyword">const</span> onErrorCallbackList<span class="token operator">:</span> <span class="token builtin">Array</span><span class="token operator">&lt;</span><span class="token punctuation">(</span>error<span class="token operator">:</span> <span class="token builtin">unknown</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">unknown</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
      <span class="token keyword">function</span> <span class="token function">after</span><span class="token punctuation">(</span>callback<span class="token operator">:</span> _ArrayType<span class="token operator">&lt;</span><span class="token keyword">typeof</span> afterCallbackList<span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        afterCallbackList<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>callback<span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">function</span> <span class="token function">onError</span><span class="token punctuation">(</span>callback<span class="token operator">:</span> _ArrayType<span class="token operator">&lt;</span><span class="token keyword">typeof</span> onErrorCallbackList<span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        onErrorCallbackList<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>callback<span class="token punctuation">)</span>
      <span class="token punctuation">}</span>

      <span class="token comment">// @ts-expect-error</span>
      <span class="token function">triggerSubscriptions</span><span class="token punctuation">(</span>actionSubscriptions<span class="token punctuation">,</span> <span class="token punctuation">{</span>
        args<span class="token punctuation">,</span>
        name<span class="token punctuation">,</span>
        store<span class="token punctuation">,</span>
        after<span class="token punctuation">,</span>
        onError<span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span>

      <span class="token keyword">let</span> ret<span class="token operator">:</span> <span class="token builtin">unknown</span>
      <span class="token keyword">try</span> <span class="token punctuation">{</span>
        ret <span class="token operator">=</span> <span class="token function">action</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$id <span class="token operator">===</span> $id <span class="token operator">?</span> <span class="token keyword">this</span> <span class="token operator">:</span> store<span class="token punctuation">,</span> args<span class="token punctuation">)</span>
        <span class="token comment">// handle sync errors</span>
      <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">triggerSubscriptions</span><span class="token punctuation">(</span>onErrorCallbackList<span class="token punctuation">,</span> error<span class="token punctuation">)</span>
        <span class="token keyword">throw</span> error
      <span class="token punctuation">}</span>

      <span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token keyword">instanceof</span> <span class="token class-name"><span class="token builtin">Promise</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> ret
          <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
            <span class="token function">triggerSubscriptions</span><span class="token punctuation">(</span>afterCallbackList<span class="token punctuation">,</span> value<span class="token punctuation">)</span>
            <span class="token keyword">return</span> value
          <span class="token punctuation">}</span><span class="token punctuation">)</span>
          <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
            <span class="token function">triggerSubscriptions</span><span class="token punctuation">(</span>onErrorCallbackList<span class="token punctuation">,</span> error<span class="token punctuation">)</span>
            <span class="token keyword">return</span> <span class="token builtin">Promise</span><span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span>
          <span class="token punctuation">}</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span>

      <span class="token comment">// trigger after callbacks</span>
      <span class="token function">triggerSubscriptions</span><span class="token punctuation">(</span>afterCallbackList<span class="token punctuation">,</span> ret<span class="token punctuation">)</span>
      <span class="token keyword">return</span> ret
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">const</span> partialStore <span class="token operator">=</span> <span class="token punctuation">{</span>
    _p<span class="token operator">:</span> pinia<span class="token punctuation">,</span>
    <span class="token comment">// _s: scope,</span>
    $id<span class="token punctuation">,</span>
    $onAction<span class="token operator">:</span> <span class="token function">addSubscription</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> actionSubscriptions<span class="token punctuation">)</span><span class="token punctuation">,</span>
    $patch<span class="token punctuation">,</span>
    $reset<span class="token punctuation">,</span>
    <span class="token function">$subscribe</span><span class="token punctuation">(</span>callback<span class="token punctuation">,</span> options <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> removeSubscription <span class="token operator">=</span> <span class="token function">addSubscription</span><span class="token punctuation">(</span>
        subscriptions<span class="token punctuation">,</span>
        callback<span class="token punctuation">,</span>
        options<span class="token punctuation">.</span>detached<span class="token punctuation">,</span>
        <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">stopWatcher</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token punctuation">)</span>
      <span class="token keyword">const</span> stopWatcher <span class="token operator">=</span> scope<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
        <span class="token function">watch</span><span class="token punctuation">(</span>
          <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> pinia<span class="token punctuation">.</span>state<span class="token punctuation">.</span>value<span class="token punctuation">[</span>$id<span class="token punctuation">]</span> <span class="token keyword">as</span> UnwrapRef<span class="token operator">&lt;</span><span class="token constant">S</span><span class="token operator">&gt;</span><span class="token punctuation">,</span>
          <span class="token punctuation">(</span>state<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>options<span class="token punctuation">.</span>flush <span class="token operator">===</span> <span class="token string">&#39;sync&#39;</span> <span class="token operator">?</span> isSyncListening <span class="token operator">:</span> isListening<span class="token punctuation">)</span> <span class="token punctuation">{</span>
              <span class="token function">callback</span><span class="token punctuation">(</span>
                <span class="token punctuation">{</span>
                  storeId<span class="token operator">:</span> $id<span class="token punctuation">,</span>
                  type<span class="token operator">:</span> MutationType<span class="token punctuation">.</span>direct<span class="token punctuation">,</span>
                  events<span class="token operator">:</span> debuggerEvents <span class="token keyword">as</span> DebuggerEvent<span class="token punctuation">,</span>
                <span class="token punctuation">}</span><span class="token punctuation">,</span>
                state
              <span class="token punctuation">)</span>
            <span class="token punctuation">}</span>
          <span class="token punctuation">}</span><span class="token punctuation">,</span>
          <span class="token function">assign</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> $subscribeOptions<span class="token punctuation">,</span> options<span class="token punctuation">)</span>
        <span class="token punctuation">)</span>
      <span class="token punctuation">)</span><span class="token operator">!</span>

      <span class="token keyword">return</span> removeSubscription
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    $dispose<span class="token punctuation">,</span>
  <span class="token punctuation">}</span> <span class="token keyword">as</span> _StoreWithState<span class="token operator">&lt;</span>Id<span class="token punctuation">,</span> <span class="token constant">S</span><span class="token punctuation">,</span> <span class="token constant">G</span><span class="token punctuation">,</span> <span class="token constant">A</span><span class="token operator">&gt;</span>


  <span class="token keyword">const</span> store<span class="token operator">:</span> Store<span class="token operator">&lt;</span>Id<span class="token punctuation">,</span> <span class="token constant">S</span><span class="token punctuation">,</span> <span class="token constant">G</span><span class="token punctuation">,</span> <span class="token constant">A</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span>partialStore<span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token builtin">unknown</span> <span class="token keyword">as</span> Store<span class="token operator">&lt;</span>Id<span class="token punctuation">,</span> <span class="token constant">S</span><span class="token punctuation">,</span> <span class="token constant">G</span><span class="token punctuation">,</span> <span class="token constant">A</span><span class="token operator">&gt;</span>

  pinia<span class="token punctuation">.</span>_s<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>$id<span class="token punctuation">,</span> store <span class="token keyword">as</span> Store<span class="token punctuation">)</span>

  <span class="token keyword">const</span> runWithContext <span class="token operator">=</span>
    <span class="token punctuation">(</span>pinia<span class="token punctuation">.</span>_a <span class="token operator">&amp;&amp;</span> pinia<span class="token punctuation">.</span>_a<span class="token punctuation">.</span>runWithContext<span class="token punctuation">)</span> <span class="token operator">||</span> fallbackRunWithContext

  <span class="token comment">// TODO: idea create skipSerialize that marks properties as non serializable and they are skipped</span>
  <span class="token keyword">const</span> setupStore <span class="token operator">=</span> <span class="token function">runWithContext</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
    pinia<span class="token punctuation">.</span>_e<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span>scope <span class="token operator">=</span> <span class="token function">effectScope</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>setup<span class="token punctuation">)</span><span class="token operator">!</span><span class="token punctuation">)</span>
  <span class="token punctuation">)</span><span class="token operator">!</span>

  <span class="token comment">// 覆盖现有的操作以支持$onAction</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> key <span class="token keyword">in</span> setupStore<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> prop <span class="token operator">=</span> setupStore<span class="token punctuation">[</span>key<span class="token punctuation">]</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">isRef</span><span class="token punctuation">(</span>prop<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">isComputed</span><span class="token punctuation">(</span>prop<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token function">isReactive</span><span class="token punctuation">(</span>prop<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// mark it as a piece of state to be serialized</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>isOptionsStore<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// //在setup stores中，必须水合物状态和同步状态树与用户刚刚创建的refs</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>initialState <span class="token operator">&amp;&amp;</span> <span class="token function">shouldHydrate</span><span class="token punctuation">(</span>prop<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isRef</span><span class="token punctuation">(</span>prop<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            prop<span class="token punctuation">.</span>value <span class="token operator">=</span> initialState<span class="token punctuation">[</span>key<span class="token punctuation">]</span>
          <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token comment">// probably a reactive object, lets recursively assign</span>
            <span class="token comment">// @ts-expect-error: prop is unknown</span>
            <span class="token function">mergeReactiveObjects</span><span class="token punctuation">(</span>prop<span class="token punctuation">,</span> initialState<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span>
          <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// transfer the ref to the pinia state to keep everything in sync</span>
        <span class="token comment">/* istanbul ignore if */</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>isVue2<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token function">set</span><span class="token punctuation">(</span>pinia<span class="token punctuation">.</span>state<span class="token punctuation">.</span>value<span class="token punctuation">[</span>$id<span class="token punctuation">]</span><span class="token punctuation">,</span> key<span class="token punctuation">,</span> prop<span class="token punctuation">)</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
          pinia<span class="token punctuation">.</span>state<span class="token punctuation">.</span>value<span class="token punctuation">[</span>$id<span class="token punctuation">]</span><span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> prop
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
      <span class="token comment">// action</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> prop <span class="token operator">===</span> <span class="token string">&#39;function&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> actionValue <span class="token operator">=</span> __DEV__ <span class="token operator">&amp;&amp;</span> hot <span class="token operator">?</span> prop <span class="token operator">:</span> <span class="token function">wrapAction</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> prop<span class="token punctuation">)</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>isVue2<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">set</span><span class="token punctuation">(</span>setupStore<span class="token punctuation">,</span> key<span class="token punctuation">,</span> actionValue<span class="token punctuation">)</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token comment">// @ts-expect-error</span>
        setupStore<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> actionValue
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>__DEV__<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// add getters for devtools</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isComputed</span><span class="token punctuation">(</span>prop<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        _hmrPayload<span class="token punctuation">.</span>getters<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> isOptionsStore
          <span class="token operator">?</span> <span class="token comment">// @ts-expect-error</span>
            options<span class="token punctuation">.</span>getters<span class="token punctuation">[</span>key<span class="token punctuation">]</span>
          <span class="token operator">:</span> prop
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">IS_CLIENT</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">const</span> getters<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span>
            <span class="token punctuation">(</span>setupStore<span class="token punctuation">.</span>_getters <span class="token keyword">as</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">||</span>
            <span class="token comment">// @ts-expect-error: same</span>
            <span class="token punctuation">(</span><span class="token punctuation">(</span>setupStore<span class="token punctuation">.</span>_getters <span class="token operator">=</span> <span class="token function">markRaw</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
          getters<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// add the state, getters, and action properties</span>
  <span class="token comment">/* istanbul ignore if */</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>isVue2<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>setupStore<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token function">set</span><span class="token punctuation">(</span>store<span class="token punctuation">,</span> key<span class="token punctuation">,</span> setupStore<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token function">assign</span><span class="token punctuation">(</span>store<span class="token punctuation">,</span> setupStore<span class="token punctuation">)</span>
    <span class="token comment">// allows retrieving reactive objects with \`storeToRefs()\`. Must be called after assigning to the reactive object.</span>
    <span class="token comment">// Make \`storeToRefs()\` work with \`reactive()\` #799</span>
    <span class="token function">assign</span><span class="token punctuation">(</span><span class="token function">toRaw</span><span class="token punctuation">(</span>store<span class="token punctuation">)</span><span class="token punctuation">,</span> setupStore<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// use this instead of a computed with setter to be able to create it anywhere</span>
  <span class="token comment">// without linking the computed lifespan to wherever the store is first</span>
  <span class="token comment">// created.</span>
  Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>store<span class="token punctuation">,</span> <span class="token string">&#39;$state&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
    <span class="token function-variable function">get</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span>__DEV__ <span class="token operator">&amp;&amp;</span> hot <span class="token operator">?</span> hotState<span class="token punctuation">.</span>value <span class="token operator">:</span> pinia<span class="token punctuation">.</span>state<span class="token punctuation">.</span>value<span class="token punctuation">[</span>$id<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function-variable function">set</span><span class="token operator">:</span> <span class="token punctuation">(</span>state<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token comment">/* istanbul ignore if */</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>__DEV__ <span class="token operator">&amp;&amp;</span> hot<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&#39;cannot set hotState&#39;</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
      <span class="token function">$patch</span><span class="token punctuation">(</span><span class="token punctuation">(</span>$state<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token function">assign</span><span class="token punctuation">(</span>$state<span class="token punctuation">,</span> state<span class="token punctuation">)</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>

  <span class="token comment">/* istanbul ignore if */</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>isVue2<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// mark the store as ready before plugins</span>
    store<span class="token punctuation">.</span>_r <span class="token operator">=</span> <span class="token boolean">true</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// apply all plugins</span>
  pinia<span class="token punctuation">.</span>_p<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>extender<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>extensions <span class="token operator">||</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
        store<span class="token punctuation">.</span>_customProperties<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>
      <span class="token punctuation">)</span>
      <span class="token function">assign</span><span class="token punctuation">(</span>store<span class="token punctuation">,</span> extensions<span class="token punctuation">)</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token function">assign</span><span class="token punctuation">(</span>
        store<span class="token punctuation">,</span>
        scope<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
          <span class="token function">extender</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
            store<span class="token operator">:</span> store <span class="token keyword">as</span> Store<span class="token punctuation">,</span>
            app<span class="token operator">:</span> pinia<span class="token punctuation">.</span>_a<span class="token punctuation">,</span>
            pinia<span class="token punctuation">,</span>
            options<span class="token operator">:</span> optionsForPlugin<span class="token punctuation">,</span>
          <span class="token punctuation">}</span><span class="token punctuation">)</span>
        <span class="token punctuation">)</span><span class="token operator">!</span>
      <span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>
    initialState <span class="token operator">&amp;&amp;</span>
    isOptionsStore <span class="token operator">&amp;&amp;</span>
    <span class="token punctuation">(</span>options <span class="token keyword">as</span> DefineStoreOptions<span class="token operator">&lt;</span>Id<span class="token punctuation">,</span> <span class="token constant">S</span><span class="token punctuation">,</span> <span class="token constant">G</span><span class="token punctuation">,</span> <span class="token constant">A</span><span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>hydrate
  <span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">;</span> <span class="token punctuation">(</span>options <span class="token keyword">as</span> DefineStoreOptions<span class="token operator">&lt;</span>Id<span class="token punctuation">,</span> <span class="token constant">S</span><span class="token punctuation">,</span> <span class="token constant">G</span><span class="token punctuation">,</span> <span class="token constant">A</span><span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>hydrate<span class="token operator">!</span><span class="token punctuation">(</span>
      store<span class="token punctuation">.</span>$state<span class="token punctuation">,</span>
      initialState
    <span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  isListening <span class="token operator">=</span> <span class="token boolean">true</span>
  isSyncListening <span class="token operator">=</span> <span class="token boolean">true</span>
  <span class="token keyword">return</span> store
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,32);function q(G,M){const p=e("ExternalLinkIcon"),o=e("CommentService");return i(),l("div",null,[k,n("p",null,[s("还有另一种可能的语法来定义商店。与 Vue Composition API 的"),n("a",d,[s("setup 函数"),a(p)]),s("类似，我们可以传入一个定义响应式属性和方法的函数，并返回一个包含我们想要公开的属性和方法的对象。")]),v,n("p",null,[s("你可以通过 store 的方法观察状态及其变化"),m,s("，类似于 Vuex 的"),n("a",b,[s("subscribe 方法"),a(p)]),s("。"),g,s("与常规相比使用的优点"),f,s("是"),h,s("只会在"),y,s("后触发一次（例如，使用上面的函数版本时）。")]),w,n("p",null,[s("与计算属性一样，您可以组合多个 getter。通过 访问任何其他吸气剂"),S,s("。即使您不使用 TypeScript，您也可以使用"),n("a",_,[s("JSDoc"),a(p)]),s("提示您的 IDE 类型：")]),x,n("p",null,[s("可以用 观察动作及其结果"),$,s("。传递给它的回调在操作本身之前执行。"),j,s("处理承诺并允许您在操作解决后执行功能。以类似的方式，"),I,s("允许您在操作抛出或拒绝时执行函数。这些对于在运行时跟踪错误很有用，类似于"),n("a",E,[s("Vue 文档中的这个技巧"),a(p)]),s("。")]),O,n("ul",null,[A,P,C,D,L,n("li",null,[n("a",T,[s("实现像本地存储"),a(p)]),s("这样的副作用")]),V]),R,a(o)])}const W=c(r,[["render",q],["__file","pinia.html.vue"]]);export{W as default};
