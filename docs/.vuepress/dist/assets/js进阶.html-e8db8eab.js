import{_ as c,M as t,p,q as i,R as n,N as e,t as s,a1 as o}from"./framework-5866ffd3.js";const r={},u=n("h1",{id:"js进阶",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#js进阶","aria-hidden":"true"},"#"),s(" js进阶")],-1),d=n("h2",{id:"_1、隐式转换",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_1、隐式转换","aria-hidden":"true"},"#"),s(" 1、隐式转换")],-1),k=n("p",null,[n("u",null,"我们知道js式弱类型语言，这意味着当操作涉及不匹配的类型是否，它将允许隐式类型转换，而不是抛出一个错误。")],-1),v=n("p",null,"发生类型转换的情况如下：",-1),_={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Date/Date",target:"_blank",rel:"noopener noreferrer"},b=n("code",null,"Date()",-1),m=n("code",null,"Date",-1),h={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Addition",target:"_blank",rel:"noopener noreferrer"},f=n("code",null,"+",-1),g={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Equality",target:"_blank",rel:"noopener noreferrer"},E=n("code",null,"==",-1),S={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Symbol/toPrimitive",target:"_blank",rel:"noopener noreferrer"},B=n("code",null,"[@@toPrimitive]()",-1),y=n("code",null,"default",-1),j=n("code",null,"valueOf()",-1),z=n("code",null,"toString()",-1),C={class:"custom-container tip"},N=n("p",{class:"custom-container-title"},"TIP",-1),O=n("code",null,"toString()",-1),w=n("code",null,"valueOf()",-1),A={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Number#number_%E5%BC%BA%E5%88%B6%E8%BD%AC%E6%8D%A2",target:"_blank",rel:"noopener noreferrer"},D={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String#%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%BC%BA%E5%88%B6%E8%BD%AC%E6%8D%A2",target:"_blank",rel:"noopener noreferrer"},x=n("h3",{id:"_1、symbol-toprimitive",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_1、symbol-toprimitive","aria-hidden":"true"},"#"),s(" 1、Symbol.toPrimitive")],-1),J=n("strong",null,[n("code",null,"Symbol.toPrimitive")],-1),W={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Data_structures#%E5%BC%BA%E5%88%B6%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2",target:"_blank",rel:"noopener noreferrer"},R=o(`<p>在 <code>Symbol.toPrimitive</code> 属性（用作函数值）的帮助下，对象可以转换为一个原始值。该函数被调用时，会被传递一个字符串参数 <code>hint</code>，表示要转换到的原始值的预期类型。<code>hint</code> 参数的取值是 <code>&quot;number&quot;</code>、<code>&quot;string&quot;</code> 和 <code>&quot;default&quot;</code> 中的任意一个。</p><p>1、如果输入的值已经是一个原始值，则直接返回它</p><p>2、否则，如果输入的值是一个对象，则调用该对象的valueOf()方法， 如果valueOf()方法的返回值是一个原始值，则返回这个原始值。</p><p>3、否则，调用这个对象的toString()方法，如果toString()方法返回的是一个原始值，则返回这个原始值。</p><p>4、否则，抛出TypeError异常。</p><h3 id="_2-对象和数组之间的类型转换" tabindex="-1"><a class="header-anchor" href="#_2-对象和数组之间的类型转换" aria-hidden="true">#</a> 2.对象和数组之间的类型转换</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token operator">+</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;[object Object]&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>{}</code> 和 <code>[]</code> 都没有 <code>[@@toPrimitive]()</code> 方法。因此会调用<code>valueOf</code>方法，而<code>valuieOf</code>返回对象自身，由于返回值还是对象，因此继续调用<code>toString</code>方法，<code>{}.toString()</code>返回<code>&quot;[object Object]&quot;</code>而<code>[].toString()</code>返回是空字符串</p><h3 id="_3-number强制类型转换" tabindex="-1"><a class="header-anchor" href="#_3-number强制类型转换" aria-hidden="true">#</a> 3.Number强制类型转换</h3>`,9),G=o("<li>对于 Number 则总是返回自己</li><li><code>undefined</code> 变成了 <code>NaN</code>。</li><li><code>null</code> 变成了 <code>0</code>。</li><li><code>true</code> 变成了 <code>1</code>；<code>false</code> 变成了 <code>0</code>。</li>",4),q=n("code",null,"NaN",-1),I=o("<li>忽略前导和尾随空格/行终止符。</li><li>前导数值 <code>0</code> 不会导致该数值成为八进制文本（或在严格模式下被拒绝）。</li><li><code>+</code> 和 <code>-</code> 允许在字符串的开头指示其符号。（在实际代码中，它们“看起来像”文字的一部分，但实际上是单独的一元运算符。）然而，该标志只能出现一次，不得后跟空格。</li><li><code>Infinity</code> 和 <code>-Infinity</code> 被当作是字面量。在实际代码中，它们是全局变量。</li><li>空字符串或仅空格字符串转换为 <code>0</code>。</li>",5),P={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Lexical_grammar#numeric_separators",target:"_blank",rel:"noopener noreferrer"},T={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/BigInt",target:"_blank",rel:"noopener noreferrer"},V={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/TypeError",target:"_blank",rel:"noopener noreferrer"},L=n("code",null,"TypeError",-1),F={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Symbol",target:"_blank",rel:"noopener noreferrer"},M={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/TypeError",target:"_blank",rel:"noopener noreferrer"},H=n("code",null,"TypeError",-1),K=n("h3",{id:"_4-强制类型转换遵循的规则",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_4-强制类型转换遵循的规则","aria-hidden":"true"},"#"),s(" 4.强制类型转换遵循的规则")],-1),Q={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Data_structures#%E5%BC%BA%E5%88%B6%E5%8E%9F%E5%A7%8B%E5%80%BC%E8%BD%AC%E6%8D%A2",target:"_blank",rel:"noopener noreferrer"},U=n("code",null,'[@@toPrimitive]("default")',-1),X=n("code",null,"valueOf()",-1),Y=n("code",null,"toString()",-1),Z={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Data_structures#%E5%BC%BA%E5%88%B6%E6%95%B0%E5%AD%97%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2",target:"_blank",rel:"noopener noreferrer"},$={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Number#number_%E5%BC%BA%E5%88%B6%E8%BD%AC%E6%8D%A2",target:"_blank",rel:"noopener noreferrer"},nn={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/BigInt#%E8%BD%AC%E5%8C%96",target:"_blank",rel:"noopener noreferrer"},sn=n("code",null,'[@@toPrimitive]("number")',-1),en=n("code",null,"valueOf()",-1),an=n("code",null,"toString()",-1),on={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String#%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%BC%BA%E5%88%B6%E8%BD%AC%E6%8D%A2",target:"_blank",rel:"noopener noreferrer"},tn=n("code",null,'[@@toPrimitive]("string")',-1),ln=n("code",null,"toString()",-1),cn=n("code",null,"valueOf()",-1),pn=n("p",null,[s("在所有情况下，"),n("u",null,[n("code",null,"[@@toPrimitive]()"),s(" 如果存在，必须可调用并返回原始值")]),s("。")],-1),rn=n("h3",{id:"_5-object-is",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_5-object-is","aria-hidden":"true"},"#"),s(" 5.Object.is")],-1),un=n("p",null,[n("code",null,"Object.is()"),s(" 确定两个值是否为相同值。如果以下其中一项成立，则两个值相同：")],-1),dn={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/undefined",target:"_blank",rel:"noopener noreferrer"},kn=n("code",null,"undefined",-1),vn={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/null",target:"_blank",rel:"noopener noreferrer"},_n=n("code",null,"null",-1),bn=n("li",null,[s("都是 "),n("code",null,"true"),s(" 或者都是 "),n("code",null,"false")],-1),mn=n("li",null,"都是长度相同、字符相同、顺序相同的字符串",-1),hn=n("li",null,"都是相同的对象（意味着两个值都引用了内存中的同一对象）",-1),fn={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/BigInt",target:"_blank",rel:"noopener noreferrer"},gn={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Symbol",target:"_blank",rel:"noopener noreferrer"},En=n("li",null,[s("都是 "),n("code",null,"+0")],-1),Sn=n("li",null,[s("都是 "),n("code",null,"-0")],-1),Bn={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/NaN",target:"_blank",rel:"noopener noreferrer"},yn=n("code",null,"NaN",-1),jn={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/NaN",target:"_blank",rel:"noopener noreferrer"},zn=n("code",null,"NaN",-1),Cn=o(`<h2 id="_2、尾调用-尾递归" tabindex="-1"><a class="header-anchor" href="#_2、尾调用-尾递归" aria-hidden="true">#</a> 2、尾调用-尾递归</h2><p>尾调用是指函数作为另一个函数的最后一条语句被调用，就像这样.</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">doSomethingElse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>ES5中在执行 doSomethingElse 函数的时候会新增一个栈帧，doSomething对应的栈帧会被保留在内存中，当存在循环调用时就容易出现程序问题，比如栈溢出等不可预期的错误。</p><p>如果满足以下条件，尾调用不再创建新的栈帧，而是清除并重用当前栈帧；</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token string">&quot;use strict&quot;</span><span class="token punctuation">;</span>

<span class="token comment">// 可以被优化</span>
<span class="token keyword">function</span> <span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    ／／优化后
    <span class="token keyword">return</span> <span class="token function">doSomethingElse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 无法优化，必须在返回值后添加其他操作</span>
<span class="token keyword">function</span> <span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token number">1</span><span class="token operator">+</span><span class="token function">doSomethingElse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 无法优化，调用不在尾部</span>
<span class="token keyword">function</span> <span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token function">doSomethingElse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> result<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 无法优化，func为闭包</span>
<span class="token keyword">function</span> <span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">var</span> num<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token function-variable function">func</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> num<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>


</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>乘阶</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token string">&#39;use strict&#39;</span><span class="token punctuation">;</span>
<span class="token comment">// 无优化 会一直创建栈帧</span>
<span class="token keyword">function</span> <span class="token function">factorial</span><span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> n <span class="token operator">*</span> <span class="token function">factorial</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">// 优化后</span>
<span class="token keyword">function</span> <span class="token function">factorial_opt</span><span class="token punctuation">(</span><span class="token parameter">n<span class="token punctuation">,</span> p<span class="token operator">=</span><span class="token number">1</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">~</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token number">1</span> <span class="token operator">*</span> p<span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token keyword">let</span> result <span class="token operator">=</span> n <span class="token operator">*</span> p
        <span class="token keyword">return</span> <span class="token function">factorial_opt</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> result<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>斐波那契数列</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 一般的实现方式</span>
<span class="token keyword">function</span> <span class="token function">fibonacci</span><span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">==</span><span class="token number">0</span> <span class="token operator">||</span> n <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> n<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token function">fibonacci</span><span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">fibonacci</span><span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 尾调用优化后</span>
<span class="token string">&#39;use strict&#39;</span>
<span class="token keyword">function</span> <span class="token function">fibonacci_opt</span><span class="token punctuation">(</span><span class="token parameter">n<span class="token punctuation">,</span> current <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> next <span class="token operator">=</span> <span class="token number">1</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>n <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> next
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token function">fibonacci_opt</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> next<span class="token punctuation">,</span> next<span class="token operator">+</span>current<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token function">fibonacci_opt</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,10);function Nn(On,wn){const a=t("ExternalLinkIcon"),l=t("CommentService");return p(),i("div",null,[u,d,k,v,n("ul",null,[n("li",null,[n("a",_,[b,e(a)]),s(" 构造函数，当它收到一个不是 "),m,s(" 实例的参数时——字符串表示日期字符串，而数值表示时间戳。")]),n("li",null,[n("a",h,[f,e(a)]),s(" 运算符——如果运算对象是字符串，执行字符串串联；否则，执行数值相加。")]),n("li",null,[n("a",g,[E,e(a)]),s(" 运算符——如果一个运算对象是原始值，而另一个运算对象是对象（object），则该对象将转换为没有首选类型的原始值。")])]),n("p",null,[s("如果值已经是原始值，则此操作不会进行任何转换。对象按以下顺序调用它的 "),n("a",S,[B,e(a)]),s("（将 hint 作为 "),y,s("）、"),j,s(" 和 "),z,s(" 方法，将其转换为原始值。")]),n("div",C,[N,n("p",null,[s("原始值转换会在 "),O,s(" 方法之前调用 "),w,s(" 方法，这与"),n("a",A,[s("强制数字类型转换"),e(a)]),s("的行为相似，但与"),n("a",D,[s("强制字符串类型转换"),e(a)]),s("不同。")])]),x,n("p",null,[J,s(" 是内置的 symbol 属性，其指定了一种接受首选类型并返回对象原始值的表示的方法。它被所有的"),n("a",W,[s("强类型转换制"),e(a)]),s("算法优先调用。")]),R,n("ul",null,[G,n("li",null,[s("如果它们包含数字字面量，字符串通过解析它们来转换。如果解析失败，返回的结果为"),q,s("。与实际数字字面量相比，它们有一些细微的差别。 "),n("ul",null,[I,n("li",null,[s("不允许使用"),n("a",P,[s("数字分隔符"),e(a)]),s("。")])])]),n("li",null,[n("a",T,[s("BigInt"),e(a)]),s(" 抛出 "),n("a",V,[L,e(a)]),s("，以防止意外的强制隐式转换损失精度。")]),n("li",null,[n("a",F,[s("Symbol"),e(a)]),s(" 抛出 "),n("a",M,[H,e(a)]),s("。")])]),K,n("ul",null,[n("li",null,[n("a",Q,[s("强制原始值转换"),e(a)]),s("："),U,s(" → "),X,s(" → "),Y]),n("li",null,[n("a",Z,[s("强制数字类型转换"),e(a)]),s("、"),n("a",$,[s("强制 number 类型转换"),e(a)]),s("、"),n("a",nn,[s("强制 BigInt 类型转换"),e(a)]),s("："),sn,s(" → "),en,s(" → "),an]),n("li",null,[n("a",on,[s("强制字符串类型转换"),e(a)]),s("："),tn,s(" → "),ln,s(" → "),cn])]),pn,rn,un,n("ul",null,[n("li",null,[s("都是 "),n("a",dn,[kn,e(a)])]),n("li",null,[s("都是 "),n("a",vn,[_n,e(a)])]),bn,mn,hn,n("li",null,[s("都是 "),n("a",fn,[s("BigInt"),e(a)]),s(" 且具有相同的数值")]),n("li",null,[s("都是 "),n("a",gn,[s("symbol"),e(a)]),s(" 且引用相同的 symbol 值")]),n("li",null,[s("都是数字且 "),n("ul",null,[En,Sn,n("li",null,[s("都是 "),n("a",Bn,[yn,e(a)])]),n("li",null,[s("都有相同的值，非零且都不是 "),n("a",jn,[zn,e(a)])])])])]),Cn,e(l)])}const Dn=c(r,[["render",Nn],["__file","js进阶.html.vue"]]);export{Dn as default};
