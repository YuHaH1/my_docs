import{_ as i,M as t,p as c,q as l,R as n,t as s,N as a,a1 as p}from"./framework-a97ca956.js";const r={},d=p(`<h1 id="你不知道的css" tabindex="-1"><a class="header-anchor" href="#你不知道的css" aria-hidden="true">#</a> 你不知道的css</h1><h2 id="文字不允许选中" tabindex="-1"><a class="header-anchor" href="#文字不允许选中" aria-hidden="true">#</a> 文字不允许选中</h2><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code>
<span class="token property">user-select</span><span class="token punctuation">:</span>none

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="houdini" tabindex="-1"><a class="header-anchor" href="#houdini" aria-hidden="true">#</a> Houdini</h2>`,4),u={href:"https://developer.mozilla.org/zh-CN/docs/Web/API/CSS_Object_Model",target:"_blank",rel:"noopener noreferrer"},v=n("p",null,"Houdini的优点",-1),k=n("li",null,"当样式改变时 Houdini 相比行内样式的方式能够能够更快的解析。",-1),m={href:"https://developer.mozilla.org/en-US/docs/Web/API/Worklet",target:"_blank",rel:"noopener noreferrer"},h=p(`<h3 id="css属性" tabindex="-1"><a class="header-anchor" href="#css属性" aria-hidden="true">#</a> CSS属性</h3><p>1️⃣注册自定义属性</p><p>--注册的属性是自定义属性，只有被<code>var()</code>使用的自定义属性才是css变量</p><p>普通自定义属性声明，可以看到CSS自定义属性无法声明他的类型，自定义属性只不过是个字符串。</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">:root</span><span class="token punctuation">{</span>
	<span class="token property">--main-color</span><span class="token punctuation">:</span>#fff<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>CSS Houdini 对CSS自定义属性进行了扩展 CSS Houdini有两种声明属性方式</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">CSS.registerProperty(</span><span class="token punctuation">{</span>
    <span class="token property">name</span><span class="token punctuation">:</span><span class="token string">&#39;--main-color&#39;</span><span class="token punctuation">,</span>
    <span class="token property">syntax</span><span class="token punctuation">:</span><span class="token string">&#39;&lt;color&gt;&#39;</span><span class="token punctuation">,</span>
    <span class="token property">inhertis</span><span class="token punctuation">:</span>false<span class="token punctuation">,</span>
    <span class="token property">initialValue</span><span class="token punctuation">:</span><span class="token string">&#39;#fff&#39;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
// 方式二
<span class="token atrule"><span class="token rule">@property</span> --main-color</span><span class="token punctuation">{</span>
    <span class="token property">syntax</span><span class="token punctuation">:</span><span class="token string">&#39;&lt;color&gt;&#39;</span><span class="token punctuation">;</span>
    <span class="token property">initial-value</span><span class="token punctuation">:</span>#fff<span class="token punctuation">;</span>
    <span class="token property">inherits</span><span class="token punctuation">:</span>false<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2️⃣自定义属性作用域</p><p>一般放在<code>:root和html</code>选择器中的自定义属性是全局的，html权重小于root.</p><h3 id="var函数" tabindex="-1"><a class="header-anchor" href="#var函数" aria-hidden="true">#</a> var函数</h3><p>1️⃣var支持回退</p><p>var函数可以传入一个css自定义属性，并且var函数支持回退，也就是默认值（当var函数引用了一个未定义的自定义属性就会采用第二个参数作为引用的值）。</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">:root</span><span class="token punctuation">{</span>
    <span class="token property">--main-color</span><span class="token punctuation">:</span>#fff<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector">.test</span><span class="token punctuation">{</span>
    <span class="token property">color</span><span class="token punctuation">:</span><span class="token function">var</span><span class="token punctuation">(</span>--main<span class="token punctuation">,</span><span class="token string">&#39;red&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2️⃣var可以嵌套</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>.box{
	background-color:var(--a,var(--b))
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="js操作" tabindex="-1"><a class="header-anchor" href="#js操作" aria-hidden="true">#</a> JS操作</h4><p>1️⃣设置自定义属性</p><p>普通CSS自定义属性的操作</p><p>我们除了可以使用<code>--var</code>注册一个css自定义属性还可以通过js的<code>style.setProperty</code>动态注册一个自定义属性。例如<code>div.style.setProperty(&#39;--main-color&#39;,&#39;#fff&#39;)</code>执行完这个脚本后会在标签上添加style属性例如<code>&lt;div style=&quot;--main-color:#fff&quot;&gt;&lt;/div&gt;</code></p><p>Houdini操作</p><p>在JS中我们可以使用以下方式来注册一个自定义属性</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token constant">CSS</span><span class="token punctuation">.</span><span class="token function">registerProperty</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">&#39;--main-color&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">syntax</span><span class="token operator">:</span><span class="token string">&#39;&lt;color&gt;&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">inherits</span><span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token literal-property property">initialValue</span><span class="token operator">:</span><span class="token string">&#39;#fff&#39;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2️⃣获取自定义属性的值</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">getComputedStyle</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span>documentElement<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPropertyValue</span><span class="token punctuation">(</span><span class="token string">&#39;--main-color&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,24);function b(g,f){const e=t("ExternalLinkIcon"),o=t("CommentService");return c(),l("div",null,[d,n("p",null,[s("Houdini 是一组底层 API，它们公开了 CSS 引擎的各个部分，从而使开发人员能够通过加入浏览器渲染引擎的样式和布局过程来扩展 CSS。Houdini 是一组 API，它们使开发人员可以直接访问"),n("a",u,[s("CSS 对象模型"),a(e)]),s(" （CSSOM），使开发人员可以编写浏览器可以解析为 CSS 的代码，从而创建新的 CSS 功能，而无需等待它们在浏览器中本地实现。")]),v,n("ul",null,[k,n("li",null,[s("一个 CSS Houdini 的特性就是 "),n("a",m,[s("Worklet (en-US)"),a(e)]),s("。在它的帮助下，你可以通过引入一行 JavaScript 代码来引入配置化的组件，从而创建模块式的 CSS。不依赖任何前置处理器、后置处理器或者 JavaScript 框架。")])]),h,a(o)])}const _=i(r,[["render",b],["__file","你不知道的css.html.vue"]]);export{_ as default};
