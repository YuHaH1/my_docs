import{_ as d,M as o,p as r,q as n,R as c,t as e,N as a,a1 as t}from"./framework-5866ffd3.js";const s="/Browser/browser1.png",h="/Browser/cookie.png",l={},m=t('<h1 id="浏览器必备知识" tabindex="-1"><a class="header-anchor" href="#浏览器必备知识" aria-hidden="true">#</a> 浏览器必备知识</h1><h2 id="_1-输入url会发生什么" tabindex="-1"><a class="header-anchor" href="#_1-输入url会发生什么" aria-hidden="true">#</a> 1.输入URL会发生什么？</h2><h3 id="_1-域名解析" tabindex="-1"><a class="header-anchor" href="#_1-域名解析" aria-hidden="true">#</a> 1.域名解析</h3><p>https://facyfish.top/Notes</p><ul><li>协议：<code>https</code></li><li>域名：<code>fancyfish.top</code></li><li>路径：<code>Notes</code></li><li>端口-隐藏：<code>443</code></li><li>锚点：<code>#comments</code></li><li>参数：<code>?a=123</code></li></ul><p>域名解析目的是什么？将域名解析成IP</p><p>如何解析？</p><p>1.浏览器缓存：浏览器会按照一定的频率缓存 DNS 记录。</p><p>2.操作系统缓存：如果浏览器缓存中找不到需要的 DNS 记录，那就去操作系统中找。</p><p>3.路由缓存：路由器也有 DNS 缓存。</p><p>4.ISP 的 DNS 服务器：ISP 是互联网服务提供商(Internet Service Provider)的简称，ISP 有专门的 DNS 服务器应对 DNS 查询请求。</p><p>根服务器：ISP 的 DNS 服务器还找不到的话，它就会向根服务器发出请求，进行递归查询</p><p>顶级域名服务器</p><p>权威域名服务器<strong>但是如果设置了CDN，前面的没找到不会找这里而是去只能DNS去找</strong></p><p><img src="'+s+'" alt=""></p><ol><li>递归查询：我们的浏览器、操作系统、路由器都会缓存一些URL对应的IP地址，统称为DNS高速缓存。这是为了加快DNS解析速度，使得不必每次都到根域名服务器中去查询。</li><li>迭代查询：局部的DNS服务器并不会自己向其他服务器进行查询，而是把能够解析该域名的服务器IP地址返回给客户端，客户端会不断的向这些服务器进行查询，直到查询到了位置，迭代的话只会帮你找到相关的服务器，然后说我现在比较忙，你自己去找吧。</li></ol><h3 id="cdn优化方案" tabindex="-1"><a class="header-anchor" href="#cdn优化方案" aria-hidden="true">#</a> CDN优化方案</h3><p>CDN（Content Delivery Network）优化是指通过优化CDN的配置和使用方式来提高网站的性能和可靠性。下面是一些CDN优化的建议：</p><p>1.选择适合自己的CDN供应商：不同的CDN供应商在性能、功能、价格等方面都有所不同，因此应该根据自己的需求选择适合自己的CDN供应商。</p><p>2.使用多个CDN：使用多个CDN可以提高网站的可靠性和性能，因为这样可以避免单一点故障，并减少延迟和带宽瓶颈。</p><p>3.合理配置CDN缓存时间：合理配置CDN缓存时间可以减少请求次数和延迟，提高网站性能。但是，缓存时间太长会导致内容更新缓慢，缓存时间太短则会增加请求次数和延迟。</p><p>4.使用HTTP/2协议：HTTP/2可以提高网站性能，因为它支持多路复用、头部压缩、二进制传输等功能，可以减少请求次数和延迟。</p><p>5.启用CDN的Gzip压缩：启用CDN的Gzip压缩可以减少传输数据的大小，从而减少带宽使用和延迟。</p><h4 id="域名解析的优化" tabindex="-1"><a class="header-anchor" href="#域名解析的优化" aria-hidden="true">#</a> 域名解析的优化</h4><p><strong>1.使用dns-prefetch</strong></p><p>大型网站，有多个不同服务器资源的情况下，都可采取DNS预解析，提前解析，减少页面卡顿。使用域名预解析这里可以查看性能优化的笔记</p><p>2.<strong>DNS负载均衡</strong></p><p>当一个网站有多个服务器地址时，在应答DNS查询的时候，DNS服务器会对每个查询返回不同的解析结果，也就是返回不同的IP地址，从而把访问引导到不同的服务器上去，来达到负载均衡的目的。例如可以根据每台机器的负载量，或者该机器距离用户的地理位置距离等等条件。</p><h3 id="_2-发送http请求" tabindex="-1"><a class="header-anchor" href="#_2-发送http请求" aria-hidden="true">#</a> 2.发送HTTP请求</h3><h4 id="_1-tcp三次握手" tabindex="-1"><a class="header-anchor" href="#_1-tcp三次握手" aria-hidden="true">#</a> 1.TCP三次握手</h4><p><strong>客户端发送一个带 SYN=1，Seq=X 的数据包到服务器端口</strong>（第一次握手，由浏览器发起，告诉服务器我要发送请求了）</p><p><strong>服务器发回一个带 SYN=1， ACK=X+1， Seq=Y 的响应包以示传达确认信息</strong>（第二次握手，由服务器发起，告诉浏览器我准备接受了，你赶紧发送吧）</p><p><strong>客户端再回传一个带 ACK=Y+1， Seq=Z 的数据包，代表“握手结束”</strong>（第三次握手，由浏览器发送，告诉服务器，我马上就发了，准备接受吧）</p><p>三次握手的原因：<strong>为了防止已失效的连接请求报文段突然又传送到了服务端，因而产生错误</strong>”。</p><h3 id="_3-发送http请求" tabindex="-1"><a class="header-anchor" href="#_3-发送http请求" aria-hidden="true">#</a> 3.发送http请求</h3><p>请求html、css、js然后根据html生成dom树，css-&gt;cssom树 将dom+cssom结合生成渲染树，然后根据渲染树开始布局，布局完成后渲染页面，遇到js资源会阻塞css和html的解析与渲染。完成选然后释放TCP连接</p><h2 id="_2-cookie" tabindex="-1"><a class="header-anchor" href="#_2-cookie" aria-hidden="true">#</a> 2.Cookie</h2><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>跨站和跨域的概念————————</p><p>​ 1.跨站 ：顶级域名和二级域名相同的为同站eg：<code>b.a.com c.a.com</code></p><p>​ 2.跨域 ：协议、域名、端口任何一个不同都属于跨域</p></div>',38),_={href:"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Overview#http_%E6%98%AF%E6%97%A0%E7%8A%B6%E6%80%81%EF%BC%8C%E6%9C%89%E4%BC%9A%E8%AF%9D%E7%9A%84",target:"_blank",rel:"noopener noreferrer"},N=t('<p>cookie的删除操作<code>document.cookie=‘key=；max-age=-1’</code></p><h3 id="cookie基本属性" tabindex="-1"><a class="header-anchor" href="#cookie基本属性" aria-hidden="true">#</a> cookie基本属性</h3><p><code>httpOnly</code>设置了就无法通过js获取和操作改cookie，只能由服务端在set-cookie中设置</p><p><code>secure</code>只能用https协议传输</p><p><img src="'+h+'" alt=""></p><p><code>Domain</code></p><p>​ 1.中不携带协议和端口；</p><p>​ 2.带<code>.</code>的domain标识该cookie可以作用域当前域及其子域（例如我在<code>a.com</code>中种下一个<code>cookie</code>设它的<code>domain</code>为<code>.a.com</code>,我在sub.a.com中就会存在该cookie）</p><p>​ 3.如果新增cookie时没有带domain那么该cookie只作用域当前域，如果设置了<code>domain=a.com</code>那么实际它的域是<code>.a.com</code></p><p>​ 4.子域设置的cookie可以在父域获取到。例如我在<code>sub.a.com</code>设置域 <code>domain=a.com</code>那么我在<code>a.com</code>就能看到该cookie</p><p><code>path</code></p><p>如果设置了cookie <code>path=/a</code>那么只有路径/a的时候才有该cookie，例如a.com/a</p><p><code>expires</code>和<code>max-age</code></p><p>expires指定时间失效</p><p>max-age多少秒后失效 <strong>max-age优先级更高</strong></p><p>如果设置为负值标识立即删除该cookie。如果一个cookie没有设置过期时间则默认是会话cookie当关闭浏览器就会删除。</p><p><code>samesite</code></p><p>取值在None Lax Strict之中，<u>只有在跨站请求才会起作用</u>。</p><ul><li>None表示无论是否跨站都会发送cookie</li><li>Strict跨站不携带cookie</li><li>Lax默认值，部分跨站情况下携带（a标签，预加载，get表单，iframe，AJAX，Image中会发送cookie）</li></ul>',19);function k(D,g){const i=o("ExternalLinkIcon"),p=o("CommentService");return r(),n("div",null,[m,c("p",null,[e("Cookie 使基于"),c("a",_,[e("无状态"),a(i)]),e("的 HTTP 协议记录稳定的状态信息成为了可能。")]),N,a(p)])}const S=d(l,[["render",k],["__file","浏览器必备知识.html.vue"]]);export{S as default};
